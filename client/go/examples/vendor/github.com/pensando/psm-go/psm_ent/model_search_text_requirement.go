/*
 * Search API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SearchTextRequirement TextRequirement is AND of text-strings in the list It is comprised of words or phrases for text search support. If a text-string has space separated multi-word, it will be interpreted as a phrase. In the example below : - \"link down\" will be a phrase query - network, production, staging will be a word query For eg: network                      (match network) link down                    (match \"link down\" phrase) network,production           (match network AND production) network,link down,staging    (match network AND \"link down\" AND staging).
type SearchTextRequirement struct {
	// AND of words or phrases to be matched The max text-string length is 256 bytes. Length of string should be between 0 and 256.
	Text *[]string `json:"text,omitempty"`
}

// NewSearchTextRequirement instantiates a new SearchTextRequirement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchTextRequirement() *SearchTextRequirement {
	this := SearchTextRequirement{}
	return &this
}

// NewSearchTextRequirementWithDefaults instantiates a new SearchTextRequirement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchTextRequirementWithDefaults() *SearchTextRequirement {
	this := SearchTextRequirement{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SearchTextRequirement) GetText() []string {
	if o == nil || o.Text == nil {
		var ret []string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchTextRequirement) GetTextOk() (*[]string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SearchTextRequirement) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given []string and assigns it to the Text field.
func (o *SearchTextRequirement) SetText(v []string) {
	o.Text = &v
}

func (o SearchTextRequirement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableSearchTextRequirement struct {
	value *SearchTextRequirement
	isSet bool
}

func (v NullableSearchTextRequirement) Get() *SearchTextRequirement {
	return v.value
}

func (v *NullableSearchTextRequirement) Set(val *SearchTextRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchTextRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchTextRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchTextRequirement(val *SearchTextRequirement) *NullableSearchTextRequirement {
	return &NullableSearchTextRequirement{value: val, isSet: true}
}

func (v NullableSearchTextRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchTextRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


