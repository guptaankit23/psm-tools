/*
 * Workload API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ApiTimestamp struct for ApiTimestamp
type ApiTimestamp struct {
	Nanos *int32 `json:"nanos,omitempty"`
	Seconds *string `json:"seconds,omitempty"`
}

// NewApiTimestamp instantiates a new ApiTimestamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTimestamp() *ApiTimestamp {
	this := ApiTimestamp{}
	return &this
}

// NewApiTimestampWithDefaults instantiates a new ApiTimestamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTimestampWithDefaults() *ApiTimestamp {
	this := ApiTimestamp{}
	return &this
}

// GetNanos returns the Nanos field value if set, zero value otherwise.
func (o *ApiTimestamp) GetNanos() int32 {
	if o == nil || o.Nanos == nil {
		var ret int32
		return ret
	}
	return *o.Nanos
}

// GetNanosOk returns a tuple with the Nanos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTimestamp) GetNanosOk() (*int32, bool) {
	if o == nil || o.Nanos == nil {
		return nil, false
	}
	return o.Nanos, true
}

// HasNanos returns a boolean if a field has been set.
func (o *ApiTimestamp) HasNanos() bool {
	if o != nil && o.Nanos != nil {
		return true
	}

	return false
}

// SetNanos gets a reference to the given int32 and assigns it to the Nanos field.
func (o *ApiTimestamp) SetNanos(v int32) {
	o.Nanos = &v
}

// GetSeconds returns the Seconds field value if set, zero value otherwise.
func (o *ApiTimestamp) GetSeconds() string {
	if o == nil || o.Seconds == nil {
		var ret string
		return ret
	}
	return *o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTimestamp) GetSecondsOk() (*string, bool) {
	if o == nil || o.Seconds == nil {
		return nil, false
	}
	return o.Seconds, true
}

// HasSeconds returns a boolean if a field has been set.
func (o *ApiTimestamp) HasSeconds() bool {
	if o != nil && o.Seconds != nil {
		return true
	}

	return false
}

// SetSeconds gets a reference to the given string and assigns it to the Seconds field.
func (o *ApiTimestamp) SetSeconds(v string) {
	o.Seconds = &v
}

func (o ApiTimestamp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nanos != nil {
		toSerialize["nanos"] = o.Nanos
	}
	if o.Seconds != nil {
		toSerialize["seconds"] = o.Seconds
	}
	return json.Marshal(toSerialize)
}

type NullableApiTimestamp struct {
	value *ApiTimestamp
	isSet bool
}

func (v NullableApiTimestamp) Get() *ApiTimestamp {
	return v.value
}

func (v *NullableApiTimestamp) Set(val *ApiTimestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTimestamp(val *ApiTimestamp) *NullableApiTimestamp {
	return &NullableApiTimestamp{value: val, isSet: true}
}

func (v NullableApiTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


