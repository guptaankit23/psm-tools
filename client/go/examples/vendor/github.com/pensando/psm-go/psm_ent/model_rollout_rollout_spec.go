/*
 * Rollout API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
	"time"
)

// RolloutRolloutSpec RolloutSpec is the Spec of a Rollout.
type RolloutRolloutSpec struct {
	// When DSCMustMatchConstraint is true, Any DSC which does not match OrderConstraints does not go through rollout.
	DscMustMatchConstraint *bool `json:"dsc-must-match-constraint,omitempty"`
	// Dont upgrade Controller but only upgrade DistributedServiceCards.
	DscsOnly *bool `json:"dscs-only,omitempty"`
	// After these many failures are observed during DSC upgrade, the rollout process stops This setting applies to DSCs only. The controller nodes are rollout first and any failure there stops the rollout of DistributedServiceCards.
	MaxNicFailuresBeforeAbort *int64 `json:"max-nic-failures-before-abort,omitempty"`
	// MaxParallel is the maximum number of nodes getting updated at any time This setting is applicable only to DistributedServiceCards. Controller nodes are always upgraded one after another.
	MaxParallel *int64 `json:"max-parallel,omitempty"`
	// If specified, this is the sequence in which the DistributedServiceCards are upgraded based on their labels. if a DistributedServiceCard matches multiple constraints, the first one is used. Any DistributedServiceCard which does not match the constraints is upgraded at the end. This order is mainly for the DSCs on Hosts Controller nodes are always rollout one after other.
	OrderConstraints *[]LabelsSelector `json:"order-constraints,omitempty"`
	// If enabled, will retry rollout of failed naples within the maintenance window upto a max of 5 times.
	Retry *bool `json:"retry,omitempty"`
	// ScheduledEndTime, if specified, after which the rollout is supposed to stop, if not completed by that time Typically represents the end of Maintenance window. (example:\"2002-10-02T15:00:00.05Z\").
	ScheduledEndTime *time.Time `json:"scheduled-end-time,omitempty"`
	// Time, if specified, at which the rollout is supposed to start. (example:\"2002-10-02T15:00:00.05Z\").
	ScheduledStartTime *time.Time `json:"scheduled-start-time,omitempty"`
	Strategy *string `json:"strategy,omitempty"`
	// When Set to true, the current rollout is suspended. Existing Nodes/Services/DistributedServiceCards in the middle of rollout continue rollout execution but any Nodes/Services/DistributedServiceCards which has not started Rollout will not be scheduled one.
	Suspend *bool `json:"suspend,omitempty"`
	UpgradeType *string `json:"upgrade-type,omitempty"`
	// New Version of the image to rollout to.
	Version *string `json:"version,omitempty"`
}

// NewRolloutRolloutSpec instantiates a new RolloutRolloutSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolloutRolloutSpec() *RolloutRolloutSpec {
	this := RolloutRolloutSpec{}
	var maxParallel int64 = 2
	this.MaxParallel = &maxParallel
	var strategy string = "linear"
	this.Strategy = &strategy
	var upgradeType string = "graceful"
	this.UpgradeType = &upgradeType
	return &this
}

// NewRolloutRolloutSpecWithDefaults instantiates a new RolloutRolloutSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolloutRolloutSpecWithDefaults() *RolloutRolloutSpec {
	this := RolloutRolloutSpec{}
	var maxParallel int64 = 2
	this.MaxParallel = &maxParallel
	var strategy string = "linear"
	this.Strategy = &strategy
	var upgradeType string = "graceful"
	this.UpgradeType = &upgradeType
	return &this
}

// GetDscMustMatchConstraint returns the DscMustMatchConstraint field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetDscMustMatchConstraint() bool {
	if o == nil || o.DscMustMatchConstraint == nil {
		var ret bool
		return ret
	}
	return *o.DscMustMatchConstraint
}

// GetDscMustMatchConstraintOk returns a tuple with the DscMustMatchConstraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetDscMustMatchConstraintOk() (*bool, bool) {
	if o == nil || o.DscMustMatchConstraint == nil {
		return nil, false
	}
	return o.DscMustMatchConstraint, true
}

// HasDscMustMatchConstraint returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasDscMustMatchConstraint() bool {
	if o != nil && o.DscMustMatchConstraint != nil {
		return true
	}

	return false
}

// SetDscMustMatchConstraint gets a reference to the given bool and assigns it to the DscMustMatchConstraint field.
func (o *RolloutRolloutSpec) SetDscMustMatchConstraint(v bool) {
	o.DscMustMatchConstraint = &v
}

// GetDscsOnly returns the DscsOnly field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetDscsOnly() bool {
	if o == nil || o.DscsOnly == nil {
		var ret bool
		return ret
	}
	return *o.DscsOnly
}

// GetDscsOnlyOk returns a tuple with the DscsOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetDscsOnlyOk() (*bool, bool) {
	if o == nil || o.DscsOnly == nil {
		return nil, false
	}
	return o.DscsOnly, true
}

// HasDscsOnly returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasDscsOnly() bool {
	if o != nil && o.DscsOnly != nil {
		return true
	}

	return false
}

// SetDscsOnly gets a reference to the given bool and assigns it to the DscsOnly field.
func (o *RolloutRolloutSpec) SetDscsOnly(v bool) {
	o.DscsOnly = &v
}

// GetMaxNicFailuresBeforeAbort returns the MaxNicFailuresBeforeAbort field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetMaxNicFailuresBeforeAbort() int64 {
	if o == nil || o.MaxNicFailuresBeforeAbort == nil {
		var ret int64
		return ret
	}
	return *o.MaxNicFailuresBeforeAbort
}

// GetMaxNicFailuresBeforeAbortOk returns a tuple with the MaxNicFailuresBeforeAbort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetMaxNicFailuresBeforeAbortOk() (*int64, bool) {
	if o == nil || o.MaxNicFailuresBeforeAbort == nil {
		return nil, false
	}
	return o.MaxNicFailuresBeforeAbort, true
}

// HasMaxNicFailuresBeforeAbort returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasMaxNicFailuresBeforeAbort() bool {
	if o != nil && o.MaxNicFailuresBeforeAbort != nil {
		return true
	}

	return false
}

// SetMaxNicFailuresBeforeAbort gets a reference to the given int64 and assigns it to the MaxNicFailuresBeforeAbort field.
func (o *RolloutRolloutSpec) SetMaxNicFailuresBeforeAbort(v int64) {
	o.MaxNicFailuresBeforeAbort = &v
}

// GetMaxParallel returns the MaxParallel field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetMaxParallel() int64 {
	if o == nil || o.MaxParallel == nil {
		var ret int64
		return ret
	}
	return *o.MaxParallel
}

// GetMaxParallelOk returns a tuple with the MaxParallel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetMaxParallelOk() (*int64, bool) {
	if o == nil || o.MaxParallel == nil {
		return nil, false
	}
	return o.MaxParallel, true
}

// HasMaxParallel returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasMaxParallel() bool {
	if o != nil && o.MaxParallel != nil {
		return true
	}

	return false
}

// SetMaxParallel gets a reference to the given int64 and assigns it to the MaxParallel field.
func (o *RolloutRolloutSpec) SetMaxParallel(v int64) {
	o.MaxParallel = &v
}

// GetOrderConstraints returns the OrderConstraints field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetOrderConstraints() []LabelsSelector {
	if o == nil || o.OrderConstraints == nil {
		var ret []LabelsSelector
		return ret
	}
	return *o.OrderConstraints
}

// GetOrderConstraintsOk returns a tuple with the OrderConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetOrderConstraintsOk() (*[]LabelsSelector, bool) {
	if o == nil || o.OrderConstraints == nil {
		return nil, false
	}
	return o.OrderConstraints, true
}

// HasOrderConstraints returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasOrderConstraints() bool {
	if o != nil && o.OrderConstraints != nil {
		return true
	}

	return false
}

// SetOrderConstraints gets a reference to the given []LabelsSelector and assigns it to the OrderConstraints field.
func (o *RolloutRolloutSpec) SetOrderConstraints(v []LabelsSelector) {
	o.OrderConstraints = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetRetry() bool {
	if o == nil || o.Retry == nil {
		var ret bool
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetRetryOk() (*bool, bool) {
	if o == nil || o.Retry == nil {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasRetry() bool {
	if o != nil && o.Retry != nil {
		return true
	}

	return false
}

// SetRetry gets a reference to the given bool and assigns it to the Retry field.
func (o *RolloutRolloutSpec) SetRetry(v bool) {
	o.Retry = &v
}

// GetScheduledEndTime returns the ScheduledEndTime field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetScheduledEndTime() time.Time {
	if o == nil || o.ScheduledEndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledEndTime
}

// GetScheduledEndTimeOk returns a tuple with the ScheduledEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetScheduledEndTimeOk() (*time.Time, bool) {
	if o == nil || o.ScheduledEndTime == nil {
		return nil, false
	}
	return o.ScheduledEndTime, true
}

// HasScheduledEndTime returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasScheduledEndTime() bool {
	if o != nil && o.ScheduledEndTime != nil {
		return true
	}

	return false
}

// SetScheduledEndTime gets a reference to the given time.Time and assigns it to the ScheduledEndTime field.
func (o *RolloutRolloutSpec) SetScheduledEndTime(v time.Time) {
	o.ScheduledEndTime = &v
}

// GetScheduledStartTime returns the ScheduledStartTime field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetScheduledStartTime() time.Time {
	if o == nil || o.ScheduledStartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledStartTime
}

// GetScheduledStartTimeOk returns a tuple with the ScheduledStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetScheduledStartTimeOk() (*time.Time, bool) {
	if o == nil || o.ScheduledStartTime == nil {
		return nil, false
	}
	return o.ScheduledStartTime, true
}

// HasScheduledStartTime returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasScheduledStartTime() bool {
	if o != nil && o.ScheduledStartTime != nil {
		return true
	}

	return false
}

// SetScheduledStartTime gets a reference to the given time.Time and assigns it to the ScheduledStartTime field.
func (o *RolloutRolloutSpec) SetScheduledStartTime(v time.Time) {
	o.ScheduledStartTime = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetStrategy() string {
	if o == nil || o.Strategy == nil {
		var ret string
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetStrategyOk() (*string, bool) {
	if o == nil || o.Strategy == nil {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasStrategy() bool {
	if o != nil && o.Strategy != nil {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given string and assigns it to the Strategy field.
func (o *RolloutRolloutSpec) SetStrategy(v string) {
	o.Strategy = &v
}

// GetSuspend returns the Suspend field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetSuspend() bool {
	if o == nil || o.Suspend == nil {
		var ret bool
		return ret
	}
	return *o.Suspend
}

// GetSuspendOk returns a tuple with the Suspend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetSuspendOk() (*bool, bool) {
	if o == nil || o.Suspend == nil {
		return nil, false
	}
	return o.Suspend, true
}

// HasSuspend returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasSuspend() bool {
	if o != nil && o.Suspend != nil {
		return true
	}

	return false
}

// SetSuspend gets a reference to the given bool and assigns it to the Suspend field.
func (o *RolloutRolloutSpec) SetSuspend(v bool) {
	o.Suspend = &v
}

// GetUpgradeType returns the UpgradeType field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetUpgradeType() string {
	if o == nil || o.UpgradeType == nil {
		var ret string
		return ret
	}
	return *o.UpgradeType
}

// GetUpgradeTypeOk returns a tuple with the UpgradeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetUpgradeTypeOk() (*string, bool) {
	if o == nil || o.UpgradeType == nil {
		return nil, false
	}
	return o.UpgradeType, true
}

// HasUpgradeType returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasUpgradeType() bool {
	if o != nil && o.UpgradeType != nil {
		return true
	}

	return false
}

// SetUpgradeType gets a reference to the given string and assigns it to the UpgradeType field.
func (o *RolloutRolloutSpec) SetUpgradeType(v string) {
	o.UpgradeType = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RolloutRolloutSpec) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutSpec) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RolloutRolloutSpec) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RolloutRolloutSpec) SetVersion(v string) {
	o.Version = &v
}

func (o RolloutRolloutSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DscMustMatchConstraint != nil {
		toSerialize["dsc-must-match-constraint"] = o.DscMustMatchConstraint
	}
	if o.DscsOnly != nil {
		toSerialize["dscs-only"] = o.DscsOnly
	}
	if o.MaxNicFailuresBeforeAbort != nil {
		toSerialize["max-nic-failures-before-abort"] = o.MaxNicFailuresBeforeAbort
	}
	if o.MaxParallel != nil {
		toSerialize["max-parallel"] = o.MaxParallel
	}
	if o.OrderConstraints != nil {
		toSerialize["order-constraints"] = o.OrderConstraints
	}
	if o.Retry != nil {
		toSerialize["retry"] = o.Retry
	}
	if o.ScheduledEndTime != nil {
		toSerialize["scheduled-end-time"] = o.ScheduledEndTime
	}
	if o.ScheduledStartTime != nil {
		toSerialize["scheduled-start-time"] = o.ScheduledStartTime
	}
	if o.Strategy != nil {
		toSerialize["strategy"] = o.Strategy
	}
	if o.Suspend != nil {
		toSerialize["suspend"] = o.Suspend
	}
	if o.UpgradeType != nil {
		toSerialize["upgrade-type"] = o.UpgradeType
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableRolloutRolloutSpec struct {
	value *RolloutRolloutSpec
	isSet bool
}

func (v NullableRolloutRolloutSpec) Get() *RolloutRolloutSpec {
	return v.value
}

func (v *NullableRolloutRolloutSpec) Set(val *RolloutRolloutSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRolloutRolloutSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRolloutRolloutSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolloutRolloutSpec(val *RolloutRolloutSpec) *NullableRolloutRolloutSpec {
	return &NullableRolloutRolloutSpec{value: val, isSet: true}
}

func (v NullableRolloutRolloutSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolloutRolloutSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


