/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringMatchSelector Traffic Selection Rules Traffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses.
type MonitoringMatchSelector struct {
	// IP address list, example [\"10.1.1.10\",\"10.1.1.15\"].
	IpAddresses *[]string `json:"ip-addresses,omitempty"`
	// List of MacAddresses - \"aabb.ccdd.eeff\", \"0001.0203.0405\". Should be a valid MAC address.
	MacAddresses *[]string `json:"mac-addresses,omitempty"`
}

// NewMonitoringMatchSelector instantiates a new MonitoringMatchSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMatchSelector() *MonitoringMatchSelector {
	this := MonitoringMatchSelector{}
	return &this
}

// NewMonitoringMatchSelectorWithDefaults instantiates a new MonitoringMatchSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMatchSelectorWithDefaults() *MonitoringMatchSelector {
	this := MonitoringMatchSelector{}
	return &this
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *MonitoringMatchSelector) GetIpAddresses() []string {
	if o == nil || o.IpAddresses == nil {
		var ret []string
		return ret
	}
	return *o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchSelector) GetIpAddressesOk() (*[]string, bool) {
	if o == nil || o.IpAddresses == nil {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *MonitoringMatchSelector) HasIpAddresses() bool {
	if o != nil && o.IpAddresses != nil {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *MonitoringMatchSelector) SetIpAddresses(v []string) {
	o.IpAddresses = &v
}

// GetMacAddresses returns the MacAddresses field value if set, zero value otherwise.
func (o *MonitoringMatchSelector) GetMacAddresses() []string {
	if o == nil || o.MacAddresses == nil {
		var ret []string
		return ret
	}
	return *o.MacAddresses
}

// GetMacAddressesOk returns a tuple with the MacAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchSelector) GetMacAddressesOk() (*[]string, bool) {
	if o == nil || o.MacAddresses == nil {
		return nil, false
	}
	return o.MacAddresses, true
}

// HasMacAddresses returns a boolean if a field has been set.
func (o *MonitoringMatchSelector) HasMacAddresses() bool {
	if o != nil && o.MacAddresses != nil {
		return true
	}

	return false
}

// SetMacAddresses gets a reference to the given []string and assigns it to the MacAddresses field.
func (o *MonitoringMatchSelector) SetMacAddresses(v []string) {
	o.MacAddresses = &v
}

func (o MonitoringMatchSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddresses != nil {
		toSerialize["ip-addresses"] = o.IpAddresses
	}
	if o.MacAddresses != nil {
		toSerialize["mac-addresses"] = o.MacAddresses
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringMatchSelector struct {
	value *MonitoringMatchSelector
	isSet bool
}

func (v NullableMonitoringMatchSelector) Get() *MonitoringMatchSelector {
	return v.value
}

func (v *NullableMonitoringMatchSelector) Set(val *MonitoringMatchSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMatchSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMatchSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMatchSelector(val *MonitoringMatchSelector) *NullableMonitoringMatchSelector {
	return &NullableMonitoringMatchSelector{value: val, isSet: true}
}

func (v NullableMonitoringMatchSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMatchSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


