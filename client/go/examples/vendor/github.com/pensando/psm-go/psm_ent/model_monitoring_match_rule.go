/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringMatchRule MatchRule : This is used to select packets that need to be monitored (mirrored).
type MonitoringMatchRule struct {
	AppProtocolSelectors *MonitoringAppProtoSelector `json:"app-protocol-selectors,omitempty"`
	Destination *MonitoringMatchSelector `json:"destination,omitempty"`
	Source *MonitoringMatchSelector `json:"source,omitempty"`
}

// NewMonitoringMatchRule instantiates a new MonitoringMatchRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMatchRule() *MonitoringMatchRule {
	this := MonitoringMatchRule{}
	return &this
}

// NewMonitoringMatchRuleWithDefaults instantiates a new MonitoringMatchRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMatchRuleWithDefaults() *MonitoringMatchRule {
	this := MonitoringMatchRule{}
	return &this
}

// GetAppProtocolSelectors returns the AppProtocolSelectors field value if set, zero value otherwise.
func (o *MonitoringMatchRule) GetAppProtocolSelectors() MonitoringAppProtoSelector {
	if o == nil || o.AppProtocolSelectors == nil {
		var ret MonitoringAppProtoSelector
		return ret
	}
	return *o.AppProtocolSelectors
}

// GetAppProtocolSelectorsOk returns a tuple with the AppProtocolSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchRule) GetAppProtocolSelectorsOk() (*MonitoringAppProtoSelector, bool) {
	if o == nil || o.AppProtocolSelectors == nil {
		return nil, false
	}
	return o.AppProtocolSelectors, true
}

// HasAppProtocolSelectors returns a boolean if a field has been set.
func (o *MonitoringMatchRule) HasAppProtocolSelectors() bool {
	if o != nil && o.AppProtocolSelectors != nil {
		return true
	}

	return false
}

// SetAppProtocolSelectors gets a reference to the given MonitoringAppProtoSelector and assigns it to the AppProtocolSelectors field.
func (o *MonitoringMatchRule) SetAppProtocolSelectors(v MonitoringAppProtoSelector) {
	o.AppProtocolSelectors = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *MonitoringMatchRule) GetDestination() MonitoringMatchSelector {
	if o == nil || o.Destination == nil {
		var ret MonitoringMatchSelector
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchRule) GetDestinationOk() (*MonitoringMatchSelector, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *MonitoringMatchRule) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given MonitoringMatchSelector and assigns it to the Destination field.
func (o *MonitoringMatchRule) SetDestination(v MonitoringMatchSelector) {
	o.Destination = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *MonitoringMatchRule) GetSource() MonitoringMatchSelector {
	if o == nil || o.Source == nil {
		var ret MonitoringMatchSelector
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchRule) GetSourceOk() (*MonitoringMatchSelector, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *MonitoringMatchRule) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given MonitoringMatchSelector and assigns it to the Source field.
func (o *MonitoringMatchRule) SetSource(v MonitoringMatchSelector) {
	o.Source = &v
}

func (o MonitoringMatchRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppProtocolSelectors != nil {
		toSerialize["app-protocol-selectors"] = o.AppProtocolSelectors
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringMatchRule struct {
	value *MonitoringMatchRule
	isSet bool
}

func (v NullableMonitoringMatchRule) Get() *MonitoringMatchRule {
	return v.value
}

func (v *NullableMonitoringMatchRule) Set(val *MonitoringMatchRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMatchRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMatchRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMatchRule(val *MonitoringMatchRule) *NullableMonitoringMatchRule {
	return &NullableMonitoringMatchRule{value: val, isSet: true}
}

func (v NullableMonitoringMatchRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMatchRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


