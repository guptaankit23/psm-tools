/*
 * Cluster API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ClusterSearchOptions SearchOptions provides options to configure search functionality for the cluster.
type ClusterSearchOptions struct {
	// EnableFwlogSearch when enabled peforms reverse indexing of fwlogs getting ingested into PSM. The reverse indexed logs can be queried using the fwlog query/search API.
	EnableFwlogSearch *bool `json:"enable-fwlog-search,omitempty"`
}

// NewClusterSearchOptions instantiates a new ClusterSearchOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterSearchOptions() *ClusterSearchOptions {
	this := ClusterSearchOptions{}
	var enableFwlogSearch bool = true
	this.EnableFwlogSearch = &enableFwlogSearch
	return &this
}

// NewClusterSearchOptionsWithDefaults instantiates a new ClusterSearchOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterSearchOptionsWithDefaults() *ClusterSearchOptions {
	this := ClusterSearchOptions{}
	var enableFwlogSearch bool = true
	this.EnableFwlogSearch = &enableFwlogSearch
	return &this
}

// GetEnableFwlogSearch returns the EnableFwlogSearch field value if set, zero value otherwise.
func (o *ClusterSearchOptions) GetEnableFwlogSearch() bool {
	if o == nil || o.EnableFwlogSearch == nil {
		var ret bool
		return ret
	}
	return *o.EnableFwlogSearch
}

// GetEnableFwlogSearchOk returns a tuple with the EnableFwlogSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSearchOptions) GetEnableFwlogSearchOk() (*bool, bool) {
	if o == nil || o.EnableFwlogSearch == nil {
		return nil, false
	}
	return o.EnableFwlogSearch, true
}

// HasEnableFwlogSearch returns a boolean if a field has been set.
func (o *ClusterSearchOptions) HasEnableFwlogSearch() bool {
	if o != nil && o.EnableFwlogSearch != nil {
		return true
	}

	return false
}

// SetEnableFwlogSearch gets a reference to the given bool and assigns it to the EnableFwlogSearch field.
func (o *ClusterSearchOptions) SetEnableFwlogSearch(v bool) {
	o.EnableFwlogSearch = &v
}

func (o ClusterSearchOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableFwlogSearch != nil {
		toSerialize["enable-fwlog-search"] = o.EnableFwlogSearch
	}
	return json.Marshal(toSerialize)
}

type NullableClusterSearchOptions struct {
	value *ClusterSearchOptions
	isSet bool
}

func (v NullableClusterSearchOptions) Get() *ClusterSearchOptions {
	return v.value
}

func (v *NullableClusterSearchOptions) Set(val *ClusterSearchOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSearchOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSearchOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSearchOptions(val *ClusterSearchOptions) *NullableClusterSearchOptions {
	return &NullableClusterSearchOptions{value: val, isSet: true}
}

func (v NullableClusterSearchOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSearchOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


