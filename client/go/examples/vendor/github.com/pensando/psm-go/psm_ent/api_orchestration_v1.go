/*
 * Orchestration API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// OrchestrationV1ApiService OrchestrationV1Api service
type OrchestrationV1ApiService service

type ApiOrchestrationAddOrchestratorRequest struct {
	ctx _context.Context
	ApiService *OrchestrationV1ApiService
	body *OrchestrationOrchestrator
}

func (r ApiOrchestrationAddOrchestratorRequest) Body(body OrchestrationOrchestrator) ApiOrchestrationAddOrchestratorRequest {
	r.body = &body
	return r
}

func (r ApiOrchestrationAddOrchestratorRequest) Execute() (OrchestrationOrchestrator, *_nethttp.Response, error) {
	return r.ApiService.AddOrchestratorExecute(r)
}

/*
 * AddOrchestrator Create Orchestrator object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiOrchestrationAddOrchestratorRequest
 */
func (a *OrchestrationV1ApiService) AddOrchestrator(ctx _context.Context) ApiOrchestrationAddOrchestratorRequest {
	return ApiOrchestrationAddOrchestratorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return OrchestrationOrchestrator
 */
func (a *OrchestrationV1ApiService) AddOrchestratorExecute(r ApiOrchestrationAddOrchestratorRequest) (OrchestrationOrchestrator, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrchestrationOrchestrator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrchestrationV1ApiService.AddOrchestrator")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/orchestration/v1/orchestrator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddOrchestratorExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrchestrationDeleteOrchestratorRequest struct {
	ctx _context.Context
	ApiService *OrchestrationV1ApiService
	oName string
}


func (r ApiOrchestrationDeleteOrchestratorRequest) Execute() (OrchestrationOrchestrator, *_nethttp.Response, error) {
	return r.ApiService.DeleteOrchestratorExecute(r)
}

/*
 * DeleteOrchestrator Delete Orchestrator object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiOrchestrationDeleteOrchestratorRequest
 */
func (a *OrchestrationV1ApiService) DeleteOrchestrator(ctx _context.Context, oName string) ApiOrchestrationDeleteOrchestratorRequest {
	return ApiOrchestrationDeleteOrchestratorRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return OrchestrationOrchestrator
 */
func (a *OrchestrationV1ApiService) DeleteOrchestratorExecute(r ApiOrchestrationDeleteOrchestratorRequest) (OrchestrationOrchestrator, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrchestrationOrchestrator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrchestrationV1ApiService.DeleteOrchestrator")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/orchestration/v1/orchestrator/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteOrchestratorExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrchestrationGetOrchestratorRequest struct {
	ctx _context.Context
	ApiService *OrchestrationV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	specUri *string
	credentialsAuthType *string
	credentialsUsername *string
	credentialsPassword *string
	credentialsBearerToken *string
	credentialsCertData *string
	credentialsKeyData *string
	credentialsCaData *string
	credentialsDisableServerAuthentication *bool
	statusConnectionStatus *string
	statusLastTransitionTime *time.Time
	statusMessage *string
	statusOrchId *int32
	statusDiscoveredNamespaces *[]string
	statusIncompatibleDscs *[]string
}

func (r ApiOrchestrationGetOrchestratorRequest) TKind(tKind string) ApiOrchestrationGetOrchestratorRequest {
	r.tKind = &tKind
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) TApiVersion(tApiVersion string) ApiOrchestrationGetOrchestratorRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) MetaTenant(metaTenant string) ApiOrchestrationGetOrchestratorRequest {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) MetaNamespace(metaNamespace string) ApiOrchestrationGetOrchestratorRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) MetaGenerationId(metaGenerationId string) ApiOrchestrationGetOrchestratorRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) MetaResourceVersion(metaResourceVersion string) ApiOrchestrationGetOrchestratorRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) MetaUuid(metaUuid string) ApiOrchestrationGetOrchestratorRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) MetaCreationTime(metaCreationTime time.Time) ApiOrchestrationGetOrchestratorRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) MetaModTime(metaModTime time.Time) ApiOrchestrationGetOrchestratorRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) MetaSelfLink(metaSelfLink string) ApiOrchestrationGetOrchestratorRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) SpecType(specType string) ApiOrchestrationGetOrchestratorRequest {
	r.specType = &specType
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) SpecUri(specUri string) ApiOrchestrationGetOrchestratorRequest {
	r.specUri = &specUri
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) CredentialsAuthType(credentialsAuthType string) ApiOrchestrationGetOrchestratorRequest {
	r.credentialsAuthType = &credentialsAuthType
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) CredentialsUsername(credentialsUsername string) ApiOrchestrationGetOrchestratorRequest {
	r.credentialsUsername = &credentialsUsername
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) CredentialsPassword(credentialsPassword string) ApiOrchestrationGetOrchestratorRequest {
	r.credentialsPassword = &credentialsPassword
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) CredentialsBearerToken(credentialsBearerToken string) ApiOrchestrationGetOrchestratorRequest {
	r.credentialsBearerToken = &credentialsBearerToken
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) CredentialsCertData(credentialsCertData string) ApiOrchestrationGetOrchestratorRequest {
	r.credentialsCertData = &credentialsCertData
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) CredentialsKeyData(credentialsKeyData string) ApiOrchestrationGetOrchestratorRequest {
	r.credentialsKeyData = &credentialsKeyData
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) CredentialsCaData(credentialsCaData string) ApiOrchestrationGetOrchestratorRequest {
	r.credentialsCaData = &credentialsCaData
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) CredentialsDisableServerAuthentication(credentialsDisableServerAuthentication bool) ApiOrchestrationGetOrchestratorRequest {
	r.credentialsDisableServerAuthentication = &credentialsDisableServerAuthentication
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) StatusConnectionStatus(statusConnectionStatus string) ApiOrchestrationGetOrchestratorRequest {
	r.statusConnectionStatus = &statusConnectionStatus
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) StatusLastTransitionTime(statusLastTransitionTime time.Time) ApiOrchestrationGetOrchestratorRequest {
	r.statusLastTransitionTime = &statusLastTransitionTime
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) StatusMessage(statusMessage string) ApiOrchestrationGetOrchestratorRequest {
	r.statusMessage = &statusMessage
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) StatusOrchId(statusOrchId int32) ApiOrchestrationGetOrchestratorRequest {
	r.statusOrchId = &statusOrchId
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) StatusDiscoveredNamespaces(statusDiscoveredNamespaces []string) ApiOrchestrationGetOrchestratorRequest {
	r.statusDiscoveredNamespaces = &statusDiscoveredNamespaces
	return r
}
func (r ApiOrchestrationGetOrchestratorRequest) StatusIncompatibleDscs(statusIncompatibleDscs []string) ApiOrchestrationGetOrchestratorRequest {
	r.statusIncompatibleDscs = &statusIncompatibleDscs
	return r
}

func (r ApiOrchestrationGetOrchestratorRequest) Execute() (OrchestrationOrchestrator, *_nethttp.Response, error) {
	return r.ApiService.GetOrchestratorExecute(r)
}

/*
 * GetOrchestrator Get Orchestrator object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiOrchestrationGetOrchestratorRequest
 */
func (a *OrchestrationV1ApiService) GetOrchestrator(ctx _context.Context, oName string) ApiOrchestrationGetOrchestratorRequest {
	return ApiOrchestrationGetOrchestratorRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return OrchestrationOrchestrator
 */
func (a *OrchestrationV1ApiService) GetOrchestratorExecute(r ApiOrchestrationGetOrchestratorRequest) (OrchestrationOrchestrator, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrchestrationOrchestrator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrchestrationV1ApiService.GetOrchestrator")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/orchestration/v1/orchestrator/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.specUri != nil {
		localVarQueryParams.Add("spec.uri", parameterToString(*r.specUri, ""))
	}
	if r.credentialsAuthType != nil {
		localVarQueryParams.Add("credentials.auth-type", parameterToString(*r.credentialsAuthType, ""))
	}
	if r.credentialsUsername != nil {
		localVarQueryParams.Add("credentials.username", parameterToString(*r.credentialsUsername, ""))
	}
	if r.credentialsPassword != nil {
		localVarQueryParams.Add("credentials.password", parameterToString(*r.credentialsPassword, ""))
	}
	if r.credentialsBearerToken != nil {
		localVarQueryParams.Add("credentials.bearer-token", parameterToString(*r.credentialsBearerToken, ""))
	}
	if r.credentialsCertData != nil {
		localVarQueryParams.Add("credentials.cert-data", parameterToString(*r.credentialsCertData, ""))
	}
	if r.credentialsKeyData != nil {
		localVarQueryParams.Add("credentials.key-data", parameterToString(*r.credentialsKeyData, ""))
	}
	if r.credentialsCaData != nil {
		localVarQueryParams.Add("credentials.ca-data", parameterToString(*r.credentialsCaData, ""))
	}
	if r.credentialsDisableServerAuthentication != nil {
		localVarQueryParams.Add("credentials.disable-server-authentication", parameterToString(*r.credentialsDisableServerAuthentication, ""))
	}
	if r.statusConnectionStatus != nil {
		localVarQueryParams.Add("status.connection-status", parameterToString(*r.statusConnectionStatus, ""))
	}
	if r.statusLastTransitionTime != nil {
		localVarQueryParams.Add("status.last-transition-time", parameterToString(*r.statusLastTransitionTime, ""))
	}
	if r.statusMessage != nil {
		localVarQueryParams.Add("status.message", parameterToString(*r.statusMessage, ""))
	}
	if r.statusOrchId != nil {
		localVarQueryParams.Add("status.orch-id", parameterToString(*r.statusOrchId, ""))
	}
	if r.statusDiscoveredNamespaces != nil {
		localVarQueryParams.Add("status.discovered-namespaces", parameterToString(*r.statusDiscoveredNamespaces, "csv"))
	}
	if r.statusIncompatibleDscs != nil {
		localVarQueryParams.Add("status.incompatible-dscs", parameterToString(*r.statusIncompatibleDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetOrchestratorExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrchestrationLabelOrchestratorRequest struct {
	ctx _context.Context
	ApiService *OrchestrationV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiOrchestrationLabelOrchestratorRequest) Body(body ApiLabel) ApiOrchestrationLabelOrchestratorRequest {
	r.body = &body
	return r
}

func (r ApiOrchestrationLabelOrchestratorRequest) Execute() (OrchestrationOrchestrator, *_nethttp.Response, error) {
	return r.ApiService.LabelOrchestratorExecute(r)
}

/*
 * LabelOrchestrator Label Orchestrator object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiOrchestrationLabelOrchestratorRequest
 */
func (a *OrchestrationV1ApiService) LabelOrchestrator(ctx _context.Context, oName string) ApiOrchestrationLabelOrchestratorRequest {
	return ApiOrchestrationLabelOrchestratorRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return OrchestrationOrchestrator
 */
func (a *OrchestrationV1ApiService) LabelOrchestratorExecute(r ApiOrchestrationLabelOrchestratorRequest) (OrchestrationOrchestrator, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrchestrationOrchestrator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrchestrationV1ApiService.LabelOrchestrator")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/orchestration/v1/orchestrator/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelOrchestratorExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrchestrationListOrchestratorRequest struct {
	ctx _context.Context
	ApiService *OrchestrationV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiOrchestrationListOrchestratorRequest) OName(oName string) ApiOrchestrationListOrchestratorRequest {
	r.oName = &oName
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) OTenant(oTenant string) ApiOrchestrationListOrchestratorRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) ONamespace(oNamespace string) ApiOrchestrationListOrchestratorRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) OGenerationId(oGenerationId string) ApiOrchestrationListOrchestratorRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) OResourceVersion(oResourceVersion string) ApiOrchestrationListOrchestratorRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) OUuid(oUuid string) ApiOrchestrationListOrchestratorRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) OCreationTime(oCreationTime time.Time) ApiOrchestrationListOrchestratorRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) OModTime(oModTime time.Time) ApiOrchestrationListOrchestratorRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) OSelfLink(oSelfLink string) ApiOrchestrationListOrchestratorRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) LabelSelector(labelSelector string) ApiOrchestrationListOrchestratorRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) FieldSelector(fieldSelector string) ApiOrchestrationListOrchestratorRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) FieldChangeSelector(fieldChangeSelector []string) ApiOrchestrationListOrchestratorRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) From(from int32) ApiOrchestrationListOrchestratorRequest {
	r.from = &from
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) MaxResults(maxResults int32) ApiOrchestrationListOrchestratorRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) SortOrder(sortOrder string) ApiOrchestrationListOrchestratorRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiOrchestrationListOrchestratorRequest) MetaOnly(metaOnly bool) ApiOrchestrationListOrchestratorRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiOrchestrationListOrchestratorRequest) Execute() (OrchestrationOrchestratorList, *_nethttp.Response, error) {
	return r.ApiService.ListOrchestratorExecute(r)
}

/*
 * ListOrchestrator List Orchestrator objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiOrchestrationListOrchestratorRequest
 */
func (a *OrchestrationV1ApiService) ListOrchestrator(ctx _context.Context) ApiOrchestrationListOrchestratorRequest {
	return ApiOrchestrationListOrchestratorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return OrchestrationOrchestratorList
 */
func (a *OrchestrationV1ApiService) ListOrchestratorExecute(r ApiOrchestrationListOrchestratorRequest) (OrchestrationOrchestratorList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrchestrationOrchestratorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrchestrationV1ApiService.ListOrchestrator")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/orchestration/v1/orchestrator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListOrchestratorExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrchestrationUpdateOrchestratorRequest struct {
	ctx _context.Context
	ApiService *OrchestrationV1ApiService
	oName string
	body *OrchestrationOrchestrator
}

func (r ApiOrchestrationUpdateOrchestratorRequest) Body(body OrchestrationOrchestrator) ApiOrchestrationUpdateOrchestratorRequest {
	r.body = &body
	return r
}

func (r ApiOrchestrationUpdateOrchestratorRequest) Execute() (OrchestrationOrchestrator, *_nethttp.Response, error) {
	return r.ApiService.UpdateOrchestratorExecute(r)
}

/*
 * UpdateOrchestrator Update Orchestrator object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiOrchestrationUpdateOrchestratorRequest
 */
func (a *OrchestrationV1ApiService) UpdateOrchestrator(ctx _context.Context, oName string) ApiOrchestrationUpdateOrchestratorRequest {
	return ApiOrchestrationUpdateOrchestratorRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return OrchestrationOrchestrator
 */
func (a *OrchestrationV1ApiService) UpdateOrchestratorExecute(r ApiOrchestrationUpdateOrchestratorRequest) (OrchestrationOrchestrator, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrchestrationOrchestrator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrchestrationV1ApiService.UpdateOrchestrator")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/orchestration/v1/orchestrator/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateOrchestratorExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrchestrationWatchOrchestratorRequest struct {
	ctx _context.Context
	ApiService *OrchestrationV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiOrchestrationWatchOrchestratorRequest) OName(oName string) ApiOrchestrationWatchOrchestratorRequest {
	r.oName = &oName
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) OTenant(oTenant string) ApiOrchestrationWatchOrchestratorRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) ONamespace(oNamespace string) ApiOrchestrationWatchOrchestratorRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) OGenerationId(oGenerationId string) ApiOrchestrationWatchOrchestratorRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) OResourceVersion(oResourceVersion string) ApiOrchestrationWatchOrchestratorRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) OUuid(oUuid string) ApiOrchestrationWatchOrchestratorRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) OCreationTime(oCreationTime time.Time) ApiOrchestrationWatchOrchestratorRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) OModTime(oModTime time.Time) ApiOrchestrationWatchOrchestratorRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) OSelfLink(oSelfLink string) ApiOrchestrationWatchOrchestratorRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) LabelSelector(labelSelector string) ApiOrchestrationWatchOrchestratorRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) FieldSelector(fieldSelector string) ApiOrchestrationWatchOrchestratorRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) FieldChangeSelector(fieldChangeSelector []string) ApiOrchestrationWatchOrchestratorRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) From(from int32) ApiOrchestrationWatchOrchestratorRequest {
	r.from = &from
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) MaxResults(maxResults int32) ApiOrchestrationWatchOrchestratorRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) SortOrder(sortOrder string) ApiOrchestrationWatchOrchestratorRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiOrchestrationWatchOrchestratorRequest) MetaOnly(metaOnly bool) ApiOrchestrationWatchOrchestratorRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiOrchestrationWatchOrchestratorRequest) Execute() (OrchestrationAutoMsgOrchestratorWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchOrchestratorExecute(r)
}

/*
 * WatchOrchestrator Watch Orchestrator objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiOrchestrationWatchOrchestratorRequest
 */
func (a *OrchestrationV1ApiService) WatchOrchestrator(ctx _context.Context) ApiOrchestrationWatchOrchestratorRequest {
	return ApiOrchestrationWatchOrchestratorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return OrchestrationAutoMsgOrchestratorWatchHelper
 */
func (a *OrchestrationV1ApiService) WatchOrchestratorExecute(r ApiOrchestrationWatchOrchestratorRequest) (OrchestrationAutoMsgOrchestratorWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrchestrationAutoMsgOrchestratorWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrchestrationV1ApiService.WatchOrchestrator")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/orchestration/v1/watch/orchestrator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchOrchestratorExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
