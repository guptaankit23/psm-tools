/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkIPAMPolicySpec struct for NetworkIPAMPolicySpec
type NetworkIPAMPolicySpec struct {
	DhcpRelay *NetworkDHCPRelayPolicy `json:"dhcp-relay,omitempty"`
	PsmIpamConfig *NetworkIPAMConfig `json:"psm-ipam-config,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewNetworkIPAMPolicySpec instantiates a new NetworkIPAMPolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkIPAMPolicySpec() *NetworkIPAMPolicySpec {
	this := NetworkIPAMPolicySpec{}
	var type_ string = "dhcp-relay"
	this.Type = &type_
	return &this
}

// NewNetworkIPAMPolicySpecWithDefaults instantiates a new NetworkIPAMPolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkIPAMPolicySpecWithDefaults() *NetworkIPAMPolicySpec {
	this := NetworkIPAMPolicySpec{}
	var type_ string = "dhcp-relay"
	this.Type = &type_
	return &this
}

// GetDhcpRelay returns the DhcpRelay field value if set, zero value otherwise.
func (o *NetworkIPAMPolicySpec) GetDhcpRelay() NetworkDHCPRelayPolicy {
	if o == nil || o.DhcpRelay == nil {
		var ret NetworkDHCPRelayPolicy
		return ret
	}
	return *o.DhcpRelay
}

// GetDhcpRelayOk returns a tuple with the DhcpRelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkIPAMPolicySpec) GetDhcpRelayOk() (*NetworkDHCPRelayPolicy, bool) {
	if o == nil || o.DhcpRelay == nil {
		return nil, false
	}
	return o.DhcpRelay, true
}

// HasDhcpRelay returns a boolean if a field has been set.
func (o *NetworkIPAMPolicySpec) HasDhcpRelay() bool {
	if o != nil && o.DhcpRelay != nil {
		return true
	}

	return false
}

// SetDhcpRelay gets a reference to the given NetworkDHCPRelayPolicy and assigns it to the DhcpRelay field.
func (o *NetworkIPAMPolicySpec) SetDhcpRelay(v NetworkDHCPRelayPolicy) {
	o.DhcpRelay = &v
}

// GetPsmIpamConfig returns the PsmIpamConfig field value if set, zero value otherwise.
func (o *NetworkIPAMPolicySpec) GetPsmIpamConfig() NetworkIPAMConfig {
	if o == nil || o.PsmIpamConfig == nil {
		var ret NetworkIPAMConfig
		return ret
	}
	return *o.PsmIpamConfig
}

// GetPsmIpamConfigOk returns a tuple with the PsmIpamConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkIPAMPolicySpec) GetPsmIpamConfigOk() (*NetworkIPAMConfig, bool) {
	if o == nil || o.PsmIpamConfig == nil {
		return nil, false
	}
	return o.PsmIpamConfig, true
}

// HasPsmIpamConfig returns a boolean if a field has been set.
func (o *NetworkIPAMPolicySpec) HasPsmIpamConfig() bool {
	if o != nil && o.PsmIpamConfig != nil {
		return true
	}

	return false
}

// SetPsmIpamConfig gets a reference to the given NetworkIPAMConfig and assigns it to the PsmIpamConfig field.
func (o *NetworkIPAMPolicySpec) SetPsmIpamConfig(v NetworkIPAMConfig) {
	o.PsmIpamConfig = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkIPAMPolicySpec) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkIPAMPolicySpec) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkIPAMPolicySpec) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkIPAMPolicySpec) SetType(v string) {
	o.Type = &v
}

func (o NetworkIPAMPolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DhcpRelay != nil {
		toSerialize["dhcp-relay"] = o.DhcpRelay
	}
	if o.PsmIpamConfig != nil {
		toSerialize["psm-ipam-config"] = o.PsmIpamConfig
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkIPAMPolicySpec struct {
	value *NetworkIPAMPolicySpec
	isSet bool
}

func (v NullableNetworkIPAMPolicySpec) Get() *NetworkIPAMPolicySpec {
	return v.value
}

func (v *NullableNetworkIPAMPolicySpec) Set(val *NetworkIPAMPolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkIPAMPolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkIPAMPolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkIPAMPolicySpec(val *NetworkIPAMPolicySpec) *NullableNetworkIPAMPolicySpec {
	return &NullableNetworkIPAMPolicySpec{value: val, isSet: true}
}

func (v NullableNetworkIPAMPolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkIPAMPolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


