/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringFlowExportPolicySpec struct for MonitoringFlowExportPolicySpec
type MonitoringFlowExportPolicySpec struct {
	// Enable/disable flow export.
	Disabled *bool `json:"disabled,omitempty"`
	// Export contains export parameters.
	Exports *[]MonitoringExportConfig `json:"exports,omitempty"`
	Format *string `json:"format,omitempty"`
	// Interval defines how often to push the records to an external collector The value is specified as a string format, '10s', '20m'. Should be a valid time duration between 1s and 24h0m0s.
	Interval *string `json:"interval,omitempty"`
	MatchRules *[]MonitoringMatchRule `json:"match-rules,omitempty"`
	// TemplateInterval defines how often to send ipfix templates to an external collector The value is specified as a string format, '1m', '10m'. Should be a valid time duration between 1m0s and 30m0s.
	TemplateInterval *string `json:"template-interval,omitempty"`
}

// NewMonitoringFlowExportPolicySpec instantiates a new MonitoringFlowExportPolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringFlowExportPolicySpec() *MonitoringFlowExportPolicySpec {
	this := MonitoringFlowExportPolicySpec{}
	var format string = "ipfix"
	this.Format = &format
	var interval string = "10s"
	this.Interval = &interval
	var templateInterval string = "5m"
	this.TemplateInterval = &templateInterval
	return &this
}

// NewMonitoringFlowExportPolicySpecWithDefaults instantiates a new MonitoringFlowExportPolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringFlowExportPolicySpecWithDefaults() *MonitoringFlowExportPolicySpec {
	this := MonitoringFlowExportPolicySpec{}
	var format string = "ipfix"
	this.Format = &format
	var interval string = "10s"
	this.Interval = &interval
	var templateInterval string = "5m"
	this.TemplateInterval = &templateInterval
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *MonitoringFlowExportPolicySpec) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringFlowExportPolicySpec) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *MonitoringFlowExportPolicySpec) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *MonitoringFlowExportPolicySpec) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetExports returns the Exports field value if set, zero value otherwise.
func (o *MonitoringFlowExportPolicySpec) GetExports() []MonitoringExportConfig {
	if o == nil || o.Exports == nil {
		var ret []MonitoringExportConfig
		return ret
	}
	return *o.Exports
}

// GetExportsOk returns a tuple with the Exports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringFlowExportPolicySpec) GetExportsOk() (*[]MonitoringExportConfig, bool) {
	if o == nil || o.Exports == nil {
		return nil, false
	}
	return o.Exports, true
}

// HasExports returns a boolean if a field has been set.
func (o *MonitoringFlowExportPolicySpec) HasExports() bool {
	if o != nil && o.Exports != nil {
		return true
	}

	return false
}

// SetExports gets a reference to the given []MonitoringExportConfig and assigns it to the Exports field.
func (o *MonitoringFlowExportPolicySpec) SetExports(v []MonitoringExportConfig) {
	o.Exports = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *MonitoringFlowExportPolicySpec) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringFlowExportPolicySpec) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *MonitoringFlowExportPolicySpec) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *MonitoringFlowExportPolicySpec) SetFormat(v string) {
	o.Format = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *MonitoringFlowExportPolicySpec) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringFlowExportPolicySpec) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *MonitoringFlowExportPolicySpec) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *MonitoringFlowExportPolicySpec) SetInterval(v string) {
	o.Interval = &v
}

// GetMatchRules returns the MatchRules field value if set, zero value otherwise.
func (o *MonitoringFlowExportPolicySpec) GetMatchRules() []MonitoringMatchRule {
	if o == nil || o.MatchRules == nil {
		var ret []MonitoringMatchRule
		return ret
	}
	return *o.MatchRules
}

// GetMatchRulesOk returns a tuple with the MatchRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringFlowExportPolicySpec) GetMatchRulesOk() (*[]MonitoringMatchRule, bool) {
	if o == nil || o.MatchRules == nil {
		return nil, false
	}
	return o.MatchRules, true
}

// HasMatchRules returns a boolean if a field has been set.
func (o *MonitoringFlowExportPolicySpec) HasMatchRules() bool {
	if o != nil && o.MatchRules != nil {
		return true
	}

	return false
}

// SetMatchRules gets a reference to the given []MonitoringMatchRule and assigns it to the MatchRules field.
func (o *MonitoringFlowExportPolicySpec) SetMatchRules(v []MonitoringMatchRule) {
	o.MatchRules = &v
}

// GetTemplateInterval returns the TemplateInterval field value if set, zero value otherwise.
func (o *MonitoringFlowExportPolicySpec) GetTemplateInterval() string {
	if o == nil || o.TemplateInterval == nil {
		var ret string
		return ret
	}
	return *o.TemplateInterval
}

// GetTemplateIntervalOk returns a tuple with the TemplateInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringFlowExportPolicySpec) GetTemplateIntervalOk() (*string, bool) {
	if o == nil || o.TemplateInterval == nil {
		return nil, false
	}
	return o.TemplateInterval, true
}

// HasTemplateInterval returns a boolean if a field has been set.
func (o *MonitoringFlowExportPolicySpec) HasTemplateInterval() bool {
	if o != nil && o.TemplateInterval != nil {
		return true
	}

	return false
}

// SetTemplateInterval gets a reference to the given string and assigns it to the TemplateInterval field.
func (o *MonitoringFlowExportPolicySpec) SetTemplateInterval(v string) {
	o.TemplateInterval = &v
}

func (o MonitoringFlowExportPolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Exports != nil {
		toSerialize["exports"] = o.Exports
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.MatchRules != nil {
		toSerialize["match-rules"] = o.MatchRules
	}
	if o.TemplateInterval != nil {
		toSerialize["template-interval"] = o.TemplateInterval
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringFlowExportPolicySpec struct {
	value *MonitoringFlowExportPolicySpec
	isSet bool
}

func (v NullableMonitoringFlowExportPolicySpec) Get() *MonitoringFlowExportPolicySpec {
	return v.value
}

func (v *NullableMonitoringFlowExportPolicySpec) Set(val *MonitoringFlowExportPolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringFlowExportPolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringFlowExportPolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringFlowExportPolicySpec(val *MonitoringFlowExportPolicySpec) *NullableMonitoringFlowExportPolicySpec {
	return &NullableMonitoringFlowExportPolicySpec{value: val, isSet: true}
}

func (v NullableMonitoringFlowExportPolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringFlowExportPolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


