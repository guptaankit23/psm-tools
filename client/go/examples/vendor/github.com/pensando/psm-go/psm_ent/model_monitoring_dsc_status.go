/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringDSCStatus struct for MonitoringDSCStatus
type MonitoringDSCStatus struct {
	// DSC ID for which the agent error or warning is issued.
	DscId *string `json:"dsc-id,omitempty"`
	// InfoStatus contains agent message the operation is failed or warning is issued.
	DscInfoStatus *string `json:"dsc-info-status,omitempty"`
}

// NewMonitoringDSCStatus instantiates a new MonitoringDSCStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringDSCStatus() *MonitoringDSCStatus {
	this := MonitoringDSCStatus{}
	return &this
}

// NewMonitoringDSCStatusWithDefaults instantiates a new MonitoringDSCStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringDSCStatusWithDefaults() *MonitoringDSCStatus {
	this := MonitoringDSCStatus{}
	return &this
}

// GetDscId returns the DscId field value if set, zero value otherwise.
func (o *MonitoringDSCStatus) GetDscId() string {
	if o == nil || o.DscId == nil {
		var ret string
		return ret
	}
	return *o.DscId
}

// GetDscIdOk returns a tuple with the DscId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringDSCStatus) GetDscIdOk() (*string, bool) {
	if o == nil || o.DscId == nil {
		return nil, false
	}
	return o.DscId, true
}

// HasDscId returns a boolean if a field has been set.
func (o *MonitoringDSCStatus) HasDscId() bool {
	if o != nil && o.DscId != nil {
		return true
	}

	return false
}

// SetDscId gets a reference to the given string and assigns it to the DscId field.
func (o *MonitoringDSCStatus) SetDscId(v string) {
	o.DscId = &v
}

// GetDscInfoStatus returns the DscInfoStatus field value if set, zero value otherwise.
func (o *MonitoringDSCStatus) GetDscInfoStatus() string {
	if o == nil || o.DscInfoStatus == nil {
		var ret string
		return ret
	}
	return *o.DscInfoStatus
}

// GetDscInfoStatusOk returns a tuple with the DscInfoStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringDSCStatus) GetDscInfoStatusOk() (*string, bool) {
	if o == nil || o.DscInfoStatus == nil {
		return nil, false
	}
	return o.DscInfoStatus, true
}

// HasDscInfoStatus returns a boolean if a field has been set.
func (o *MonitoringDSCStatus) HasDscInfoStatus() bool {
	if o != nil && o.DscInfoStatus != nil {
		return true
	}

	return false
}

// SetDscInfoStatus gets a reference to the given string and assigns it to the DscInfoStatus field.
func (o *MonitoringDSCStatus) SetDscInfoStatus(v string) {
	o.DscInfoStatus = &v
}

func (o MonitoringDSCStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DscId != nil {
		toSerialize["dsc-id"] = o.DscId
	}
	if o.DscInfoStatus != nil {
		toSerialize["dsc-info-status"] = o.DscInfoStatus
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringDSCStatus struct {
	value *MonitoringDSCStatus
	isSet bool
}

func (v NullableMonitoringDSCStatus) Get() *MonitoringDSCStatus {
	return v.value
}

func (v *NullableMonitoringDSCStatus) Set(val *MonitoringDSCStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringDSCStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringDSCStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringDSCStatus(val *MonitoringDSCStatus) *NullableMonitoringDSCStatus {
	return &NullableMonitoringDSCStatus{value: val, isSet: true}
}

func (v NullableMonitoringDSCStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringDSCStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


