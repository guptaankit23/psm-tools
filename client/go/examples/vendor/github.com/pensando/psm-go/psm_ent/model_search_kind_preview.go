/*
 * Search API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SearchKindPreview KindPreview contains map of search summary (#hits) grouped by Kind.
type SearchKindPreview struct {
	Kinds *map[string]string `json:"kinds,omitempty"`
}

// NewSearchKindPreview instantiates a new SearchKindPreview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchKindPreview() *SearchKindPreview {
	this := SearchKindPreview{}
	return &this
}

// NewSearchKindPreviewWithDefaults instantiates a new SearchKindPreview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchKindPreviewWithDefaults() *SearchKindPreview {
	this := SearchKindPreview{}
	return &this
}

// GetKinds returns the Kinds field value if set, zero value otherwise.
func (o *SearchKindPreview) GetKinds() map[string]string {
	if o == nil || o.Kinds == nil {
		var ret map[string]string
		return ret
	}
	return *o.Kinds
}

// GetKindsOk returns a tuple with the Kinds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchKindPreview) GetKindsOk() (*map[string]string, bool) {
	if o == nil || o.Kinds == nil {
		return nil, false
	}
	return o.Kinds, true
}

// HasKinds returns a boolean if a field has been set.
func (o *SearchKindPreview) HasKinds() bool {
	if o != nil && o.Kinds != nil {
		return true
	}

	return false
}

// SetKinds gets a reference to the given map[string]string and assigns it to the Kinds field.
func (o *SearchKindPreview) SetKinds(v map[string]string) {
	o.Kinds = &v
}

func (o SearchKindPreview) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Kinds != nil {
		toSerialize["kinds"] = o.Kinds
	}
	return json.Marshal(toSerialize)
}

type NullableSearchKindPreview struct {
	value *SearchKindPreview
	isSet bool
}

func (v NullableSearchKindPreview) Get() *SearchKindPreview {
	return v.value
}

func (v *NullableSearchKindPreview) Set(val *SearchKindPreview) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchKindPreview) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchKindPreview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchKindPreview(val *SearchKindPreview) *NullableSearchKindPreview {
	return &NullableSearchKindPreview{value: val, isSet: true}
}

func (v NullableSearchKindPreview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchKindPreview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


