/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringTechSupportRequestSpec struct for MonitoringTechSupportRequestSpec
type MonitoringTechSupportRequestSpec struct {
	CollectionSelector *LabelsSelector `json:"collection-selector,omitempty"`
	NodeSelector *TechSupportRequestSpecNodeSelectorSpec `json:"node-selector,omitempty"`
	// SkipCores if set to true skips the core files when collecting techsupport.
	SkipCores *bool `json:"skip-cores,omitempty"`
	// Verbosity defines the verbosity level.
	Verbosity *int32 `json:"verbosity,omitempty"`
}

// NewMonitoringTechSupportRequestSpec instantiates a new MonitoringTechSupportRequestSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringTechSupportRequestSpec() *MonitoringTechSupportRequestSpec {
	this := MonitoringTechSupportRequestSpec{}
	var skipCores bool = false
	this.SkipCores = &skipCores
	return &this
}

// NewMonitoringTechSupportRequestSpecWithDefaults instantiates a new MonitoringTechSupportRequestSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringTechSupportRequestSpecWithDefaults() *MonitoringTechSupportRequestSpec {
	this := MonitoringTechSupportRequestSpec{}
	var skipCores bool = false
	this.SkipCores = &skipCores
	return &this
}

// GetCollectionSelector returns the CollectionSelector field value if set, zero value otherwise.
func (o *MonitoringTechSupportRequestSpec) GetCollectionSelector() LabelsSelector {
	if o == nil || o.CollectionSelector == nil {
		var ret LabelsSelector
		return ret
	}
	return *o.CollectionSelector
}

// GetCollectionSelectorOk returns a tuple with the CollectionSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTechSupportRequestSpec) GetCollectionSelectorOk() (*LabelsSelector, bool) {
	if o == nil || o.CollectionSelector == nil {
		return nil, false
	}
	return o.CollectionSelector, true
}

// HasCollectionSelector returns a boolean if a field has been set.
func (o *MonitoringTechSupportRequestSpec) HasCollectionSelector() bool {
	if o != nil && o.CollectionSelector != nil {
		return true
	}

	return false
}

// SetCollectionSelector gets a reference to the given LabelsSelector and assigns it to the CollectionSelector field.
func (o *MonitoringTechSupportRequestSpec) SetCollectionSelector(v LabelsSelector) {
	o.CollectionSelector = &v
}

// GetNodeSelector returns the NodeSelector field value if set, zero value otherwise.
func (o *MonitoringTechSupportRequestSpec) GetNodeSelector() TechSupportRequestSpecNodeSelectorSpec {
	if o == nil || o.NodeSelector == nil {
		var ret TechSupportRequestSpecNodeSelectorSpec
		return ret
	}
	return *o.NodeSelector
}

// GetNodeSelectorOk returns a tuple with the NodeSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTechSupportRequestSpec) GetNodeSelectorOk() (*TechSupportRequestSpecNodeSelectorSpec, bool) {
	if o == nil || o.NodeSelector == nil {
		return nil, false
	}
	return o.NodeSelector, true
}

// HasNodeSelector returns a boolean if a field has been set.
func (o *MonitoringTechSupportRequestSpec) HasNodeSelector() bool {
	if o != nil && o.NodeSelector != nil {
		return true
	}

	return false
}

// SetNodeSelector gets a reference to the given TechSupportRequestSpecNodeSelectorSpec and assigns it to the NodeSelector field.
func (o *MonitoringTechSupportRequestSpec) SetNodeSelector(v TechSupportRequestSpecNodeSelectorSpec) {
	o.NodeSelector = &v
}

// GetSkipCores returns the SkipCores field value if set, zero value otherwise.
func (o *MonitoringTechSupportRequestSpec) GetSkipCores() bool {
	if o == nil || o.SkipCores == nil {
		var ret bool
		return ret
	}
	return *o.SkipCores
}

// GetSkipCoresOk returns a tuple with the SkipCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTechSupportRequestSpec) GetSkipCoresOk() (*bool, bool) {
	if o == nil || o.SkipCores == nil {
		return nil, false
	}
	return o.SkipCores, true
}

// HasSkipCores returns a boolean if a field has been set.
func (o *MonitoringTechSupportRequestSpec) HasSkipCores() bool {
	if o != nil && o.SkipCores != nil {
		return true
	}

	return false
}

// SetSkipCores gets a reference to the given bool and assigns it to the SkipCores field.
func (o *MonitoringTechSupportRequestSpec) SetSkipCores(v bool) {
	o.SkipCores = &v
}

// GetVerbosity returns the Verbosity field value if set, zero value otherwise.
func (o *MonitoringTechSupportRequestSpec) GetVerbosity() int32 {
	if o == nil || o.Verbosity == nil {
		var ret int32
		return ret
	}
	return *o.Verbosity
}

// GetVerbosityOk returns a tuple with the Verbosity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTechSupportRequestSpec) GetVerbosityOk() (*int32, bool) {
	if o == nil || o.Verbosity == nil {
		return nil, false
	}
	return o.Verbosity, true
}

// HasVerbosity returns a boolean if a field has been set.
func (o *MonitoringTechSupportRequestSpec) HasVerbosity() bool {
	if o != nil && o.Verbosity != nil {
		return true
	}

	return false
}

// SetVerbosity gets a reference to the given int32 and assigns it to the Verbosity field.
func (o *MonitoringTechSupportRequestSpec) SetVerbosity(v int32) {
	o.Verbosity = &v
}

func (o MonitoringTechSupportRequestSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CollectionSelector != nil {
		toSerialize["collection-selector"] = o.CollectionSelector
	}
	if o.NodeSelector != nil {
		toSerialize["node-selector"] = o.NodeSelector
	}
	if o.SkipCores != nil {
		toSerialize["skip-cores"] = o.SkipCores
	}
	if o.Verbosity != nil {
		toSerialize["verbosity"] = o.Verbosity
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringTechSupportRequestSpec struct {
	value *MonitoringTechSupportRequestSpec
	isSet bool
}

func (v NullableMonitoringTechSupportRequestSpec) Get() *MonitoringTechSupportRequestSpec {
	return v.value
}

func (v *NullableMonitoringTechSupportRequestSpec) Set(val *MonitoringTechSupportRequestSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringTechSupportRequestSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringTechSupportRequestSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringTechSupportRequestSpec(val *MonitoringTechSupportRequestSpec) *NullableMonitoringTechSupportRequestSpec {
	return &NullableMonitoringTechSupportRequestSpec{value: val, isSet: true}
}

func (v NullableMonitoringTechSupportRequestSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringTechSupportRequestSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


