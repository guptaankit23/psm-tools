/*
 * Events API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// EventsEvent Event is a system notification of a fault, condition or configuration that should be user visible. These objects are created internally by Event client and persisted in EventDB.
type EventsEvent struct {
	ApiVersion *string `json:"api-version,omitempty"`
	Category *string `json:"category,omitempty"`
	Count *int64 `json:"count,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Message *string `json:"message,omitempty"`
	Meta *ApiObjectMeta `json:"meta,omitempty"`
	ObjectRef *ApiObjectRef `json:"object-ref,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Source *EventsEventSource `json:"source,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewEventsEvent instantiates a new EventsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsEvent() *EventsEvent {
	this := EventsEvent{}
	var category string = "cluster"
	this.Category = &category
	var severity string = "info"
	this.Severity = &severity
	return &this
}

// NewEventsEventWithDefaults instantiates a new EventsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsEventWithDefaults() *EventsEvent {
	this := EventsEvent{}
	var category string = "cluster"
	this.Category = &category
	var severity string = "info"
	this.Severity = &severity
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *EventsEvent) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *EventsEvent) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *EventsEvent) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *EventsEvent) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *EventsEvent) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *EventsEvent) SetCategory(v string) {
	o.Category = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EventsEvent) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EventsEvent) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *EventsEvent) SetCount(v int64) {
	o.Count = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *EventsEvent) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *EventsEvent) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *EventsEvent) SetKind(v string) {
	o.Kind = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *EventsEvent) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *EventsEvent) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *EventsEvent) SetMessage(v string) {
	o.Message = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *EventsEvent) GetMeta() ApiObjectMeta {
	if o == nil || o.Meta == nil {
		var ret ApiObjectMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetMetaOk() (*ApiObjectMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *EventsEvent) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ApiObjectMeta and assigns it to the Meta field.
func (o *EventsEvent) SetMeta(v ApiObjectMeta) {
	o.Meta = &v
}

// GetObjectRef returns the ObjectRef field value if set, zero value otherwise.
func (o *EventsEvent) GetObjectRef() ApiObjectRef {
	if o == nil || o.ObjectRef == nil {
		var ret ApiObjectRef
		return ret
	}
	return *o.ObjectRef
}

// GetObjectRefOk returns a tuple with the ObjectRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetObjectRefOk() (*ApiObjectRef, bool) {
	if o == nil || o.ObjectRef == nil {
		return nil, false
	}
	return o.ObjectRef, true
}

// HasObjectRef returns a boolean if a field has been set.
func (o *EventsEvent) HasObjectRef() bool {
	if o != nil && o.ObjectRef != nil {
		return true
	}

	return false
}

// SetObjectRef gets a reference to the given ApiObjectRef and assigns it to the ObjectRef field.
func (o *EventsEvent) SetObjectRef(v ApiObjectRef) {
	o.ObjectRef = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *EventsEvent) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *EventsEvent) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *EventsEvent) SetSeverity(v string) {
	o.Severity = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *EventsEvent) GetSource() EventsEventSource {
	if o == nil || o.Source == nil {
		var ret EventsEventSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetSourceOk() (*EventsEventSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *EventsEvent) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given EventsEventSource and assigns it to the Source field.
func (o *EventsEvent) SetSource(v EventsEventSource) {
	o.Source = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventsEvent) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEvent) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventsEvent) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventsEvent) SetType(v string) {
	o.Type = &v
}

func (o EventsEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api-version"] = o.ApiVersion
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.ObjectRef != nil {
		toSerialize["object-ref"] = o.ObjectRef
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEventsEvent struct {
	value *EventsEvent
	isSet bool
}

func (v NullableEventsEvent) Get() *EventsEvent {
	return v.value
}

func (v *NullableEventsEvent) Set(val *EventsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsEvent(val *EventsEvent) *NullableEventsEvent {
	return &NullableEventsEvent{value: val, isSet: true}
}

func (v NullableEventsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


