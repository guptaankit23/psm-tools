/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkVirtualRouterSpec struct for NetworkVirtualRouterSpec
type NetworkVirtualRouterSpec struct {
	// Default IPAM policy for networks belonging to this Virtual Router. Any IPAM Policy specified in the Network overrides this.
	DefaultIpamPolicy *string `json:"default-ipam-policy,omitempty"`
	// Security Policy to apply in the egress direction.
	EgressSecurityPolicy *[]string `json:"egress-security-policy,omitempty"`
	// FlowExportPolicy is the flow export policy associated to this virtual router.
	FlowExportPolicy *[]string `json:"flow-export-policy,omitempty"`
	// Security Policy to apply in the ingress direction.
	IngressSecurityPolicy *[]string `json:"ingress-security-policy,omitempty"`
	// Maximum Connections Per Second supported for any Network belonging to the Virtual Router within a Distributed Services Entity. The value configured here is the CPS limit enforced per Network within a Distributed Services Entity and is the same for all Networks within the Virtual Router. Value 0 means the CPS limit is not enforced and the CPS is limited only by the system capacity. Connections exceeding the CPS limit are dropped. Value should be between 0 and 409599.
	MaximumCpsPerNetworkPerDistributedServicesEntity *int32 `json:"maximum-cps-per-network-per-distributed-services-entity,omitempty"`
	// Maximum sessions supported in any Network belonging to the Virtual Router within a Distributed Services Entity. The value configured here is the sessions limit enforced per Network within a Distributed Services Entity and is the same for all Networks within the Virtual Router. Value 0 means the sessions limit is not enforced and the number of sessions is limited only by the system capacity. Sessions exceeding the sessions limit are dropped. Value should be between 0 and 16777215.
	MaximumSessionsPerNetworkPerDistributedServicesEntity *int32 `json:"maximum-sessions-per-network-per-distributed-services-entity,omitempty"`
	RouteImportExport *NetworkRDSpec `json:"route-import-export,omitempty"`
	// Default Router MAC Address to use for this Virtual Router. Should be a valid MAC address.
	RouterMacAddress *string `json:"router-mac-address,omitempty"`
	Type *string `json:"type,omitempty"`
	// VxlAN VNI for the Virtual Router. Value should be between 0 and 16777215.
	VxlanVni *int64 `json:"vxlan-vni,omitempty"`
}

// NewNetworkVirtualRouterSpec instantiates a new NetworkVirtualRouterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkVirtualRouterSpec() *NetworkVirtualRouterSpec {
	this := NetworkVirtualRouterSpec{}
	var type_ string = "unknown"
	this.Type = &type_
	return &this
}

// NewNetworkVirtualRouterSpecWithDefaults instantiates a new NetworkVirtualRouterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkVirtualRouterSpecWithDefaults() *NetworkVirtualRouterSpec {
	this := NetworkVirtualRouterSpec{}
	var type_ string = "unknown"
	this.Type = &type_
	return &this
}

// GetDefaultIpamPolicy returns the DefaultIpamPolicy field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetDefaultIpamPolicy() string {
	if o == nil || o.DefaultIpamPolicy == nil {
		var ret string
		return ret
	}
	return *o.DefaultIpamPolicy
}

// GetDefaultIpamPolicyOk returns a tuple with the DefaultIpamPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetDefaultIpamPolicyOk() (*string, bool) {
	if o == nil || o.DefaultIpamPolicy == nil {
		return nil, false
	}
	return o.DefaultIpamPolicy, true
}

// HasDefaultIpamPolicy returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasDefaultIpamPolicy() bool {
	if o != nil && o.DefaultIpamPolicy != nil {
		return true
	}

	return false
}

// SetDefaultIpamPolicy gets a reference to the given string and assigns it to the DefaultIpamPolicy field.
func (o *NetworkVirtualRouterSpec) SetDefaultIpamPolicy(v string) {
	o.DefaultIpamPolicy = &v
}

// GetEgressSecurityPolicy returns the EgressSecurityPolicy field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetEgressSecurityPolicy() []string {
	if o == nil || o.EgressSecurityPolicy == nil {
		var ret []string
		return ret
	}
	return *o.EgressSecurityPolicy
}

// GetEgressSecurityPolicyOk returns a tuple with the EgressSecurityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetEgressSecurityPolicyOk() (*[]string, bool) {
	if o == nil || o.EgressSecurityPolicy == nil {
		return nil, false
	}
	return o.EgressSecurityPolicy, true
}

// HasEgressSecurityPolicy returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasEgressSecurityPolicy() bool {
	if o != nil && o.EgressSecurityPolicy != nil {
		return true
	}

	return false
}

// SetEgressSecurityPolicy gets a reference to the given []string and assigns it to the EgressSecurityPolicy field.
func (o *NetworkVirtualRouterSpec) SetEgressSecurityPolicy(v []string) {
	o.EgressSecurityPolicy = &v
}

// GetFlowExportPolicy returns the FlowExportPolicy field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetFlowExportPolicy() []string {
	if o == nil || o.FlowExportPolicy == nil {
		var ret []string
		return ret
	}
	return *o.FlowExportPolicy
}

// GetFlowExportPolicyOk returns a tuple with the FlowExportPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetFlowExportPolicyOk() (*[]string, bool) {
	if o == nil || o.FlowExportPolicy == nil {
		return nil, false
	}
	return o.FlowExportPolicy, true
}

// HasFlowExportPolicy returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasFlowExportPolicy() bool {
	if o != nil && o.FlowExportPolicy != nil {
		return true
	}

	return false
}

// SetFlowExportPolicy gets a reference to the given []string and assigns it to the FlowExportPolicy field.
func (o *NetworkVirtualRouterSpec) SetFlowExportPolicy(v []string) {
	o.FlowExportPolicy = &v
}

// GetIngressSecurityPolicy returns the IngressSecurityPolicy field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetIngressSecurityPolicy() []string {
	if o == nil || o.IngressSecurityPolicy == nil {
		var ret []string
		return ret
	}
	return *o.IngressSecurityPolicy
}

// GetIngressSecurityPolicyOk returns a tuple with the IngressSecurityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetIngressSecurityPolicyOk() (*[]string, bool) {
	if o == nil || o.IngressSecurityPolicy == nil {
		return nil, false
	}
	return o.IngressSecurityPolicy, true
}

// HasIngressSecurityPolicy returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasIngressSecurityPolicy() bool {
	if o != nil && o.IngressSecurityPolicy != nil {
		return true
	}

	return false
}

// SetIngressSecurityPolicy gets a reference to the given []string and assigns it to the IngressSecurityPolicy field.
func (o *NetworkVirtualRouterSpec) SetIngressSecurityPolicy(v []string) {
	o.IngressSecurityPolicy = &v
}

// GetMaximumCpsPerNetworkPerDistributedServicesEntity returns the MaximumCpsPerNetworkPerDistributedServicesEntity field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetMaximumCpsPerNetworkPerDistributedServicesEntity() int32 {
	if o == nil || o.MaximumCpsPerNetworkPerDistributedServicesEntity == nil {
		var ret int32
		return ret
	}
	return *o.MaximumCpsPerNetworkPerDistributedServicesEntity
}

// GetMaximumCpsPerNetworkPerDistributedServicesEntityOk returns a tuple with the MaximumCpsPerNetworkPerDistributedServicesEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetMaximumCpsPerNetworkPerDistributedServicesEntityOk() (*int32, bool) {
	if o == nil || o.MaximumCpsPerNetworkPerDistributedServicesEntity == nil {
		return nil, false
	}
	return o.MaximumCpsPerNetworkPerDistributedServicesEntity, true
}

// HasMaximumCpsPerNetworkPerDistributedServicesEntity returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasMaximumCpsPerNetworkPerDistributedServicesEntity() bool {
	if o != nil && o.MaximumCpsPerNetworkPerDistributedServicesEntity != nil {
		return true
	}

	return false
}

// SetMaximumCpsPerNetworkPerDistributedServicesEntity gets a reference to the given int32 and assigns it to the MaximumCpsPerNetworkPerDistributedServicesEntity field.
func (o *NetworkVirtualRouterSpec) SetMaximumCpsPerNetworkPerDistributedServicesEntity(v int32) {
	o.MaximumCpsPerNetworkPerDistributedServicesEntity = &v
}

// GetMaximumSessionsPerNetworkPerDistributedServicesEntity returns the MaximumSessionsPerNetworkPerDistributedServicesEntity field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetMaximumSessionsPerNetworkPerDistributedServicesEntity() int32 {
	if o == nil || o.MaximumSessionsPerNetworkPerDistributedServicesEntity == nil {
		var ret int32
		return ret
	}
	return *o.MaximumSessionsPerNetworkPerDistributedServicesEntity
}

// GetMaximumSessionsPerNetworkPerDistributedServicesEntityOk returns a tuple with the MaximumSessionsPerNetworkPerDistributedServicesEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetMaximumSessionsPerNetworkPerDistributedServicesEntityOk() (*int32, bool) {
	if o == nil || o.MaximumSessionsPerNetworkPerDistributedServicesEntity == nil {
		return nil, false
	}
	return o.MaximumSessionsPerNetworkPerDistributedServicesEntity, true
}

// HasMaximumSessionsPerNetworkPerDistributedServicesEntity returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasMaximumSessionsPerNetworkPerDistributedServicesEntity() bool {
	if o != nil && o.MaximumSessionsPerNetworkPerDistributedServicesEntity != nil {
		return true
	}

	return false
}

// SetMaximumSessionsPerNetworkPerDistributedServicesEntity gets a reference to the given int32 and assigns it to the MaximumSessionsPerNetworkPerDistributedServicesEntity field.
func (o *NetworkVirtualRouterSpec) SetMaximumSessionsPerNetworkPerDistributedServicesEntity(v int32) {
	o.MaximumSessionsPerNetworkPerDistributedServicesEntity = &v
}

// GetRouteImportExport returns the RouteImportExport field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetRouteImportExport() NetworkRDSpec {
	if o == nil || o.RouteImportExport == nil {
		var ret NetworkRDSpec
		return ret
	}
	return *o.RouteImportExport
}

// GetRouteImportExportOk returns a tuple with the RouteImportExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetRouteImportExportOk() (*NetworkRDSpec, bool) {
	if o == nil || o.RouteImportExport == nil {
		return nil, false
	}
	return o.RouteImportExport, true
}

// HasRouteImportExport returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasRouteImportExport() bool {
	if o != nil && o.RouteImportExport != nil {
		return true
	}

	return false
}

// SetRouteImportExport gets a reference to the given NetworkRDSpec and assigns it to the RouteImportExport field.
func (o *NetworkVirtualRouterSpec) SetRouteImportExport(v NetworkRDSpec) {
	o.RouteImportExport = &v
}

// GetRouterMacAddress returns the RouterMacAddress field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetRouterMacAddress() string {
	if o == nil || o.RouterMacAddress == nil {
		var ret string
		return ret
	}
	return *o.RouterMacAddress
}

// GetRouterMacAddressOk returns a tuple with the RouterMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetRouterMacAddressOk() (*string, bool) {
	if o == nil || o.RouterMacAddress == nil {
		return nil, false
	}
	return o.RouterMacAddress, true
}

// HasRouterMacAddress returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasRouterMacAddress() bool {
	if o != nil && o.RouterMacAddress != nil {
		return true
	}

	return false
}

// SetRouterMacAddress gets a reference to the given string and assigns it to the RouterMacAddress field.
func (o *NetworkVirtualRouterSpec) SetRouterMacAddress(v string) {
	o.RouterMacAddress = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkVirtualRouterSpec) SetType(v string) {
	o.Type = &v
}

// GetVxlanVni returns the VxlanVni field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetVxlanVni() int64 {
	if o == nil || o.VxlanVni == nil {
		var ret int64
		return ret
	}
	return *o.VxlanVni
}

// GetVxlanVniOk returns a tuple with the VxlanVni field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetVxlanVniOk() (*int64, bool) {
	if o == nil || o.VxlanVni == nil {
		return nil, false
	}
	return o.VxlanVni, true
}

// HasVxlanVni returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasVxlanVni() bool {
	if o != nil && o.VxlanVni != nil {
		return true
	}

	return false
}

// SetVxlanVni gets a reference to the given int64 and assigns it to the VxlanVni field.
func (o *NetworkVirtualRouterSpec) SetVxlanVni(v int64) {
	o.VxlanVni = &v
}

func (o NetworkVirtualRouterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultIpamPolicy != nil {
		toSerialize["default-ipam-policy"] = o.DefaultIpamPolicy
	}
	if o.EgressSecurityPolicy != nil {
		toSerialize["egress-security-policy"] = o.EgressSecurityPolicy
	}
	if o.FlowExportPolicy != nil {
		toSerialize["flow-export-policy"] = o.FlowExportPolicy
	}
	if o.IngressSecurityPolicy != nil {
		toSerialize["ingress-security-policy"] = o.IngressSecurityPolicy
	}
	if o.MaximumCpsPerNetworkPerDistributedServicesEntity != nil {
		toSerialize["maximum-cps-per-network-per-distributed-services-entity"] = o.MaximumCpsPerNetworkPerDistributedServicesEntity
	}
	if o.MaximumSessionsPerNetworkPerDistributedServicesEntity != nil {
		toSerialize["maximum-sessions-per-network-per-distributed-services-entity"] = o.MaximumSessionsPerNetworkPerDistributedServicesEntity
	}
	if o.RouteImportExport != nil {
		toSerialize["route-import-export"] = o.RouteImportExport
	}
	if o.RouterMacAddress != nil {
		toSerialize["router-mac-address"] = o.RouterMacAddress
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.VxlanVni != nil {
		toSerialize["vxlan-vni"] = o.VxlanVni
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkVirtualRouterSpec struct {
	value *NetworkVirtualRouterSpec
	isSet bool
}

func (v NullableNetworkVirtualRouterSpec) Get() *NetworkVirtualRouterSpec {
	return v.value
}

func (v *NullableNetworkVirtualRouterSpec) Set(val *NetworkVirtualRouterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkVirtualRouterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkVirtualRouterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkVirtualRouterSpec(val *NetworkVirtualRouterSpec) *NullableNetworkVirtualRouterSpec {
	return &NullableNetworkVirtualRouterSpec{value: val, isSet: true}
}

func (v NullableNetworkVirtualRouterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkVirtualRouterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


