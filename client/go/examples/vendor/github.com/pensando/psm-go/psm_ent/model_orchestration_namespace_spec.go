/*
 * Orchestration API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// OrchestrationNamespaceSpec NamespaceSpec contains the namespace specification.
type OrchestrationNamespaceSpec struct {
	ManagedSpec *OrchestrationManagedNamespaceSpec `json:"managed-spec,omitempty"`
	Mode *string `json:"mode,omitempty"`
	// MonitoredNamespaceSpec contains namespace specific configuration.
	MonitoredSpec *map[string]interface{} `json:"monitored-spec,omitempty"`
	// Length of string should be at least 1.
	Name *string `json:"name,omitempty"`
}

// NewOrchestrationNamespaceSpec instantiates a new OrchestrationNamespaceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrchestrationNamespaceSpec() *OrchestrationNamespaceSpec {
	this := OrchestrationNamespaceSpec{}
	var mode string = "managed"
	this.Mode = &mode
	return &this
}

// NewOrchestrationNamespaceSpecWithDefaults instantiates a new OrchestrationNamespaceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrchestrationNamespaceSpecWithDefaults() *OrchestrationNamespaceSpec {
	this := OrchestrationNamespaceSpec{}
	var mode string = "managed"
	this.Mode = &mode
	return &this
}

// GetManagedSpec returns the ManagedSpec field value if set, zero value otherwise.
func (o *OrchestrationNamespaceSpec) GetManagedSpec() OrchestrationManagedNamespaceSpec {
	if o == nil || o.ManagedSpec == nil {
		var ret OrchestrationManagedNamespaceSpec
		return ret
	}
	return *o.ManagedSpec
}

// GetManagedSpecOk returns a tuple with the ManagedSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrchestrationNamespaceSpec) GetManagedSpecOk() (*OrchestrationManagedNamespaceSpec, bool) {
	if o == nil || o.ManagedSpec == nil {
		return nil, false
	}
	return o.ManagedSpec, true
}

// HasManagedSpec returns a boolean if a field has been set.
func (o *OrchestrationNamespaceSpec) HasManagedSpec() bool {
	if o != nil && o.ManagedSpec != nil {
		return true
	}

	return false
}

// SetManagedSpec gets a reference to the given OrchestrationManagedNamespaceSpec and assigns it to the ManagedSpec field.
func (o *OrchestrationNamespaceSpec) SetManagedSpec(v OrchestrationManagedNamespaceSpec) {
	o.ManagedSpec = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *OrchestrationNamespaceSpec) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrchestrationNamespaceSpec) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *OrchestrationNamespaceSpec) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *OrchestrationNamespaceSpec) SetMode(v string) {
	o.Mode = &v
}

// GetMonitoredSpec returns the MonitoredSpec field value if set, zero value otherwise.
func (o *OrchestrationNamespaceSpec) GetMonitoredSpec() map[string]interface{} {
	if o == nil || o.MonitoredSpec == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.MonitoredSpec
}

// GetMonitoredSpecOk returns a tuple with the MonitoredSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrchestrationNamespaceSpec) GetMonitoredSpecOk() (*map[string]interface{}, bool) {
	if o == nil || o.MonitoredSpec == nil {
		return nil, false
	}
	return o.MonitoredSpec, true
}

// HasMonitoredSpec returns a boolean if a field has been set.
func (o *OrchestrationNamespaceSpec) HasMonitoredSpec() bool {
	if o != nil && o.MonitoredSpec != nil {
		return true
	}

	return false
}

// SetMonitoredSpec gets a reference to the given map[string]interface{} and assigns it to the MonitoredSpec field.
func (o *OrchestrationNamespaceSpec) SetMonitoredSpec(v map[string]interface{}) {
	o.MonitoredSpec = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrchestrationNamespaceSpec) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrchestrationNamespaceSpec) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrchestrationNamespaceSpec) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrchestrationNamespaceSpec) SetName(v string) {
	o.Name = &v
}

func (o OrchestrationNamespaceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ManagedSpec != nil {
		toSerialize["managed-spec"] = o.ManagedSpec
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.MonitoredSpec != nil {
		toSerialize["monitored-spec"] = o.MonitoredSpec
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableOrchestrationNamespaceSpec struct {
	value *OrchestrationNamespaceSpec
	isSet bool
}

func (v NullableOrchestrationNamespaceSpec) Get() *OrchestrationNamespaceSpec {
	return v.value
}

func (v *NullableOrchestrationNamespaceSpec) Set(val *OrchestrationNamespaceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableOrchestrationNamespaceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableOrchestrationNamespaceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrchestrationNamespaceSpec(val *OrchestrationNamespaceSpec) *NullableOrchestrationNamespaceSpec {
	return &NullableOrchestrationNamespaceSpec{value: val, isSet: true}
}

func (v NullableOrchestrationNamespaceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrchestrationNamespaceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


