/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringMirrorCollector Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture).
type MonitoringMirrorCollector struct {
	ExportConfig *MonitoringMirrorExportConfig `json:"export-config,omitempty"`
	// remove vlan from mirror packet.
	StripVlanHdr *bool `json:"strip-vlan-hdr,omitempty"`
	// Type of Collector.
	Type *string `json:"type,omitempty"`
}

// NewMonitoringMirrorCollector instantiates a new MonitoringMirrorCollector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMirrorCollector() *MonitoringMirrorCollector {
	this := MonitoringMirrorCollector{}
	var type_ string = "erspan_type_3"
	this.Type = &type_
	return &this
}

// NewMonitoringMirrorCollectorWithDefaults instantiates a new MonitoringMirrorCollector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMirrorCollectorWithDefaults() *MonitoringMirrorCollector {
	this := MonitoringMirrorCollector{}
	var type_ string = "erspan_type_3"
	this.Type = &type_
	return &this
}

// GetExportConfig returns the ExportConfig field value if set, zero value otherwise.
func (o *MonitoringMirrorCollector) GetExportConfig() MonitoringMirrorExportConfig {
	if o == nil || o.ExportConfig == nil {
		var ret MonitoringMirrorExportConfig
		return ret
	}
	return *o.ExportConfig
}

// GetExportConfigOk returns a tuple with the ExportConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorCollector) GetExportConfigOk() (*MonitoringMirrorExportConfig, bool) {
	if o == nil || o.ExportConfig == nil {
		return nil, false
	}
	return o.ExportConfig, true
}

// HasExportConfig returns a boolean if a field has been set.
func (o *MonitoringMirrorCollector) HasExportConfig() bool {
	if o != nil && o.ExportConfig != nil {
		return true
	}

	return false
}

// SetExportConfig gets a reference to the given MonitoringMirrorExportConfig and assigns it to the ExportConfig field.
func (o *MonitoringMirrorCollector) SetExportConfig(v MonitoringMirrorExportConfig) {
	o.ExportConfig = &v
}

// GetStripVlanHdr returns the StripVlanHdr field value if set, zero value otherwise.
func (o *MonitoringMirrorCollector) GetStripVlanHdr() bool {
	if o == nil || o.StripVlanHdr == nil {
		var ret bool
		return ret
	}
	return *o.StripVlanHdr
}

// GetStripVlanHdrOk returns a tuple with the StripVlanHdr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorCollector) GetStripVlanHdrOk() (*bool, bool) {
	if o == nil || o.StripVlanHdr == nil {
		return nil, false
	}
	return o.StripVlanHdr, true
}

// HasStripVlanHdr returns a boolean if a field has been set.
func (o *MonitoringMirrorCollector) HasStripVlanHdr() bool {
	if o != nil && o.StripVlanHdr != nil {
		return true
	}

	return false
}

// SetStripVlanHdr gets a reference to the given bool and assigns it to the StripVlanHdr field.
func (o *MonitoringMirrorCollector) SetStripVlanHdr(v bool) {
	o.StripVlanHdr = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MonitoringMirrorCollector) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorCollector) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MonitoringMirrorCollector) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MonitoringMirrorCollector) SetType(v string) {
	o.Type = &v
}

func (o MonitoringMirrorCollector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExportConfig != nil {
		toSerialize["export-config"] = o.ExportConfig
	}
	if o.StripVlanHdr != nil {
		toSerialize["strip-vlan-hdr"] = o.StripVlanHdr
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringMirrorCollector struct {
	value *MonitoringMirrorCollector
	isSet bool
}

func (v NullableMonitoringMirrorCollector) Get() *MonitoringMirrorCollector {
	return v.value
}

func (v *NullableMonitoringMirrorCollector) Set(val *MonitoringMirrorCollector) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMirrorCollector) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMirrorCollector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMirrorCollector(val *MonitoringMirrorCollector) *NullableMonitoringMirrorCollector {
	return &NullableMonitoringMirrorCollector{value: val, isSet: true}
}

func (v NullableMonitoringMirrorCollector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMirrorCollector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


