/*
 * Auth API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
	"time"
)

// AuthUserStatus status part of user object.
type AuthUserStatus struct {
	// Authorization information about requested operations.
	AccessReview *[]AuthOperationStatus `json:"access-review,omitempty"`
	// Authenticators used for last successful login.
	Authenticators *[]string `json:"authenticators,omitempty"`
	// Count of failed login attempts.
	FailedLoginAttempts *int32 `json:"failed-login-attempts,omitempty"`
	// First failed login attempt timestamp.
	FirstFailedLogin *time.Time `json:"first-failed-login,omitempty"`
	// Last login time.
	LastLogin *time.Time `json:"last-login,omitempty"`
	// Last password change time for local user.
	LastPasswordChange *time.Time `json:"last-password-change,omitempty"`
	// Flag to indicate if user is locked.
	Locked *bool `json:"locked,omitempty"`
	// Roles assigned to user.
	Roles *[]string `json:"roles,omitempty"`
	// Groups that external user belongs to.
	UserGroups *[]string `json:"user-groups,omitempty"`
}

// NewAuthUserStatus instantiates a new AuthUserStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthUserStatus() *AuthUserStatus {
	this := AuthUserStatus{}
	return &this
}

// NewAuthUserStatusWithDefaults instantiates a new AuthUserStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthUserStatusWithDefaults() *AuthUserStatus {
	this := AuthUserStatus{}
	return &this
}

// GetAccessReview returns the AccessReview field value if set, zero value otherwise.
func (o *AuthUserStatus) GetAccessReview() []AuthOperationStatus {
	if o == nil || o.AccessReview == nil {
		var ret []AuthOperationStatus
		return ret
	}
	return *o.AccessReview
}

// GetAccessReviewOk returns a tuple with the AccessReview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetAccessReviewOk() (*[]AuthOperationStatus, bool) {
	if o == nil || o.AccessReview == nil {
		return nil, false
	}
	return o.AccessReview, true
}

// HasAccessReview returns a boolean if a field has been set.
func (o *AuthUserStatus) HasAccessReview() bool {
	if o != nil && o.AccessReview != nil {
		return true
	}

	return false
}

// SetAccessReview gets a reference to the given []AuthOperationStatus and assigns it to the AccessReview field.
func (o *AuthUserStatus) SetAccessReview(v []AuthOperationStatus) {
	o.AccessReview = &v
}

// GetAuthenticators returns the Authenticators field value if set, zero value otherwise.
func (o *AuthUserStatus) GetAuthenticators() []string {
	if o == nil || o.Authenticators == nil {
		var ret []string
		return ret
	}
	return *o.Authenticators
}

// GetAuthenticatorsOk returns a tuple with the Authenticators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetAuthenticatorsOk() (*[]string, bool) {
	if o == nil || o.Authenticators == nil {
		return nil, false
	}
	return o.Authenticators, true
}

// HasAuthenticators returns a boolean if a field has been set.
func (o *AuthUserStatus) HasAuthenticators() bool {
	if o != nil && o.Authenticators != nil {
		return true
	}

	return false
}

// SetAuthenticators gets a reference to the given []string and assigns it to the Authenticators field.
func (o *AuthUserStatus) SetAuthenticators(v []string) {
	o.Authenticators = &v
}

// GetFailedLoginAttempts returns the FailedLoginAttempts field value if set, zero value otherwise.
func (o *AuthUserStatus) GetFailedLoginAttempts() int32 {
	if o == nil || o.FailedLoginAttempts == nil {
		var ret int32
		return ret
	}
	return *o.FailedLoginAttempts
}

// GetFailedLoginAttemptsOk returns a tuple with the FailedLoginAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetFailedLoginAttemptsOk() (*int32, bool) {
	if o == nil || o.FailedLoginAttempts == nil {
		return nil, false
	}
	return o.FailedLoginAttempts, true
}

// HasFailedLoginAttempts returns a boolean if a field has been set.
func (o *AuthUserStatus) HasFailedLoginAttempts() bool {
	if o != nil && o.FailedLoginAttempts != nil {
		return true
	}

	return false
}

// SetFailedLoginAttempts gets a reference to the given int32 and assigns it to the FailedLoginAttempts field.
func (o *AuthUserStatus) SetFailedLoginAttempts(v int32) {
	o.FailedLoginAttempts = &v
}

// GetFirstFailedLogin returns the FirstFailedLogin field value if set, zero value otherwise.
func (o *AuthUserStatus) GetFirstFailedLogin() time.Time {
	if o == nil || o.FirstFailedLogin == nil {
		var ret time.Time
		return ret
	}
	return *o.FirstFailedLogin
}

// GetFirstFailedLoginOk returns a tuple with the FirstFailedLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetFirstFailedLoginOk() (*time.Time, bool) {
	if o == nil || o.FirstFailedLogin == nil {
		return nil, false
	}
	return o.FirstFailedLogin, true
}

// HasFirstFailedLogin returns a boolean if a field has been set.
func (o *AuthUserStatus) HasFirstFailedLogin() bool {
	if o != nil && o.FirstFailedLogin != nil {
		return true
	}

	return false
}

// SetFirstFailedLogin gets a reference to the given time.Time and assigns it to the FirstFailedLogin field.
func (o *AuthUserStatus) SetFirstFailedLogin(v time.Time) {
	o.FirstFailedLogin = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *AuthUserStatus) GetLastLogin() time.Time {
	if o == nil || o.LastLogin == nil {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || o.LastLogin == nil {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *AuthUserStatus) HasLastLogin() bool {
	if o != nil && o.LastLogin != nil {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *AuthUserStatus) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

// GetLastPasswordChange returns the LastPasswordChange field value if set, zero value otherwise.
func (o *AuthUserStatus) GetLastPasswordChange() time.Time {
	if o == nil || o.LastPasswordChange == nil {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChange
}

// GetLastPasswordChangeOk returns a tuple with the LastPasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetLastPasswordChangeOk() (*time.Time, bool) {
	if o == nil || o.LastPasswordChange == nil {
		return nil, false
	}
	return o.LastPasswordChange, true
}

// HasLastPasswordChange returns a boolean if a field has been set.
func (o *AuthUserStatus) HasLastPasswordChange() bool {
	if o != nil && o.LastPasswordChange != nil {
		return true
	}

	return false
}

// SetLastPasswordChange gets a reference to the given time.Time and assigns it to the LastPasswordChange field.
func (o *AuthUserStatus) SetLastPasswordChange(v time.Time) {
	o.LastPasswordChange = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *AuthUserStatus) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *AuthUserStatus) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *AuthUserStatus) SetLocked(v bool) {
	o.Locked = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *AuthUserStatus) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *AuthUserStatus) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *AuthUserStatus) SetRoles(v []string) {
	o.Roles = &v
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *AuthUserStatus) GetUserGroups() []string {
	if o == nil || o.UserGroups == nil {
		var ret []string
		return ret
	}
	return *o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserStatus) GetUserGroupsOk() (*[]string, bool) {
	if o == nil || o.UserGroups == nil {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *AuthUserStatus) HasUserGroups() bool {
	if o != nil && o.UserGroups != nil {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []string and assigns it to the UserGroups field.
func (o *AuthUserStatus) SetUserGroups(v []string) {
	o.UserGroups = &v
}

func (o AuthUserStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessReview != nil {
		toSerialize["access-review"] = o.AccessReview
	}
	if o.Authenticators != nil {
		toSerialize["authenticators"] = o.Authenticators
	}
	if o.FailedLoginAttempts != nil {
		toSerialize["failed-login-attempts"] = o.FailedLoginAttempts
	}
	if o.FirstFailedLogin != nil {
		toSerialize["first-failed-login"] = o.FirstFailedLogin
	}
	if o.LastLogin != nil {
		toSerialize["last-login"] = o.LastLogin
	}
	if o.LastPasswordChange != nil {
		toSerialize["last-password-change"] = o.LastPasswordChange
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.UserGroups != nil {
		toSerialize["user-groups"] = o.UserGroups
	}
	return json.Marshal(toSerialize)
}

type NullableAuthUserStatus struct {
	value *AuthUserStatus
	isSet bool
}

func (v NullableAuthUserStatus) Get() *AuthUserStatus {
	return v.value
}

func (v *NullableAuthUserStatus) Set(val *AuthUserStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthUserStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthUserStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthUserStatus(val *AuthUserStatus) *NullableAuthUserStatus {
	return &NullableAuthUserStatus{value: val, isSet: true}
}

func (v NullableAuthUserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthUserStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


