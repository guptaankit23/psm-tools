/*
 * Cluster API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ClusterPolicerRef PolicerRef defines the policer configuration for DistributedServiceCard.
type ClusterPolicerRef struct {
	// Tenant is the tenant to which policerprofile belongs to.
	Tenant *string `json:"tenant,omitempty"`
	// TxPolicer is the name of the policerprofile to be applied in Tx direction.
	TxPolicer *string `json:"tx-policer,omitempty"`
}

// NewClusterPolicerRef instantiates a new ClusterPolicerRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPolicerRef() *ClusterPolicerRef {
	this := ClusterPolicerRef{}
	var tenant string = "default"
	this.Tenant = &tenant
	return &this
}

// NewClusterPolicerRefWithDefaults instantiates a new ClusterPolicerRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPolicerRefWithDefaults() *ClusterPolicerRef {
	this := ClusterPolicerRef{}
	var tenant string = "default"
	this.Tenant = &tenant
	return &this
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *ClusterPolicerRef) GetTenant() string {
	if o == nil || o.Tenant == nil {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPolicerRef) GetTenantOk() (*string, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *ClusterPolicerRef) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *ClusterPolicerRef) SetTenant(v string) {
	o.Tenant = &v
}

// GetTxPolicer returns the TxPolicer field value if set, zero value otherwise.
func (o *ClusterPolicerRef) GetTxPolicer() string {
	if o == nil || o.TxPolicer == nil {
		var ret string
		return ret
	}
	return *o.TxPolicer
}

// GetTxPolicerOk returns a tuple with the TxPolicer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPolicerRef) GetTxPolicerOk() (*string, bool) {
	if o == nil || o.TxPolicer == nil {
		return nil, false
	}
	return o.TxPolicer, true
}

// HasTxPolicer returns a boolean if a field has been set.
func (o *ClusterPolicerRef) HasTxPolicer() bool {
	if o != nil && o.TxPolicer != nil {
		return true
	}

	return false
}

// SetTxPolicer gets a reference to the given string and assigns it to the TxPolicer field.
func (o *ClusterPolicerRef) SetTxPolicer(v string) {
	o.TxPolicer = &v
}

func (o ClusterPolicerRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	if o.TxPolicer != nil {
		toSerialize["tx-policer"] = o.TxPolicer
	}
	return json.Marshal(toSerialize)
}

type NullableClusterPolicerRef struct {
	value *ClusterPolicerRef
	isSet bool
}

func (v NullableClusterPolicerRef) Get() *ClusterPolicerRef {
	return v.value
}

func (v *NullableClusterPolicerRef) Set(val *ClusterPolicerRef) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPolicerRef) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPolicerRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPolicerRef(val *ClusterPolicerRef) *NullableClusterPolicerRef {
	return &NullableClusterPolicerRef{value: val, isSet: true}
}

func (v NullableClusterPolicerRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPolicerRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


