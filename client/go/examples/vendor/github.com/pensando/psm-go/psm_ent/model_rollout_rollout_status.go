/*
 * Rollout API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
	"time"
)

// RolloutRolloutStatus Rollout Status gives the status of the rollout at the top level as well as details of individual components.
type RolloutRolloutStatus struct {
	// Heuristic value of percentage completion of the rollout.
	CompletionPercent *int64 `json:"completion-percent,omitempty"`
	// Rollout status of Controller Node.
	ControllerNodesStatus *[]RolloutRolloutPhase `json:"controller-nodes-status,omitempty"`
	// Rollout status of Various Controller Services.
	ControllerServicesStatus *[]RolloutRolloutPhase `json:"controller-services-status,omitempty"`
	// Rollout status of DistributedServiceCards in the cluster. Has entries for DistributedServiceCards on Controller nodes as well as workload nodes The entries are group by parallelism based on the order-constraints and max-parallel specified by the user.
	DscsStatus *[]RolloutRolloutPhase `json:"dscs-status,omitempty"`
	// End time of Rollout.
	EndTime *time.Time `json:"end-time,omitempty"`
	// Version of the cluster before the start of rollout.
	PrevVersion *string `json:"prev-version,omitempty"`
	// details the reason for overall Failure or Suspend.
	Reason *string `json:"reason,omitempty"`
	// Start time of Rollout.
	StartTime *time.Time `json:"start-time,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewRolloutRolloutStatus instantiates a new RolloutRolloutStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolloutRolloutStatus() *RolloutRolloutStatus {
	this := RolloutRolloutStatus{}
	var state string = "progressing"
	this.State = &state
	return &this
}

// NewRolloutRolloutStatusWithDefaults instantiates a new RolloutRolloutStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolloutRolloutStatusWithDefaults() *RolloutRolloutStatus {
	this := RolloutRolloutStatus{}
	var state string = "progressing"
	this.State = &state
	return &this
}

// GetCompletionPercent returns the CompletionPercent field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetCompletionPercent() int64 {
	if o == nil || o.CompletionPercent == nil {
		var ret int64
		return ret
	}
	return *o.CompletionPercent
}

// GetCompletionPercentOk returns a tuple with the CompletionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetCompletionPercentOk() (*int64, bool) {
	if o == nil || o.CompletionPercent == nil {
		return nil, false
	}
	return o.CompletionPercent, true
}

// HasCompletionPercent returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasCompletionPercent() bool {
	if o != nil && o.CompletionPercent != nil {
		return true
	}

	return false
}

// SetCompletionPercent gets a reference to the given int64 and assigns it to the CompletionPercent field.
func (o *RolloutRolloutStatus) SetCompletionPercent(v int64) {
	o.CompletionPercent = &v
}

// GetControllerNodesStatus returns the ControllerNodesStatus field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetControllerNodesStatus() []RolloutRolloutPhase {
	if o == nil || o.ControllerNodesStatus == nil {
		var ret []RolloutRolloutPhase
		return ret
	}
	return *o.ControllerNodesStatus
}

// GetControllerNodesStatusOk returns a tuple with the ControllerNodesStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetControllerNodesStatusOk() (*[]RolloutRolloutPhase, bool) {
	if o == nil || o.ControllerNodesStatus == nil {
		return nil, false
	}
	return o.ControllerNodesStatus, true
}

// HasControllerNodesStatus returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasControllerNodesStatus() bool {
	if o != nil && o.ControllerNodesStatus != nil {
		return true
	}

	return false
}

// SetControllerNodesStatus gets a reference to the given []RolloutRolloutPhase and assigns it to the ControllerNodesStatus field.
func (o *RolloutRolloutStatus) SetControllerNodesStatus(v []RolloutRolloutPhase) {
	o.ControllerNodesStatus = &v
}

// GetControllerServicesStatus returns the ControllerServicesStatus field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetControllerServicesStatus() []RolloutRolloutPhase {
	if o == nil || o.ControllerServicesStatus == nil {
		var ret []RolloutRolloutPhase
		return ret
	}
	return *o.ControllerServicesStatus
}

// GetControllerServicesStatusOk returns a tuple with the ControllerServicesStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetControllerServicesStatusOk() (*[]RolloutRolloutPhase, bool) {
	if o == nil || o.ControllerServicesStatus == nil {
		return nil, false
	}
	return o.ControllerServicesStatus, true
}

// HasControllerServicesStatus returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasControllerServicesStatus() bool {
	if o != nil && o.ControllerServicesStatus != nil {
		return true
	}

	return false
}

// SetControllerServicesStatus gets a reference to the given []RolloutRolloutPhase and assigns it to the ControllerServicesStatus field.
func (o *RolloutRolloutStatus) SetControllerServicesStatus(v []RolloutRolloutPhase) {
	o.ControllerServicesStatus = &v
}

// GetDscsStatus returns the DscsStatus field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetDscsStatus() []RolloutRolloutPhase {
	if o == nil || o.DscsStatus == nil {
		var ret []RolloutRolloutPhase
		return ret
	}
	return *o.DscsStatus
}

// GetDscsStatusOk returns a tuple with the DscsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetDscsStatusOk() (*[]RolloutRolloutPhase, bool) {
	if o == nil || o.DscsStatus == nil {
		return nil, false
	}
	return o.DscsStatus, true
}

// HasDscsStatus returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasDscsStatus() bool {
	if o != nil && o.DscsStatus != nil {
		return true
	}

	return false
}

// SetDscsStatus gets a reference to the given []RolloutRolloutPhase and assigns it to the DscsStatus field.
func (o *RolloutRolloutStatus) SetDscsStatus(v []RolloutRolloutPhase) {
	o.DscsStatus = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *RolloutRolloutStatus) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetPrevVersion returns the PrevVersion field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetPrevVersion() string {
	if o == nil || o.PrevVersion == nil {
		var ret string
		return ret
	}
	return *o.PrevVersion
}

// GetPrevVersionOk returns a tuple with the PrevVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetPrevVersionOk() (*string, bool) {
	if o == nil || o.PrevVersion == nil {
		return nil, false
	}
	return o.PrevVersion, true
}

// HasPrevVersion returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasPrevVersion() bool {
	if o != nil && o.PrevVersion != nil {
		return true
	}

	return false
}

// SetPrevVersion gets a reference to the given string and assigns it to the PrevVersion field.
func (o *RolloutRolloutStatus) SetPrevVersion(v string) {
	o.PrevVersion = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *RolloutRolloutStatus) SetReason(v string) {
	o.Reason = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *RolloutRolloutStatus) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RolloutRolloutStatus) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRolloutStatus) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RolloutRolloutStatus) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RolloutRolloutStatus) SetState(v string) {
	o.State = &v
}

func (o RolloutRolloutStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompletionPercent != nil {
		toSerialize["completion-percent"] = o.CompletionPercent
	}
	if o.ControllerNodesStatus != nil {
		toSerialize["controller-nodes-status"] = o.ControllerNodesStatus
	}
	if o.ControllerServicesStatus != nil {
		toSerialize["controller-services-status"] = o.ControllerServicesStatus
	}
	if o.DscsStatus != nil {
		toSerialize["dscs-status"] = o.DscsStatus
	}
	if o.EndTime != nil {
		toSerialize["end-time"] = o.EndTime
	}
	if o.PrevVersion != nil {
		toSerialize["prev-version"] = o.PrevVersion
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.StartTime != nil {
		toSerialize["start-time"] = o.StartTime
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableRolloutRolloutStatus struct {
	value *RolloutRolloutStatus
	isSet bool
}

func (v NullableRolloutRolloutStatus) Get() *RolloutRolloutStatus {
	return v.value
}

func (v *NullableRolloutRolloutStatus) Set(val *RolloutRolloutStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRolloutRolloutStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRolloutRolloutStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolloutRolloutStatus(val *RolloutRolloutStatus) *NullableRolloutRolloutStatus {
	return &NullableRolloutRolloutStatus{value: val, isSet: true}
}

func (v NullableRolloutRolloutStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolloutRolloutStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


