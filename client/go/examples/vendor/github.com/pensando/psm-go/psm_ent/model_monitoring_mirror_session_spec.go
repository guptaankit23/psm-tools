/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringMirrorSessionSpec MirrorSessionSpec.
type MonitoringMirrorSessionSpec struct {
	// Mirrored packet collectors.
	Collectors *[]MonitoringMirrorCollector `json:"collectors,omitempty"`
	// Enable/disable mirroring.
	Disabled *bool `json:"disabled,omitempty"`
	Interfaces *MonitoringInterfaceMirror `json:"interfaces,omitempty"`
	// Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions.
	MatchRules *[]MonitoringMatchRule `json:"match-rules,omitempty"`
	PacketFilters *[]string `json:"packet-filters,omitempty"`
	// PacketSize: Max size of a mirrored packet, packet size is not checked by default. Value should be between 64 and 2048.
	PacketSize *int64 `json:"packet-size,omitempty"`
	Source *MonitoringMirrorSource `json:"source,omitempty"`
	// Value should be between 1 and 1023.
	SpanId *int64 `json:"span-id,omitempty"`
	StartCondition *MonitoringMirrorStartConditions `json:"start-condition,omitempty"`
	Workloads *MonitoringWorkloadMirror `json:"workloads,omitempty"`
}

// NewMonitoringMirrorSessionSpec instantiates a new MonitoringMirrorSessionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMirrorSessionSpec() *MonitoringMirrorSessionSpec {
	this := MonitoringMirrorSessionSpec{}
	var spanId int64 = 1
	this.SpanId = &spanId
	return &this
}

// NewMonitoringMirrorSessionSpecWithDefaults instantiates a new MonitoringMirrorSessionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMirrorSessionSpecWithDefaults() *MonitoringMirrorSessionSpec {
	this := MonitoringMirrorSessionSpec{}
	var spanId int64 = 1
	this.SpanId = &spanId
	return &this
}

// GetCollectors returns the Collectors field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetCollectors() []MonitoringMirrorCollector {
	if o == nil || o.Collectors == nil {
		var ret []MonitoringMirrorCollector
		return ret
	}
	return *o.Collectors
}

// GetCollectorsOk returns a tuple with the Collectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetCollectorsOk() (*[]MonitoringMirrorCollector, bool) {
	if o == nil || o.Collectors == nil {
		return nil, false
	}
	return o.Collectors, true
}

// HasCollectors returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasCollectors() bool {
	if o != nil && o.Collectors != nil {
		return true
	}

	return false
}

// SetCollectors gets a reference to the given []MonitoringMirrorCollector and assigns it to the Collectors field.
func (o *MonitoringMirrorSessionSpec) SetCollectors(v []MonitoringMirrorCollector) {
	o.Collectors = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *MonitoringMirrorSessionSpec) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetInterfaces() MonitoringInterfaceMirror {
	if o == nil || o.Interfaces == nil {
		var ret MonitoringInterfaceMirror
		return ret
	}
	return *o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetInterfacesOk() (*MonitoringInterfaceMirror, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given MonitoringInterfaceMirror and assigns it to the Interfaces field.
func (o *MonitoringMirrorSessionSpec) SetInterfaces(v MonitoringInterfaceMirror) {
	o.Interfaces = &v
}

// GetMatchRules returns the MatchRules field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetMatchRules() []MonitoringMatchRule {
	if o == nil || o.MatchRules == nil {
		var ret []MonitoringMatchRule
		return ret
	}
	return *o.MatchRules
}

// GetMatchRulesOk returns a tuple with the MatchRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetMatchRulesOk() (*[]MonitoringMatchRule, bool) {
	if o == nil || o.MatchRules == nil {
		return nil, false
	}
	return o.MatchRules, true
}

// HasMatchRules returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasMatchRules() bool {
	if o != nil && o.MatchRules != nil {
		return true
	}

	return false
}

// SetMatchRules gets a reference to the given []MonitoringMatchRule and assigns it to the MatchRules field.
func (o *MonitoringMirrorSessionSpec) SetMatchRules(v []MonitoringMatchRule) {
	o.MatchRules = &v
}

// GetPacketFilters returns the PacketFilters field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetPacketFilters() []string {
	if o == nil || o.PacketFilters == nil {
		var ret []string
		return ret
	}
	return *o.PacketFilters
}

// GetPacketFiltersOk returns a tuple with the PacketFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetPacketFiltersOk() (*[]string, bool) {
	if o == nil || o.PacketFilters == nil {
		return nil, false
	}
	return o.PacketFilters, true
}

// HasPacketFilters returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasPacketFilters() bool {
	if o != nil && o.PacketFilters != nil {
		return true
	}

	return false
}

// SetPacketFilters gets a reference to the given []string and assigns it to the PacketFilters field.
func (o *MonitoringMirrorSessionSpec) SetPacketFilters(v []string) {
	o.PacketFilters = &v
}

// GetPacketSize returns the PacketSize field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetPacketSize() int64 {
	if o == nil || o.PacketSize == nil {
		var ret int64
		return ret
	}
	return *o.PacketSize
}

// GetPacketSizeOk returns a tuple with the PacketSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetPacketSizeOk() (*int64, bool) {
	if o == nil || o.PacketSize == nil {
		return nil, false
	}
	return o.PacketSize, true
}

// HasPacketSize returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasPacketSize() bool {
	if o != nil && o.PacketSize != nil {
		return true
	}

	return false
}

// SetPacketSize gets a reference to the given int64 and assigns it to the PacketSize field.
func (o *MonitoringMirrorSessionSpec) SetPacketSize(v int64) {
	o.PacketSize = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetSource() MonitoringMirrorSource {
	if o == nil || o.Source == nil {
		var ret MonitoringMirrorSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetSourceOk() (*MonitoringMirrorSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given MonitoringMirrorSource and assigns it to the Source field.
func (o *MonitoringMirrorSessionSpec) SetSource(v MonitoringMirrorSource) {
	o.Source = &v
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetSpanId() int64 {
	if o == nil || o.SpanId == nil {
		var ret int64
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetSpanIdOk() (*int64, bool) {
	if o == nil || o.SpanId == nil {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasSpanId() bool {
	if o != nil && o.SpanId != nil {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given int64 and assigns it to the SpanId field.
func (o *MonitoringMirrorSessionSpec) SetSpanId(v int64) {
	o.SpanId = &v
}

// GetStartCondition returns the StartCondition field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetStartCondition() MonitoringMirrorStartConditions {
	if o == nil || o.StartCondition == nil {
		var ret MonitoringMirrorStartConditions
		return ret
	}
	return *o.StartCondition
}

// GetStartConditionOk returns a tuple with the StartCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetStartConditionOk() (*MonitoringMirrorStartConditions, bool) {
	if o == nil || o.StartCondition == nil {
		return nil, false
	}
	return o.StartCondition, true
}

// HasStartCondition returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasStartCondition() bool {
	if o != nil && o.StartCondition != nil {
		return true
	}

	return false
}

// SetStartCondition gets a reference to the given MonitoringMirrorStartConditions and assigns it to the StartCondition field.
func (o *MonitoringMirrorSessionSpec) SetStartCondition(v MonitoringMirrorStartConditions) {
	o.StartCondition = &v
}

// GetWorkloads returns the Workloads field value if set, zero value otherwise.
func (o *MonitoringMirrorSessionSpec) GetWorkloads() MonitoringWorkloadMirror {
	if o == nil || o.Workloads == nil {
		var ret MonitoringWorkloadMirror
		return ret
	}
	return *o.Workloads
}

// GetWorkloadsOk returns a tuple with the Workloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSessionSpec) GetWorkloadsOk() (*MonitoringWorkloadMirror, bool) {
	if o == nil || o.Workloads == nil {
		return nil, false
	}
	return o.Workloads, true
}

// HasWorkloads returns a boolean if a field has been set.
func (o *MonitoringMirrorSessionSpec) HasWorkloads() bool {
	if o != nil && o.Workloads != nil {
		return true
	}

	return false
}

// SetWorkloads gets a reference to the given MonitoringWorkloadMirror and assigns it to the Workloads field.
func (o *MonitoringMirrorSessionSpec) SetWorkloads(v MonitoringWorkloadMirror) {
	o.Workloads = &v
}

func (o MonitoringMirrorSessionSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Collectors != nil {
		toSerialize["collectors"] = o.Collectors
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.MatchRules != nil {
		toSerialize["match-rules"] = o.MatchRules
	}
	if o.PacketFilters != nil {
		toSerialize["packet-filters"] = o.PacketFilters
	}
	if o.PacketSize != nil {
		toSerialize["packet-size"] = o.PacketSize
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.SpanId != nil {
		toSerialize["span-id"] = o.SpanId
	}
	if o.StartCondition != nil {
		toSerialize["start-condition"] = o.StartCondition
	}
	if o.Workloads != nil {
		toSerialize["workloads"] = o.Workloads
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringMirrorSessionSpec struct {
	value *MonitoringMirrorSessionSpec
	isSet bool
}

func (v NullableMonitoringMirrorSessionSpec) Get() *MonitoringMirrorSessionSpec {
	return v.value
}

func (v *NullableMonitoringMirrorSessionSpec) Set(val *MonitoringMirrorSessionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMirrorSessionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMirrorSessionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMirrorSessionSpec(val *MonitoringMirrorSessionSpec) *NullableMonitoringMirrorSessionSpec {
	return &NullableMonitoringMirrorSessionSpec{value: val, isSet: true}
}

func (v NullableMonitoringMirrorSessionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMirrorSessionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


