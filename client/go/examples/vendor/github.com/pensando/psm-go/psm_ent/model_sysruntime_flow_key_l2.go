/*
 * Sysruntime API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SysruntimeFlowKeyL2 Key for L2 flows (i.e, non-IP flows).
type SysruntimeFlowKeyL2 struct {
	DestinationMac *string `json:"destination-mac,omitempty"`
	EtherType *string `json:"ether-type,omitempty"`
	L2SegmentId *int64 `json:"l2-segment-id,omitempty"`
	SourceMac *string `json:"source-mac,omitempty"`
}

// NewSysruntimeFlowKeyL2 instantiates a new SysruntimeFlowKeyL2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSysruntimeFlowKeyL2() *SysruntimeFlowKeyL2 {
	this := SysruntimeFlowKeyL2{}
	return &this
}

// NewSysruntimeFlowKeyL2WithDefaults instantiates a new SysruntimeFlowKeyL2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSysruntimeFlowKeyL2WithDefaults() *SysruntimeFlowKeyL2 {
	this := SysruntimeFlowKeyL2{}
	return &this
}

// GetDestinationMac returns the DestinationMac field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyL2) GetDestinationMac() string {
	if o == nil || o.DestinationMac == nil {
		var ret string
		return ret
	}
	return *o.DestinationMac
}

// GetDestinationMacOk returns a tuple with the DestinationMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyL2) GetDestinationMacOk() (*string, bool) {
	if o == nil || o.DestinationMac == nil {
		return nil, false
	}
	return o.DestinationMac, true
}

// HasDestinationMac returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyL2) HasDestinationMac() bool {
	if o != nil && o.DestinationMac != nil {
		return true
	}

	return false
}

// SetDestinationMac gets a reference to the given string and assigns it to the DestinationMac field.
func (o *SysruntimeFlowKeyL2) SetDestinationMac(v string) {
	o.DestinationMac = &v
}

// GetEtherType returns the EtherType field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyL2) GetEtherType() string {
	if o == nil || o.EtherType == nil {
		var ret string
		return ret
	}
	return *o.EtherType
}

// GetEtherTypeOk returns a tuple with the EtherType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyL2) GetEtherTypeOk() (*string, bool) {
	if o == nil || o.EtherType == nil {
		return nil, false
	}
	return o.EtherType, true
}

// HasEtherType returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyL2) HasEtherType() bool {
	if o != nil && o.EtherType != nil {
		return true
	}

	return false
}

// SetEtherType gets a reference to the given string and assigns it to the EtherType field.
func (o *SysruntimeFlowKeyL2) SetEtherType(v string) {
	o.EtherType = &v
}

// GetL2SegmentId returns the L2SegmentId field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyL2) GetL2SegmentId() int64 {
	if o == nil || o.L2SegmentId == nil {
		var ret int64
		return ret
	}
	return *o.L2SegmentId
}

// GetL2SegmentIdOk returns a tuple with the L2SegmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyL2) GetL2SegmentIdOk() (*int64, bool) {
	if o == nil || o.L2SegmentId == nil {
		return nil, false
	}
	return o.L2SegmentId, true
}

// HasL2SegmentId returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyL2) HasL2SegmentId() bool {
	if o != nil && o.L2SegmentId != nil {
		return true
	}

	return false
}

// SetL2SegmentId gets a reference to the given int64 and assigns it to the L2SegmentId field.
func (o *SysruntimeFlowKeyL2) SetL2SegmentId(v int64) {
	o.L2SegmentId = &v
}

// GetSourceMac returns the SourceMac field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyL2) GetSourceMac() string {
	if o == nil || o.SourceMac == nil {
		var ret string
		return ret
	}
	return *o.SourceMac
}

// GetSourceMacOk returns a tuple with the SourceMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyL2) GetSourceMacOk() (*string, bool) {
	if o == nil || o.SourceMac == nil {
		return nil, false
	}
	return o.SourceMac, true
}

// HasSourceMac returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyL2) HasSourceMac() bool {
	if o != nil && o.SourceMac != nil {
		return true
	}

	return false
}

// SetSourceMac gets a reference to the given string and assigns it to the SourceMac field.
func (o *SysruntimeFlowKeyL2) SetSourceMac(v string) {
	o.SourceMac = &v
}

func (o SysruntimeFlowKeyL2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DestinationMac != nil {
		toSerialize["destination-mac"] = o.DestinationMac
	}
	if o.EtherType != nil {
		toSerialize["ether-type"] = o.EtherType
	}
	if o.L2SegmentId != nil {
		toSerialize["l2-segment-id"] = o.L2SegmentId
	}
	if o.SourceMac != nil {
		toSerialize["source-mac"] = o.SourceMac
	}
	return json.Marshal(toSerialize)
}

type NullableSysruntimeFlowKeyL2 struct {
	value *SysruntimeFlowKeyL2
	isSet bool
}

func (v NullableSysruntimeFlowKeyL2) Get() *SysruntimeFlowKeyL2 {
	return v.value
}

func (v *NullableSysruntimeFlowKeyL2) Set(val *SysruntimeFlowKeyL2) {
	v.value = val
	v.isSet = true
}

func (v NullableSysruntimeFlowKeyL2) IsSet() bool {
	return v.isSet
}

func (v *NullableSysruntimeFlowKeyL2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSysruntimeFlowKeyL2(val *SysruntimeFlowKeyL2) *NullableSysruntimeFlowKeyL2 {
	return &NullableSysruntimeFlowKeyL2{value: val, isSet: true}
}

func (v NullableSysruntimeFlowKeyL2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSysruntimeFlowKeyL2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


