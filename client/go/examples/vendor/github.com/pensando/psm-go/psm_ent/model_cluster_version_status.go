/*
 * Cluster API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ClusterVersionStatus VersionStatus contains the current state of the Version.
type ClusterVersionStatus struct {
	// Date and Time at which the source code was built.
	BuildDate *string `json:"build-date,omitempty"`
	// Human friendly build version.
	BuildVersion *string `json:"build-version,omitempty"`
	// RolloutBuildVersion shows in progress rollout version.
	RolloutBuildVersion *string `json:"rollout-build-version,omitempty"`
	// Representation of ommit in version control system - e.g: hash in git.
	VcsCommit *string `json:"vcs-commit,omitempty"`
}

// NewClusterVersionStatus instantiates a new ClusterVersionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterVersionStatus() *ClusterVersionStatus {
	this := ClusterVersionStatus{}
	return &this
}

// NewClusterVersionStatusWithDefaults instantiates a new ClusterVersionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterVersionStatusWithDefaults() *ClusterVersionStatus {
	this := ClusterVersionStatus{}
	return &this
}

// GetBuildDate returns the BuildDate field value if set, zero value otherwise.
func (o *ClusterVersionStatus) GetBuildDate() string {
	if o == nil || o.BuildDate == nil {
		var ret string
		return ret
	}
	return *o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterVersionStatus) GetBuildDateOk() (*string, bool) {
	if o == nil || o.BuildDate == nil {
		return nil, false
	}
	return o.BuildDate, true
}

// HasBuildDate returns a boolean if a field has been set.
func (o *ClusterVersionStatus) HasBuildDate() bool {
	if o != nil && o.BuildDate != nil {
		return true
	}

	return false
}

// SetBuildDate gets a reference to the given string and assigns it to the BuildDate field.
func (o *ClusterVersionStatus) SetBuildDate(v string) {
	o.BuildDate = &v
}

// GetBuildVersion returns the BuildVersion field value if set, zero value otherwise.
func (o *ClusterVersionStatus) GetBuildVersion() string {
	if o == nil || o.BuildVersion == nil {
		var ret string
		return ret
	}
	return *o.BuildVersion
}

// GetBuildVersionOk returns a tuple with the BuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterVersionStatus) GetBuildVersionOk() (*string, bool) {
	if o == nil || o.BuildVersion == nil {
		return nil, false
	}
	return o.BuildVersion, true
}

// HasBuildVersion returns a boolean if a field has been set.
func (o *ClusterVersionStatus) HasBuildVersion() bool {
	if o != nil && o.BuildVersion != nil {
		return true
	}

	return false
}

// SetBuildVersion gets a reference to the given string and assigns it to the BuildVersion field.
func (o *ClusterVersionStatus) SetBuildVersion(v string) {
	o.BuildVersion = &v
}

// GetRolloutBuildVersion returns the RolloutBuildVersion field value if set, zero value otherwise.
func (o *ClusterVersionStatus) GetRolloutBuildVersion() string {
	if o == nil || o.RolloutBuildVersion == nil {
		var ret string
		return ret
	}
	return *o.RolloutBuildVersion
}

// GetRolloutBuildVersionOk returns a tuple with the RolloutBuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterVersionStatus) GetRolloutBuildVersionOk() (*string, bool) {
	if o == nil || o.RolloutBuildVersion == nil {
		return nil, false
	}
	return o.RolloutBuildVersion, true
}

// HasRolloutBuildVersion returns a boolean if a field has been set.
func (o *ClusterVersionStatus) HasRolloutBuildVersion() bool {
	if o != nil && o.RolloutBuildVersion != nil {
		return true
	}

	return false
}

// SetRolloutBuildVersion gets a reference to the given string and assigns it to the RolloutBuildVersion field.
func (o *ClusterVersionStatus) SetRolloutBuildVersion(v string) {
	o.RolloutBuildVersion = &v
}

// GetVcsCommit returns the VcsCommit field value if set, zero value otherwise.
func (o *ClusterVersionStatus) GetVcsCommit() string {
	if o == nil || o.VcsCommit == nil {
		var ret string
		return ret
	}
	return *o.VcsCommit
}

// GetVcsCommitOk returns a tuple with the VcsCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterVersionStatus) GetVcsCommitOk() (*string, bool) {
	if o == nil || o.VcsCommit == nil {
		return nil, false
	}
	return o.VcsCommit, true
}

// HasVcsCommit returns a boolean if a field has been set.
func (o *ClusterVersionStatus) HasVcsCommit() bool {
	if o != nil && o.VcsCommit != nil {
		return true
	}

	return false
}

// SetVcsCommit gets a reference to the given string and assigns it to the VcsCommit field.
func (o *ClusterVersionStatus) SetVcsCommit(v string) {
	o.VcsCommit = &v
}

func (o ClusterVersionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BuildDate != nil {
		toSerialize["build-date"] = o.BuildDate
	}
	if o.BuildVersion != nil {
		toSerialize["build-version"] = o.BuildVersion
	}
	if o.RolloutBuildVersion != nil {
		toSerialize["rollout-build-version"] = o.RolloutBuildVersion
	}
	if o.VcsCommit != nil {
		toSerialize["vcs-commit"] = o.VcsCommit
	}
	return json.Marshal(toSerialize)
}

type NullableClusterVersionStatus struct {
	value *ClusterVersionStatus
	isSet bool
}

func (v NullableClusterVersionStatus) Get() *ClusterVersionStatus {
	return v.value
}

func (v *NullableClusterVersionStatus) Set(val *ClusterVersionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterVersionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterVersionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterVersionStatus(val *ClusterVersionStatus) *NullableClusterVersionStatus {
	return &NullableClusterVersionStatus{value: val, isSet: true}
}

func (v NullableClusterVersionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterVersionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


