/*
 * Auth API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// AuthTLSOptions struct for AuthTLSOptions
type AuthTLSOptions struct {
	// ServerName is used to verify the hostname on the returned certificates unless SkipServerCertVerification is true.
	ServerName *string `json:"server-name,omitempty"`
	// SkipServerCertVerification controls whether a client verifies the server's certificate chain and host name. If SkipServerCertVerification is true, TLS accepts any certificate presented by the server and any host name in that certificate. In this mode, TLS is susceptible to man-in-the-middle attacks. This should be used only for testing.
	SkipServerCertVerification *bool `json:"skip-server-cert-verification,omitempty"`
	// StartTLS determines if ldap connection uses TLS.
	StartTls *bool `json:"start-tls,omitempty"`
	// TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates.
	TrustedCerts *string `json:"trusted-certs,omitempty"`
}

// NewAuthTLSOptions instantiates a new AuthTLSOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthTLSOptions() *AuthTLSOptions {
	this := AuthTLSOptions{}
	return &this
}

// NewAuthTLSOptionsWithDefaults instantiates a new AuthTLSOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthTLSOptionsWithDefaults() *AuthTLSOptions {
	this := AuthTLSOptions{}
	return &this
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *AuthTLSOptions) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTLSOptions) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *AuthTLSOptions) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *AuthTLSOptions) SetServerName(v string) {
	o.ServerName = &v
}

// GetSkipServerCertVerification returns the SkipServerCertVerification field value if set, zero value otherwise.
func (o *AuthTLSOptions) GetSkipServerCertVerification() bool {
	if o == nil || o.SkipServerCertVerification == nil {
		var ret bool
		return ret
	}
	return *o.SkipServerCertVerification
}

// GetSkipServerCertVerificationOk returns a tuple with the SkipServerCertVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTLSOptions) GetSkipServerCertVerificationOk() (*bool, bool) {
	if o == nil || o.SkipServerCertVerification == nil {
		return nil, false
	}
	return o.SkipServerCertVerification, true
}

// HasSkipServerCertVerification returns a boolean if a field has been set.
func (o *AuthTLSOptions) HasSkipServerCertVerification() bool {
	if o != nil && o.SkipServerCertVerification != nil {
		return true
	}

	return false
}

// SetSkipServerCertVerification gets a reference to the given bool and assigns it to the SkipServerCertVerification field.
func (o *AuthTLSOptions) SetSkipServerCertVerification(v bool) {
	o.SkipServerCertVerification = &v
}

// GetStartTls returns the StartTls field value if set, zero value otherwise.
func (o *AuthTLSOptions) GetStartTls() bool {
	if o == nil || o.StartTls == nil {
		var ret bool
		return ret
	}
	return *o.StartTls
}

// GetStartTlsOk returns a tuple with the StartTls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTLSOptions) GetStartTlsOk() (*bool, bool) {
	if o == nil || o.StartTls == nil {
		return nil, false
	}
	return o.StartTls, true
}

// HasStartTls returns a boolean if a field has been set.
func (o *AuthTLSOptions) HasStartTls() bool {
	if o != nil && o.StartTls != nil {
		return true
	}

	return false
}

// SetStartTls gets a reference to the given bool and assigns it to the StartTls field.
func (o *AuthTLSOptions) SetStartTls(v bool) {
	o.StartTls = &v
}

// GetTrustedCerts returns the TrustedCerts field value if set, zero value otherwise.
func (o *AuthTLSOptions) GetTrustedCerts() string {
	if o == nil || o.TrustedCerts == nil {
		var ret string
		return ret
	}
	return *o.TrustedCerts
}

// GetTrustedCertsOk returns a tuple with the TrustedCerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTLSOptions) GetTrustedCertsOk() (*string, bool) {
	if o == nil || o.TrustedCerts == nil {
		return nil, false
	}
	return o.TrustedCerts, true
}

// HasTrustedCerts returns a boolean if a field has been set.
func (o *AuthTLSOptions) HasTrustedCerts() bool {
	if o != nil && o.TrustedCerts != nil {
		return true
	}

	return false
}

// SetTrustedCerts gets a reference to the given string and assigns it to the TrustedCerts field.
func (o *AuthTLSOptions) SetTrustedCerts(v string) {
	o.TrustedCerts = &v
}

func (o AuthTLSOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServerName != nil {
		toSerialize["server-name"] = o.ServerName
	}
	if o.SkipServerCertVerification != nil {
		toSerialize["skip-server-cert-verification"] = o.SkipServerCertVerification
	}
	if o.StartTls != nil {
		toSerialize["start-tls"] = o.StartTls
	}
	if o.TrustedCerts != nil {
		toSerialize["trusted-certs"] = o.TrustedCerts
	}
	return json.Marshal(toSerialize)
}

type NullableAuthTLSOptions struct {
	value *AuthTLSOptions
	isSet bool
}

func (v NullableAuthTLSOptions) Get() *AuthTLSOptions {
	return v.value
}

func (v *NullableAuthTLSOptions) Set(val *AuthTLSOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthTLSOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthTLSOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthTLSOptions(val *AuthTLSOptions) *NullableAuthTLSOptions {
	return &NullableAuthTLSOptions{value: val, isSet: true}
}

func (v NullableAuthTLSOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthTLSOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


