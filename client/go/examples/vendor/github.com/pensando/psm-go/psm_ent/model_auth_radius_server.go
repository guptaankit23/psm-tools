/*
 * Auth API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// AuthRadiusServer struct for AuthRadiusServer
type AuthRadiusServer struct {
	// AuthMethod is authentication method to use with the RADIUS server.
	AuthMethod *string `json:"auth-method,omitempty"`
	// Secret is the shared secret between API Gw and RADIUS server.
	Secret *string `json:"secret,omitempty"`
	// TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates. It is used in PEAP and EAP_TTLS auth methods.
	TrustedCerts *string `json:"trusted-certs,omitempty"`
	// <IP address>:<Port> of the RADIUS server.
	Url *string `json:"url,omitempty"`
}

// NewAuthRadiusServer instantiates a new AuthRadiusServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthRadiusServer() *AuthRadiusServer {
	this := AuthRadiusServer{}
	var authMethod string = "pap"
	this.AuthMethod = &authMethod
	return &this
}

// NewAuthRadiusServerWithDefaults instantiates a new AuthRadiusServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthRadiusServerWithDefaults() *AuthRadiusServer {
	this := AuthRadiusServer{}
	var authMethod string = "pap"
	this.AuthMethod = &authMethod
	return &this
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise.
func (o *AuthRadiusServer) GetAuthMethod() string {
	if o == nil || o.AuthMethod == nil {
		var ret string
		return ret
	}
	return *o.AuthMethod
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthRadiusServer) GetAuthMethodOk() (*string, bool) {
	if o == nil || o.AuthMethod == nil {
		return nil, false
	}
	return o.AuthMethod, true
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *AuthRadiusServer) HasAuthMethod() bool {
	if o != nil && o.AuthMethod != nil {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given string and assigns it to the AuthMethod field.
func (o *AuthRadiusServer) SetAuthMethod(v string) {
	o.AuthMethod = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *AuthRadiusServer) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthRadiusServer) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *AuthRadiusServer) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *AuthRadiusServer) SetSecret(v string) {
	o.Secret = &v
}

// GetTrustedCerts returns the TrustedCerts field value if set, zero value otherwise.
func (o *AuthRadiusServer) GetTrustedCerts() string {
	if o == nil || o.TrustedCerts == nil {
		var ret string
		return ret
	}
	return *o.TrustedCerts
}

// GetTrustedCertsOk returns a tuple with the TrustedCerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthRadiusServer) GetTrustedCertsOk() (*string, bool) {
	if o == nil || o.TrustedCerts == nil {
		return nil, false
	}
	return o.TrustedCerts, true
}

// HasTrustedCerts returns a boolean if a field has been set.
func (o *AuthRadiusServer) HasTrustedCerts() bool {
	if o != nil && o.TrustedCerts != nil {
		return true
	}

	return false
}

// SetTrustedCerts gets a reference to the given string and assigns it to the TrustedCerts field.
func (o *AuthRadiusServer) SetTrustedCerts(v string) {
	o.TrustedCerts = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AuthRadiusServer) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthRadiusServer) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AuthRadiusServer) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AuthRadiusServer) SetUrl(v string) {
	o.Url = &v
}

func (o AuthRadiusServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthMethod != nil {
		toSerialize["auth-method"] = o.AuthMethod
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.TrustedCerts != nil {
		toSerialize["trusted-certs"] = o.TrustedCerts
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableAuthRadiusServer struct {
	value *AuthRadiusServer
	isSet bool
}

func (v NullableAuthRadiusServer) Get() *AuthRadiusServer {
	return v.value
}

func (v *NullableAuthRadiusServer) Set(val *AuthRadiusServer) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthRadiusServer) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthRadiusServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthRadiusServer(val *AuthRadiusServer) *NullableAuthRadiusServer {
	return &NullableAuthRadiusServer{value: val, isSet: true}
}

func (v NullableAuthRadiusServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthRadiusServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


