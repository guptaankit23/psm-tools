/*
 * Security API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SecurityFirewallProfileSpec FirewallProfileSpec - spec part of FirewallProfile object.
type SecurityFirewallProfileSpec struct {
	// Enable/disable Connection Tracking.
	ConnectionTracking *bool `json:"connection-tracking,omitempty"`
	// Set the Application Identification Detection config for DSCs.
	DetectApp *bool `json:"detect-app,omitempty"`
	// Drop Timeout is the period for which a drop entry is installed for a denied non tcp/udp/icmp flow. Should be a valid time duration between 1s and 5m0s.
	DropTimeout *string `json:"drop-timeout,omitempty"`
	// Icmp active session limit config after which new requests will be dropped. Value should be between 0 and 32768.
	IcmpActiveSessionLimit *int64 `json:"icmp-active-session-limit,omitempty"`
	// ICMP Drop Timeout is the period for which a drop entry is installed for a denied ICMP flow. Should be a valid time duration between 1s and 5m0s.
	IcmpDropTimeout *string `json:"icmp-drop-timeout,omitempty"`
	// Icmp Timeout is the period for which a ICMP session is kept alive during inactivity. Should be a valid time duration between 1s and 48h0m0s.
	IcmpTimeout *string `json:"icmp-timeout,omitempty"`
	// Session idle timeout removes/deletes the session/flow if there is inactivity; this value is superceded by any value specified in App object. Should be a valid time duration between 30s and 48h0m0s.
	SessionIdleTimeout *string `json:"session-idle-timeout,omitempty"`
	// TCP Close Timeout is the time for which TCP session is kept after a FIN is seen. Should be a valid time duration between 1s and 5m0s.
	TcpCloseTimeout *string `json:"tcp-close-timeout,omitempty"`
	// TCP Connection Setup Timeout is the period TCP session is kept to see the response of a SYN. Should be a valid time duration between 1s and 1m0s.
	TcpConnectionSetupTimeout *string `json:"tcp-connection-setup-timeout,omitempty"`
	// TCP Drop Timeout is the period for which a drop entry is installed for a denied TCP flow. Should be a valid time duration between 1s and 5m0s.
	TcpDropTimeout *string `json:"tcp-drop-timeout,omitempty"`
	// TCP Half Closed Timeout is the time for which tCP session is kept when connection is half closed i.e. FIN sent by FIN_Ack not received. Should be a valid time duration between 1s and 48h0m0s.
	TcpHalfClosedTimeout *string `json:"tcp-half-closed-timeout,omitempty"`
	// Tcp half open session limit config after which new open requests will be dropped. Value should be between 0 and 32768.
	TcpHalfOpenSessionLimit *int64 `json:"tcp-half-open-session-limit,omitempty"`
	// Tcp Timeout is the period for which a TCP session is kept alive during inactivity. Should be a valid time duration between 1s and 48h0m0s.
	TcpTimeout *string `json:"tcp-timeout,omitempty"`
	// Udp active session limit config after which new requests will be dropped. Value should be between 0 and 32768.
	UdpActiveSessionLimit *int64 `json:"udp-active-session-limit,omitempty"`
	// UDP Drop Timeout is the period for which a drop entry is installed for a denied UDP flow. Should be a valid time duration between 1s and 48h0m0s.
	UdpDropTimeout *string `json:"udp-drop-timeout,omitempty"`
	// Udp Timeout is the period for which a UDP session is kept alive during inactivity. Should be a valid time duration between 1s and 48h0m0s.
	UdpTimeout *string `json:"udp-timeout,omitempty"`
}

// NewSecurityFirewallProfileSpec instantiates a new SecurityFirewallProfileSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityFirewallProfileSpec() *SecurityFirewallProfileSpec {
	this := SecurityFirewallProfileSpec{}
	var detectApp bool = false
	this.DetectApp = &detectApp
	var dropTimeout string = "60s"
	this.DropTimeout = &dropTimeout
	var icmpActiveSessionLimit int64 = 0
	this.IcmpActiveSessionLimit = &icmpActiveSessionLimit
	var icmpDropTimeout string = "60s"
	this.IcmpDropTimeout = &icmpDropTimeout
	var icmpTimeout string = "6s"
	this.IcmpTimeout = &icmpTimeout
	var sessionIdleTimeout string = "90s"
	this.SessionIdleTimeout = &sessionIdleTimeout
	var tcpCloseTimeout string = "1s"
	this.TcpCloseTimeout = &tcpCloseTimeout
	var tcpConnectionSetupTimeout string = "30s"
	this.TcpConnectionSetupTimeout = &tcpConnectionSetupTimeout
	var tcpDropTimeout string = "90s"
	this.TcpDropTimeout = &tcpDropTimeout
	var tcpHalfClosedTimeout string = "120s"
	this.TcpHalfClosedTimeout = &tcpHalfClosedTimeout
	var tcpHalfOpenSessionLimit int64 = 0
	this.TcpHalfOpenSessionLimit = &tcpHalfOpenSessionLimit
	var tcpTimeout string = "3600s"
	this.TcpTimeout = &tcpTimeout
	var udpActiveSessionLimit int64 = 0
	this.UdpActiveSessionLimit = &udpActiveSessionLimit
	var udpDropTimeout string = "60s"
	this.UdpDropTimeout = &udpDropTimeout
	var udpTimeout string = "30s"
	this.UdpTimeout = &udpTimeout
	return &this
}

// NewSecurityFirewallProfileSpecWithDefaults instantiates a new SecurityFirewallProfileSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityFirewallProfileSpecWithDefaults() *SecurityFirewallProfileSpec {
	this := SecurityFirewallProfileSpec{}
	var detectApp bool = false
	this.DetectApp = &detectApp
	var dropTimeout string = "60s"
	this.DropTimeout = &dropTimeout
	var icmpActiveSessionLimit int64 = 0
	this.IcmpActiveSessionLimit = &icmpActiveSessionLimit
	var icmpDropTimeout string = "60s"
	this.IcmpDropTimeout = &icmpDropTimeout
	var icmpTimeout string = "6s"
	this.IcmpTimeout = &icmpTimeout
	var sessionIdleTimeout string = "90s"
	this.SessionIdleTimeout = &sessionIdleTimeout
	var tcpCloseTimeout string = "1s"
	this.TcpCloseTimeout = &tcpCloseTimeout
	var tcpConnectionSetupTimeout string = "30s"
	this.TcpConnectionSetupTimeout = &tcpConnectionSetupTimeout
	var tcpDropTimeout string = "90s"
	this.TcpDropTimeout = &tcpDropTimeout
	var tcpHalfClosedTimeout string = "120s"
	this.TcpHalfClosedTimeout = &tcpHalfClosedTimeout
	var tcpHalfOpenSessionLimit int64 = 0
	this.TcpHalfOpenSessionLimit = &tcpHalfOpenSessionLimit
	var tcpTimeout string = "3600s"
	this.TcpTimeout = &tcpTimeout
	var udpActiveSessionLimit int64 = 0
	this.UdpActiveSessionLimit = &udpActiveSessionLimit
	var udpDropTimeout string = "60s"
	this.UdpDropTimeout = &udpDropTimeout
	var udpTimeout string = "30s"
	this.UdpTimeout = &udpTimeout
	return &this
}

// GetConnectionTracking returns the ConnectionTracking field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetConnectionTracking() bool {
	if o == nil || o.ConnectionTracking == nil {
		var ret bool
		return ret
	}
	return *o.ConnectionTracking
}

// GetConnectionTrackingOk returns a tuple with the ConnectionTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetConnectionTrackingOk() (*bool, bool) {
	if o == nil || o.ConnectionTracking == nil {
		return nil, false
	}
	return o.ConnectionTracking, true
}

// HasConnectionTracking returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasConnectionTracking() bool {
	if o != nil && o.ConnectionTracking != nil {
		return true
	}

	return false
}

// SetConnectionTracking gets a reference to the given bool and assigns it to the ConnectionTracking field.
func (o *SecurityFirewallProfileSpec) SetConnectionTracking(v bool) {
	o.ConnectionTracking = &v
}

// GetDetectApp returns the DetectApp field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetDetectApp() bool {
	if o == nil || o.DetectApp == nil {
		var ret bool
		return ret
	}
	return *o.DetectApp
}

// GetDetectAppOk returns a tuple with the DetectApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetDetectAppOk() (*bool, bool) {
	if o == nil || o.DetectApp == nil {
		return nil, false
	}
	return o.DetectApp, true
}

// HasDetectApp returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasDetectApp() bool {
	if o != nil && o.DetectApp != nil {
		return true
	}

	return false
}

// SetDetectApp gets a reference to the given bool and assigns it to the DetectApp field.
func (o *SecurityFirewallProfileSpec) SetDetectApp(v bool) {
	o.DetectApp = &v
}

// GetDropTimeout returns the DropTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetDropTimeout() string {
	if o == nil || o.DropTimeout == nil {
		var ret string
		return ret
	}
	return *o.DropTimeout
}

// GetDropTimeoutOk returns a tuple with the DropTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetDropTimeoutOk() (*string, bool) {
	if o == nil || o.DropTimeout == nil {
		return nil, false
	}
	return o.DropTimeout, true
}

// HasDropTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasDropTimeout() bool {
	if o != nil && o.DropTimeout != nil {
		return true
	}

	return false
}

// SetDropTimeout gets a reference to the given string and assigns it to the DropTimeout field.
func (o *SecurityFirewallProfileSpec) SetDropTimeout(v string) {
	o.DropTimeout = &v
}

// GetIcmpActiveSessionLimit returns the IcmpActiveSessionLimit field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetIcmpActiveSessionLimit() int64 {
	if o == nil || o.IcmpActiveSessionLimit == nil {
		var ret int64
		return ret
	}
	return *o.IcmpActiveSessionLimit
}

// GetIcmpActiveSessionLimitOk returns a tuple with the IcmpActiveSessionLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetIcmpActiveSessionLimitOk() (*int64, bool) {
	if o == nil || o.IcmpActiveSessionLimit == nil {
		return nil, false
	}
	return o.IcmpActiveSessionLimit, true
}

// HasIcmpActiveSessionLimit returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasIcmpActiveSessionLimit() bool {
	if o != nil && o.IcmpActiveSessionLimit != nil {
		return true
	}

	return false
}

// SetIcmpActiveSessionLimit gets a reference to the given int64 and assigns it to the IcmpActiveSessionLimit field.
func (o *SecurityFirewallProfileSpec) SetIcmpActiveSessionLimit(v int64) {
	o.IcmpActiveSessionLimit = &v
}

// GetIcmpDropTimeout returns the IcmpDropTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetIcmpDropTimeout() string {
	if o == nil || o.IcmpDropTimeout == nil {
		var ret string
		return ret
	}
	return *o.IcmpDropTimeout
}

// GetIcmpDropTimeoutOk returns a tuple with the IcmpDropTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetIcmpDropTimeoutOk() (*string, bool) {
	if o == nil || o.IcmpDropTimeout == nil {
		return nil, false
	}
	return o.IcmpDropTimeout, true
}

// HasIcmpDropTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasIcmpDropTimeout() bool {
	if o != nil && o.IcmpDropTimeout != nil {
		return true
	}

	return false
}

// SetIcmpDropTimeout gets a reference to the given string and assigns it to the IcmpDropTimeout field.
func (o *SecurityFirewallProfileSpec) SetIcmpDropTimeout(v string) {
	o.IcmpDropTimeout = &v
}

// GetIcmpTimeout returns the IcmpTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetIcmpTimeout() string {
	if o == nil || o.IcmpTimeout == nil {
		var ret string
		return ret
	}
	return *o.IcmpTimeout
}

// GetIcmpTimeoutOk returns a tuple with the IcmpTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetIcmpTimeoutOk() (*string, bool) {
	if o == nil || o.IcmpTimeout == nil {
		return nil, false
	}
	return o.IcmpTimeout, true
}

// HasIcmpTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasIcmpTimeout() bool {
	if o != nil && o.IcmpTimeout != nil {
		return true
	}

	return false
}

// SetIcmpTimeout gets a reference to the given string and assigns it to the IcmpTimeout field.
func (o *SecurityFirewallProfileSpec) SetIcmpTimeout(v string) {
	o.IcmpTimeout = &v
}

// GetSessionIdleTimeout returns the SessionIdleTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetSessionIdleTimeout() string {
	if o == nil || o.SessionIdleTimeout == nil {
		var ret string
		return ret
	}
	return *o.SessionIdleTimeout
}

// GetSessionIdleTimeoutOk returns a tuple with the SessionIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetSessionIdleTimeoutOk() (*string, bool) {
	if o == nil || o.SessionIdleTimeout == nil {
		return nil, false
	}
	return o.SessionIdleTimeout, true
}

// HasSessionIdleTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasSessionIdleTimeout() bool {
	if o != nil && o.SessionIdleTimeout != nil {
		return true
	}

	return false
}

// SetSessionIdleTimeout gets a reference to the given string and assigns it to the SessionIdleTimeout field.
func (o *SecurityFirewallProfileSpec) SetSessionIdleTimeout(v string) {
	o.SessionIdleTimeout = &v
}

// GetTcpCloseTimeout returns the TcpCloseTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetTcpCloseTimeout() string {
	if o == nil || o.TcpCloseTimeout == nil {
		var ret string
		return ret
	}
	return *o.TcpCloseTimeout
}

// GetTcpCloseTimeoutOk returns a tuple with the TcpCloseTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetTcpCloseTimeoutOk() (*string, bool) {
	if o == nil || o.TcpCloseTimeout == nil {
		return nil, false
	}
	return o.TcpCloseTimeout, true
}

// HasTcpCloseTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasTcpCloseTimeout() bool {
	if o != nil && o.TcpCloseTimeout != nil {
		return true
	}

	return false
}

// SetTcpCloseTimeout gets a reference to the given string and assigns it to the TcpCloseTimeout field.
func (o *SecurityFirewallProfileSpec) SetTcpCloseTimeout(v string) {
	o.TcpCloseTimeout = &v
}

// GetTcpConnectionSetupTimeout returns the TcpConnectionSetupTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetTcpConnectionSetupTimeout() string {
	if o == nil || o.TcpConnectionSetupTimeout == nil {
		var ret string
		return ret
	}
	return *o.TcpConnectionSetupTimeout
}

// GetTcpConnectionSetupTimeoutOk returns a tuple with the TcpConnectionSetupTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetTcpConnectionSetupTimeoutOk() (*string, bool) {
	if o == nil || o.TcpConnectionSetupTimeout == nil {
		return nil, false
	}
	return o.TcpConnectionSetupTimeout, true
}

// HasTcpConnectionSetupTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasTcpConnectionSetupTimeout() bool {
	if o != nil && o.TcpConnectionSetupTimeout != nil {
		return true
	}

	return false
}

// SetTcpConnectionSetupTimeout gets a reference to the given string and assigns it to the TcpConnectionSetupTimeout field.
func (o *SecurityFirewallProfileSpec) SetTcpConnectionSetupTimeout(v string) {
	o.TcpConnectionSetupTimeout = &v
}

// GetTcpDropTimeout returns the TcpDropTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetTcpDropTimeout() string {
	if o == nil || o.TcpDropTimeout == nil {
		var ret string
		return ret
	}
	return *o.TcpDropTimeout
}

// GetTcpDropTimeoutOk returns a tuple with the TcpDropTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetTcpDropTimeoutOk() (*string, bool) {
	if o == nil || o.TcpDropTimeout == nil {
		return nil, false
	}
	return o.TcpDropTimeout, true
}

// HasTcpDropTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasTcpDropTimeout() bool {
	if o != nil && o.TcpDropTimeout != nil {
		return true
	}

	return false
}

// SetTcpDropTimeout gets a reference to the given string and assigns it to the TcpDropTimeout field.
func (o *SecurityFirewallProfileSpec) SetTcpDropTimeout(v string) {
	o.TcpDropTimeout = &v
}

// GetTcpHalfClosedTimeout returns the TcpHalfClosedTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetTcpHalfClosedTimeout() string {
	if o == nil || o.TcpHalfClosedTimeout == nil {
		var ret string
		return ret
	}
	return *o.TcpHalfClosedTimeout
}

// GetTcpHalfClosedTimeoutOk returns a tuple with the TcpHalfClosedTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetTcpHalfClosedTimeoutOk() (*string, bool) {
	if o == nil || o.TcpHalfClosedTimeout == nil {
		return nil, false
	}
	return o.TcpHalfClosedTimeout, true
}

// HasTcpHalfClosedTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasTcpHalfClosedTimeout() bool {
	if o != nil && o.TcpHalfClosedTimeout != nil {
		return true
	}

	return false
}

// SetTcpHalfClosedTimeout gets a reference to the given string and assigns it to the TcpHalfClosedTimeout field.
func (o *SecurityFirewallProfileSpec) SetTcpHalfClosedTimeout(v string) {
	o.TcpHalfClosedTimeout = &v
}

// GetTcpHalfOpenSessionLimit returns the TcpHalfOpenSessionLimit field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetTcpHalfOpenSessionLimit() int64 {
	if o == nil || o.TcpHalfOpenSessionLimit == nil {
		var ret int64
		return ret
	}
	return *o.TcpHalfOpenSessionLimit
}

// GetTcpHalfOpenSessionLimitOk returns a tuple with the TcpHalfOpenSessionLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetTcpHalfOpenSessionLimitOk() (*int64, bool) {
	if o == nil || o.TcpHalfOpenSessionLimit == nil {
		return nil, false
	}
	return o.TcpHalfOpenSessionLimit, true
}

// HasTcpHalfOpenSessionLimit returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasTcpHalfOpenSessionLimit() bool {
	if o != nil && o.TcpHalfOpenSessionLimit != nil {
		return true
	}

	return false
}

// SetTcpHalfOpenSessionLimit gets a reference to the given int64 and assigns it to the TcpHalfOpenSessionLimit field.
func (o *SecurityFirewallProfileSpec) SetTcpHalfOpenSessionLimit(v int64) {
	o.TcpHalfOpenSessionLimit = &v
}

// GetTcpTimeout returns the TcpTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetTcpTimeout() string {
	if o == nil || o.TcpTimeout == nil {
		var ret string
		return ret
	}
	return *o.TcpTimeout
}

// GetTcpTimeoutOk returns a tuple with the TcpTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetTcpTimeoutOk() (*string, bool) {
	if o == nil || o.TcpTimeout == nil {
		return nil, false
	}
	return o.TcpTimeout, true
}

// HasTcpTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasTcpTimeout() bool {
	if o != nil && o.TcpTimeout != nil {
		return true
	}

	return false
}

// SetTcpTimeout gets a reference to the given string and assigns it to the TcpTimeout field.
func (o *SecurityFirewallProfileSpec) SetTcpTimeout(v string) {
	o.TcpTimeout = &v
}

// GetUdpActiveSessionLimit returns the UdpActiveSessionLimit field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetUdpActiveSessionLimit() int64 {
	if o == nil || o.UdpActiveSessionLimit == nil {
		var ret int64
		return ret
	}
	return *o.UdpActiveSessionLimit
}

// GetUdpActiveSessionLimitOk returns a tuple with the UdpActiveSessionLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetUdpActiveSessionLimitOk() (*int64, bool) {
	if o == nil || o.UdpActiveSessionLimit == nil {
		return nil, false
	}
	return o.UdpActiveSessionLimit, true
}

// HasUdpActiveSessionLimit returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasUdpActiveSessionLimit() bool {
	if o != nil && o.UdpActiveSessionLimit != nil {
		return true
	}

	return false
}

// SetUdpActiveSessionLimit gets a reference to the given int64 and assigns it to the UdpActiveSessionLimit field.
func (o *SecurityFirewallProfileSpec) SetUdpActiveSessionLimit(v int64) {
	o.UdpActiveSessionLimit = &v
}

// GetUdpDropTimeout returns the UdpDropTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetUdpDropTimeout() string {
	if o == nil || o.UdpDropTimeout == nil {
		var ret string
		return ret
	}
	return *o.UdpDropTimeout
}

// GetUdpDropTimeoutOk returns a tuple with the UdpDropTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetUdpDropTimeoutOk() (*string, bool) {
	if o == nil || o.UdpDropTimeout == nil {
		return nil, false
	}
	return o.UdpDropTimeout, true
}

// HasUdpDropTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasUdpDropTimeout() bool {
	if o != nil && o.UdpDropTimeout != nil {
		return true
	}

	return false
}

// SetUdpDropTimeout gets a reference to the given string and assigns it to the UdpDropTimeout field.
func (o *SecurityFirewallProfileSpec) SetUdpDropTimeout(v string) {
	o.UdpDropTimeout = &v
}

// GetUdpTimeout returns the UdpTimeout field value if set, zero value otherwise.
func (o *SecurityFirewallProfileSpec) GetUdpTimeout() string {
	if o == nil || o.UdpTimeout == nil {
		var ret string
		return ret
	}
	return *o.UdpTimeout
}

// GetUdpTimeoutOk returns a tuple with the UdpTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFirewallProfileSpec) GetUdpTimeoutOk() (*string, bool) {
	if o == nil || o.UdpTimeout == nil {
		return nil, false
	}
	return o.UdpTimeout, true
}

// HasUdpTimeout returns a boolean if a field has been set.
func (o *SecurityFirewallProfileSpec) HasUdpTimeout() bool {
	if o != nil && o.UdpTimeout != nil {
		return true
	}

	return false
}

// SetUdpTimeout gets a reference to the given string and assigns it to the UdpTimeout field.
func (o *SecurityFirewallProfileSpec) SetUdpTimeout(v string) {
	o.UdpTimeout = &v
}

func (o SecurityFirewallProfileSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionTracking != nil {
		toSerialize["connection-tracking"] = o.ConnectionTracking
	}
	if o.DetectApp != nil {
		toSerialize["detect-app"] = o.DetectApp
	}
	if o.DropTimeout != nil {
		toSerialize["drop-timeout"] = o.DropTimeout
	}
	if o.IcmpActiveSessionLimit != nil {
		toSerialize["icmp-active-session-limit"] = o.IcmpActiveSessionLimit
	}
	if o.IcmpDropTimeout != nil {
		toSerialize["icmp-drop-timeout"] = o.IcmpDropTimeout
	}
	if o.IcmpTimeout != nil {
		toSerialize["icmp-timeout"] = o.IcmpTimeout
	}
	if o.SessionIdleTimeout != nil {
		toSerialize["session-idle-timeout"] = o.SessionIdleTimeout
	}
	if o.TcpCloseTimeout != nil {
		toSerialize["tcp-close-timeout"] = o.TcpCloseTimeout
	}
	if o.TcpConnectionSetupTimeout != nil {
		toSerialize["tcp-connection-setup-timeout"] = o.TcpConnectionSetupTimeout
	}
	if o.TcpDropTimeout != nil {
		toSerialize["tcp-drop-timeout"] = o.TcpDropTimeout
	}
	if o.TcpHalfClosedTimeout != nil {
		toSerialize["tcp-half-closed-timeout"] = o.TcpHalfClosedTimeout
	}
	if o.TcpHalfOpenSessionLimit != nil {
		toSerialize["tcp-half-open-session-limit"] = o.TcpHalfOpenSessionLimit
	}
	if o.TcpTimeout != nil {
		toSerialize["tcp-timeout"] = o.TcpTimeout
	}
	if o.UdpActiveSessionLimit != nil {
		toSerialize["udp-active-session-limit"] = o.UdpActiveSessionLimit
	}
	if o.UdpDropTimeout != nil {
		toSerialize["udp-drop-timeout"] = o.UdpDropTimeout
	}
	if o.UdpTimeout != nil {
		toSerialize["udp-timeout"] = o.UdpTimeout
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityFirewallProfileSpec struct {
	value *SecurityFirewallProfileSpec
	isSet bool
}

func (v NullableSecurityFirewallProfileSpec) Get() *SecurityFirewallProfileSpec {
	return v.value
}

func (v *NullableSecurityFirewallProfileSpec) Set(val *SecurityFirewallProfileSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityFirewallProfileSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityFirewallProfileSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityFirewallProfileSpec(val *SecurityFirewallProfileSpec) *NullableSecurityFirewallProfileSpec {
	return &NullableSecurityFirewallProfileSpec{value: val, isSet: true}
}

func (v NullableSecurityFirewallProfileSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityFirewallProfileSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


