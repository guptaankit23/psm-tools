/*
 * Search API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SearchPolicyMatchEntry PolicyMatchEntry contains the matching SGrule and Index within the NetworkSecurityPolicy ruleset.
type SearchPolicyMatchEntry struct {
	// Index of the matching SG rule.
	Index *int64 `json:"index,omitempty"`
	IpSecPolicyRule *SecurityIPSecPolicyRule `json:"ip-sec-policy-rule,omitempty"`
	SgRule *SecuritySGRule `json:"sg-rule,omitempty"`
}

// NewSearchPolicyMatchEntry instantiates a new SearchPolicyMatchEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPolicyMatchEntry() *SearchPolicyMatchEntry {
	this := SearchPolicyMatchEntry{}
	return &this
}

// NewSearchPolicyMatchEntryWithDefaults instantiates a new SearchPolicyMatchEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPolicyMatchEntryWithDefaults() *SearchPolicyMatchEntry {
	this := SearchPolicyMatchEntry{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *SearchPolicyMatchEntry) GetIndex() int64 {
	if o == nil || o.Index == nil {
		var ret int64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPolicyMatchEntry) GetIndexOk() (*int64, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *SearchPolicyMatchEntry) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int64 and assigns it to the Index field.
func (o *SearchPolicyMatchEntry) SetIndex(v int64) {
	o.Index = &v
}

// GetIpSecPolicyRule returns the IpSecPolicyRule field value if set, zero value otherwise.
func (o *SearchPolicyMatchEntry) GetIpSecPolicyRule() SecurityIPSecPolicyRule {
	if o == nil || o.IpSecPolicyRule == nil {
		var ret SecurityIPSecPolicyRule
		return ret
	}
	return *o.IpSecPolicyRule
}

// GetIpSecPolicyRuleOk returns a tuple with the IpSecPolicyRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPolicyMatchEntry) GetIpSecPolicyRuleOk() (*SecurityIPSecPolicyRule, bool) {
	if o == nil || o.IpSecPolicyRule == nil {
		return nil, false
	}
	return o.IpSecPolicyRule, true
}

// HasIpSecPolicyRule returns a boolean if a field has been set.
func (o *SearchPolicyMatchEntry) HasIpSecPolicyRule() bool {
	if o != nil && o.IpSecPolicyRule != nil {
		return true
	}

	return false
}

// SetIpSecPolicyRule gets a reference to the given SecurityIPSecPolicyRule and assigns it to the IpSecPolicyRule field.
func (o *SearchPolicyMatchEntry) SetIpSecPolicyRule(v SecurityIPSecPolicyRule) {
	o.IpSecPolicyRule = &v
}

// GetSgRule returns the SgRule field value if set, zero value otherwise.
func (o *SearchPolicyMatchEntry) GetSgRule() SecuritySGRule {
	if o == nil || o.SgRule == nil {
		var ret SecuritySGRule
		return ret
	}
	return *o.SgRule
}

// GetSgRuleOk returns a tuple with the SgRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPolicyMatchEntry) GetSgRuleOk() (*SecuritySGRule, bool) {
	if o == nil || o.SgRule == nil {
		return nil, false
	}
	return o.SgRule, true
}

// HasSgRule returns a boolean if a field has been set.
func (o *SearchPolicyMatchEntry) HasSgRule() bool {
	if o != nil && o.SgRule != nil {
		return true
	}

	return false
}

// SetSgRule gets a reference to the given SecuritySGRule and assigns it to the SgRule field.
func (o *SearchPolicyMatchEntry) SetSgRule(v SecuritySGRule) {
	o.SgRule = &v
}

func (o SearchPolicyMatchEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.IpSecPolicyRule != nil {
		toSerialize["ip-sec-policy-rule"] = o.IpSecPolicyRule
	}
	if o.SgRule != nil {
		toSerialize["sg-rule"] = o.SgRule
	}
	return json.Marshal(toSerialize)
}

type NullableSearchPolicyMatchEntry struct {
	value *SearchPolicyMatchEntry
	isSet bool
}

func (v NullableSearchPolicyMatchEntry) Get() *SearchPolicyMatchEntry {
	return v.value
}

func (v *NullableSearchPolicyMatchEntry) Set(val *SearchPolicyMatchEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPolicyMatchEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPolicyMatchEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPolicyMatchEntry(val *SearchPolicyMatchEntry) *NullableSearchPolicyMatchEntry {
	return &NullableSearchPolicyMatchEntry{value: val, isSet: true}
}

func (v NullableSearchPolicyMatchEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPolicyMatchEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


