/*
 * Diagnostics API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// DiagnosticsServicePort ServicePort is to qualify diagnostics request for a specific port in case service is listening on multiple ports.
type DiagnosticsServicePort struct {
	// Name is the name of the port.
	Name *string `json:"name,omitempty"`
	// Port is port number.
	Port *int32 `json:"port,omitempty"`
}

// NewDiagnosticsServicePort instantiates a new DiagnosticsServicePort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagnosticsServicePort() *DiagnosticsServicePort {
	this := DiagnosticsServicePort{}
	return &this
}

// NewDiagnosticsServicePortWithDefaults instantiates a new DiagnosticsServicePort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagnosticsServicePortWithDefaults() *DiagnosticsServicePort {
	this := DiagnosticsServicePort{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiagnosticsServicePort) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticsServicePort) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiagnosticsServicePort) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiagnosticsServicePort) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DiagnosticsServicePort) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticsServicePort) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DiagnosticsServicePort) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *DiagnosticsServicePort) SetPort(v int32) {
	o.Port = &v
}

func (o DiagnosticsServicePort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableDiagnosticsServicePort struct {
	value *DiagnosticsServicePort
	isSet bool
}

func (v NullableDiagnosticsServicePort) Get() *DiagnosticsServicePort {
	return v.value
}

func (v *NullableDiagnosticsServicePort) Set(val *DiagnosticsServicePort) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosticsServicePort) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosticsServicePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosticsServicePort(val *DiagnosticsServicePort) *NullableDiagnosticsServicePort {
	return &NullableDiagnosticsServicePort{value: val, isSet: true}
}

func (v NullableDiagnosticsServicePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosticsServicePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


