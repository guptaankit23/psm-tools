/*
 * Events API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// EventsEventList list of events.
type EventsEventList struct {
	ApiVersion *string `json:"api-version,omitempty"`
	Items *[]EventsEvent `json:"items,omitempty"`
	Kind *string `json:"kind,omitempty"`
	ResourceVersion *string `json:"resource-version,omitempty"`
	TotalCount *int32 `json:"total-count,omitempty"`
}

// NewEventsEventList instantiates a new EventsEventList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsEventList() *EventsEventList {
	this := EventsEventList{}
	return &this
}

// NewEventsEventListWithDefaults instantiates a new EventsEventList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsEventListWithDefaults() *EventsEventList {
	this := EventsEventList{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *EventsEventList) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEventList) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *EventsEventList) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *EventsEventList) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *EventsEventList) GetItems() []EventsEvent {
	if o == nil || o.Items == nil {
		var ret []EventsEvent
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEventList) GetItemsOk() (*[]EventsEvent, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *EventsEventList) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []EventsEvent and assigns it to the Items field.
func (o *EventsEventList) SetItems(v []EventsEvent) {
	o.Items = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *EventsEventList) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEventList) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *EventsEventList) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *EventsEventList) SetKind(v string) {
	o.Kind = &v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *EventsEventList) GetResourceVersion() string {
	if o == nil || o.ResourceVersion == nil {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEventList) GetResourceVersionOk() (*string, bool) {
	if o == nil || o.ResourceVersion == nil {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *EventsEventList) HasResourceVersion() bool {
	if o != nil && o.ResourceVersion != nil {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *EventsEventList) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *EventsEventList) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEventList) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *EventsEventList) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *EventsEventList) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o EventsEventList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api-version"] = o.ApiVersion
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.ResourceVersion != nil {
		toSerialize["resource-version"] = o.ResourceVersion
	}
	if o.TotalCount != nil {
		toSerialize["total-count"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableEventsEventList struct {
	value *EventsEventList
	isSet bool
}

func (v NullableEventsEventList) Get() *EventsEventList {
	return v.value
}

func (v *NullableEventsEventList) Set(val *EventsEventList) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsEventList) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsEventList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsEventList(val *EventsEventList) *NullableEventsEventList {
	return &NullableEventsEventList{value: val, isSet: true}
}

func (v NullableEventsEventList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsEventList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


