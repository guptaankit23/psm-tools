/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
	"time"
)

// MonitoringArchiveQuery ArchiveQuery is to archive audit logs and events based on time window, field values.
type MonitoringArchiveQuery struct {
	// EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z.
	EndTime *time.Time `json:"end-time,omitempty"`
	Fields *FieldsSelector `json:"fields,omitempty"`
	Labels *LabelsSelector `json:"labels,omitempty"`
	// StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z.
	StartTime *time.Time `json:"start-time,omitempty"`
	// OR of tenants within the scope of which archive needs to be performed. If not specified, it will be set to tenant of the logged in user. Also users in non default tenant can archive logs in their tenant scope only.
	Tenants *[]string `json:"tenants,omitempty"`
	// OR of Text-requirements to be matched, Exclude is not supported for Text search.
	Texts *[]SearchTextRequirement `json:"texts,omitempty"`
}

// NewMonitoringArchiveQuery instantiates a new MonitoringArchiveQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringArchiveQuery() *MonitoringArchiveQuery {
	this := MonitoringArchiveQuery{}
	return &this
}

// NewMonitoringArchiveQueryWithDefaults instantiates a new MonitoringArchiveQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringArchiveQueryWithDefaults() *MonitoringArchiveQuery {
	this := MonitoringArchiveQuery{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *MonitoringArchiveQuery) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringArchiveQuery) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *MonitoringArchiveQuery) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *MonitoringArchiveQuery) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *MonitoringArchiveQuery) GetFields() FieldsSelector {
	if o == nil || o.Fields == nil {
		var ret FieldsSelector
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringArchiveQuery) GetFieldsOk() (*FieldsSelector, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *MonitoringArchiveQuery) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given FieldsSelector and assigns it to the Fields field.
func (o *MonitoringArchiveQuery) SetFields(v FieldsSelector) {
	o.Fields = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *MonitoringArchiveQuery) GetLabels() LabelsSelector {
	if o == nil || o.Labels == nil {
		var ret LabelsSelector
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringArchiveQuery) GetLabelsOk() (*LabelsSelector, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *MonitoringArchiveQuery) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given LabelsSelector and assigns it to the Labels field.
func (o *MonitoringArchiveQuery) SetLabels(v LabelsSelector) {
	o.Labels = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *MonitoringArchiveQuery) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringArchiveQuery) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *MonitoringArchiveQuery) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *MonitoringArchiveQuery) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *MonitoringArchiveQuery) GetTenants() []string {
	if o == nil || o.Tenants == nil {
		var ret []string
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringArchiveQuery) GetTenantsOk() (*[]string, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *MonitoringArchiveQuery) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []string and assigns it to the Tenants field.
func (o *MonitoringArchiveQuery) SetTenants(v []string) {
	o.Tenants = &v
}

// GetTexts returns the Texts field value if set, zero value otherwise.
func (o *MonitoringArchiveQuery) GetTexts() []SearchTextRequirement {
	if o == nil || o.Texts == nil {
		var ret []SearchTextRequirement
		return ret
	}
	return *o.Texts
}

// GetTextsOk returns a tuple with the Texts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringArchiveQuery) GetTextsOk() (*[]SearchTextRequirement, bool) {
	if o == nil || o.Texts == nil {
		return nil, false
	}
	return o.Texts, true
}

// HasTexts returns a boolean if a field has been set.
func (o *MonitoringArchiveQuery) HasTexts() bool {
	if o != nil && o.Texts != nil {
		return true
	}

	return false
}

// SetTexts gets a reference to the given []SearchTextRequirement and assigns it to the Texts field.
func (o *MonitoringArchiveQuery) SetTexts(v []SearchTextRequirement) {
	o.Texts = &v
}

func (o MonitoringArchiveQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndTime != nil {
		toSerialize["end-time"] = o.EndTime
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.StartTime != nil {
		toSerialize["start-time"] = o.StartTime
	}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	if o.Texts != nil {
		toSerialize["texts"] = o.Texts
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringArchiveQuery struct {
	value *MonitoringArchiveQuery
	isSet bool
}

func (v NullableMonitoringArchiveQuery) Get() *MonitoringArchiveQuery {
	return v.value
}

func (v *NullableMonitoringArchiveQuery) Set(val *MonitoringArchiveQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringArchiveQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringArchiveQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringArchiveQuery(val *MonitoringArchiveQuery) *NullableMonitoringArchiveQuery {
	return &NullableMonitoringArchiveQuery{value: val, isSet: true}
}

func (v NullableMonitoringArchiveQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringArchiveQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


