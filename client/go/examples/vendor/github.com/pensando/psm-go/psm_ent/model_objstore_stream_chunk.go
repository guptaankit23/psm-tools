/*
 * Objstore API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ObjstoreStreamChunk struct for ObjstoreStreamChunk
type ObjstoreStreamChunk struct {
	Content *string `json:"Content,omitempty"`
}

// NewObjstoreStreamChunk instantiates a new ObjstoreStreamChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjstoreStreamChunk() *ObjstoreStreamChunk {
	this := ObjstoreStreamChunk{}
	return &this
}

// NewObjstoreStreamChunkWithDefaults instantiates a new ObjstoreStreamChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjstoreStreamChunkWithDefaults() *ObjstoreStreamChunk {
	this := ObjstoreStreamChunk{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ObjstoreStreamChunk) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjstoreStreamChunk) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ObjstoreStreamChunk) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ObjstoreStreamChunk) SetContent(v string) {
	o.Content = &v
}

func (o ObjstoreStreamChunk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["Content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableObjstoreStreamChunk struct {
	value *ObjstoreStreamChunk
	isSet bool
}

func (v NullableObjstoreStreamChunk) Get() *ObjstoreStreamChunk {
	return v.value
}

func (v *NullableObjstoreStreamChunk) Set(val *ObjstoreStreamChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableObjstoreStreamChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableObjstoreStreamChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjstoreStreamChunk(val *ObjstoreStreamChunk) *NullableObjstoreStreamChunk {
	return &NullableObjstoreStreamChunk{value: val, isSet: true}
}

func (v NullableObjstoreStreamChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjstoreStreamChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


