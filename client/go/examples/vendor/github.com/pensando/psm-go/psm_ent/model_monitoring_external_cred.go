/*
 * Orchestration API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringExternalCred ExternalCred defines credentials required to access an external entity, such as a stats collector, compute orchestration entity, or a syslog server. External entity may support a variety of methods, like username/password, TLS Client authentication, or Bearer Token based authentication. User is expected to configure one of the methods.
type MonitoringExternalCred struct {
	// AuthType is the authentication type used in this config.
	AuthType *string `json:"auth-type,omitempty"`
	// External entity supports bearer tokens for authentication and authorization Token refresh is not supported using OAuth2.
	BearerToken *string `json:"bearer-token,omitempty"`
	// CaData holds PEM-encoded bytes (typically read from a root certificates bundle). CaData is used by client to autheticate external server. This is applicable to all authentication methods.
	CaData *string `json:"ca-data,omitempty"`
	// CertData holds PEM-encoded bytes (typically read from a client certificate file).
	CertData *string `json:"cert-data,omitempty"`
	// DisableServerAuthentication flag can be used when a client does not want to authenticate a server.
	DisableServerAuthentication *bool `json:"disable-server-authentication,omitempty"`
	// KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
	KeyData *string `json:"key-data,omitempty"`
	// Password is one time specified, not visibile on read operations Only valid when UserName is defined.
	Password *string `json:"password,omitempty"`
	// UserName is the login id to be used towards the external entity.
	Username *string `json:"username,omitempty"`
}

// NewMonitoringExternalCred instantiates a new MonitoringExternalCred object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringExternalCred() *MonitoringExternalCred {
	this := MonitoringExternalCred{}
	var authType string = "none"
	this.AuthType = &authType
	return &this
}

// NewMonitoringExternalCredWithDefaults instantiates a new MonitoringExternalCred object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringExternalCredWithDefaults() *MonitoringExternalCred {
	this := MonitoringExternalCred{}
	var authType string = "none"
	this.AuthType = &authType
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *MonitoringExternalCred) GetAuthType() string {
	if o == nil || o.AuthType == nil {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringExternalCred) GetAuthTypeOk() (*string, bool) {
	if o == nil || o.AuthType == nil {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *MonitoringExternalCred) HasAuthType() bool {
	if o != nil && o.AuthType != nil {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *MonitoringExternalCred) SetAuthType(v string) {
	o.AuthType = &v
}

// GetBearerToken returns the BearerToken field value if set, zero value otherwise.
func (o *MonitoringExternalCred) GetBearerToken() string {
	if o == nil || o.BearerToken == nil {
		var ret string
		return ret
	}
	return *o.BearerToken
}

// GetBearerTokenOk returns a tuple with the BearerToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringExternalCred) GetBearerTokenOk() (*string, bool) {
	if o == nil || o.BearerToken == nil {
		return nil, false
	}
	return o.BearerToken, true
}

// HasBearerToken returns a boolean if a field has been set.
func (o *MonitoringExternalCred) HasBearerToken() bool {
	if o != nil && o.BearerToken != nil {
		return true
	}

	return false
}

// SetBearerToken gets a reference to the given string and assigns it to the BearerToken field.
func (o *MonitoringExternalCred) SetBearerToken(v string) {
	o.BearerToken = &v
}

// GetCaData returns the CaData field value if set, zero value otherwise.
func (o *MonitoringExternalCred) GetCaData() string {
	if o == nil || o.CaData == nil {
		var ret string
		return ret
	}
	return *o.CaData
}

// GetCaDataOk returns a tuple with the CaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringExternalCred) GetCaDataOk() (*string, bool) {
	if o == nil || o.CaData == nil {
		return nil, false
	}
	return o.CaData, true
}

// HasCaData returns a boolean if a field has been set.
func (o *MonitoringExternalCred) HasCaData() bool {
	if o != nil && o.CaData != nil {
		return true
	}

	return false
}

// SetCaData gets a reference to the given string and assigns it to the CaData field.
func (o *MonitoringExternalCred) SetCaData(v string) {
	o.CaData = &v
}

// GetCertData returns the CertData field value if set, zero value otherwise.
func (o *MonitoringExternalCred) GetCertData() string {
	if o == nil || o.CertData == nil {
		var ret string
		return ret
	}
	return *o.CertData
}

// GetCertDataOk returns a tuple with the CertData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringExternalCred) GetCertDataOk() (*string, bool) {
	if o == nil || o.CertData == nil {
		return nil, false
	}
	return o.CertData, true
}

// HasCertData returns a boolean if a field has been set.
func (o *MonitoringExternalCred) HasCertData() bool {
	if o != nil && o.CertData != nil {
		return true
	}

	return false
}

// SetCertData gets a reference to the given string and assigns it to the CertData field.
func (o *MonitoringExternalCred) SetCertData(v string) {
	o.CertData = &v
}

// GetDisableServerAuthentication returns the DisableServerAuthentication field value if set, zero value otherwise.
func (o *MonitoringExternalCred) GetDisableServerAuthentication() bool {
	if o == nil || o.DisableServerAuthentication == nil {
		var ret bool
		return ret
	}
	return *o.DisableServerAuthentication
}

// GetDisableServerAuthenticationOk returns a tuple with the DisableServerAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringExternalCred) GetDisableServerAuthenticationOk() (*bool, bool) {
	if o == nil || o.DisableServerAuthentication == nil {
		return nil, false
	}
	return o.DisableServerAuthentication, true
}

// HasDisableServerAuthentication returns a boolean if a field has been set.
func (o *MonitoringExternalCred) HasDisableServerAuthentication() bool {
	if o != nil && o.DisableServerAuthentication != nil {
		return true
	}

	return false
}

// SetDisableServerAuthentication gets a reference to the given bool and assigns it to the DisableServerAuthentication field.
func (o *MonitoringExternalCred) SetDisableServerAuthentication(v bool) {
	o.DisableServerAuthentication = &v
}

// GetKeyData returns the KeyData field value if set, zero value otherwise.
func (o *MonitoringExternalCred) GetKeyData() string {
	if o == nil || o.KeyData == nil {
		var ret string
		return ret
	}
	return *o.KeyData
}

// GetKeyDataOk returns a tuple with the KeyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringExternalCred) GetKeyDataOk() (*string, bool) {
	if o == nil || o.KeyData == nil {
		return nil, false
	}
	return o.KeyData, true
}

// HasKeyData returns a boolean if a field has been set.
func (o *MonitoringExternalCred) HasKeyData() bool {
	if o != nil && o.KeyData != nil {
		return true
	}

	return false
}

// SetKeyData gets a reference to the given string and assigns it to the KeyData field.
func (o *MonitoringExternalCred) SetKeyData(v string) {
	o.KeyData = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MonitoringExternalCred) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringExternalCred) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MonitoringExternalCred) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *MonitoringExternalCred) SetPassword(v string) {
	o.Password = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MonitoringExternalCred) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringExternalCred) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MonitoringExternalCred) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MonitoringExternalCred) SetUsername(v string) {
	o.Username = &v
}

func (o MonitoringExternalCred) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthType != nil {
		toSerialize["auth-type"] = o.AuthType
	}
	if o.BearerToken != nil {
		toSerialize["bearer-token"] = o.BearerToken
	}
	if o.CaData != nil {
		toSerialize["ca-data"] = o.CaData
	}
	if o.CertData != nil {
		toSerialize["cert-data"] = o.CertData
	}
	if o.DisableServerAuthentication != nil {
		toSerialize["disable-server-authentication"] = o.DisableServerAuthentication
	}
	if o.KeyData != nil {
		toSerialize["key-data"] = o.KeyData
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringExternalCred struct {
	value *MonitoringExternalCred
	isSet bool
}

func (v NullableMonitoringExternalCred) Get() *MonitoringExternalCred {
	return v.value
}

func (v *NullableMonitoringExternalCred) Set(val *MonitoringExternalCred) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringExternalCred) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringExternalCred) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringExternalCred(val *MonitoringExternalCred) *NullableMonitoringExternalCred {
	return &NullableMonitoringExternalCred{value: val, isSet: true}
}

func (v NullableMonitoringExternalCred) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringExternalCred) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


