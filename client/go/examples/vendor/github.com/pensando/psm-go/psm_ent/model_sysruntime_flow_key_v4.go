/*
 * Sysruntime API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SysruntimeFlowKeyV4 Key for IPv4 flows.
type SysruntimeFlowKeyV4 struct {
	Destination *string `json:"destination,omitempty"`
	Esp *SysruntimeFlowKeyESPInfo `json:"esp,omitempty"`
	Icmp *SysruntimeFlowKeyICMPInfo `json:"icmp,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
	Source *string `json:"source,omitempty"`
	TcpUdp *SysruntimeFlowKeyTcpUdpInfo `json:"tcp-udp,omitempty"`
}

// NewSysruntimeFlowKeyV4 instantiates a new SysruntimeFlowKeyV4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSysruntimeFlowKeyV4() *SysruntimeFlowKeyV4 {
	this := SysruntimeFlowKeyV4{}
	return &this
}

// NewSysruntimeFlowKeyV4WithDefaults instantiates a new SysruntimeFlowKeyV4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSysruntimeFlowKeyV4WithDefaults() *SysruntimeFlowKeyV4 {
	this := SysruntimeFlowKeyV4{}
	return &this
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyV4) GetDestination() string {
	if o == nil || o.Destination == nil {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyV4) GetDestinationOk() (*string, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyV4) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *SysruntimeFlowKeyV4) SetDestination(v string) {
	o.Destination = &v
}

// GetEsp returns the Esp field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyV4) GetEsp() SysruntimeFlowKeyESPInfo {
	if o == nil || o.Esp == nil {
		var ret SysruntimeFlowKeyESPInfo
		return ret
	}
	return *o.Esp
}

// GetEspOk returns a tuple with the Esp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyV4) GetEspOk() (*SysruntimeFlowKeyESPInfo, bool) {
	if o == nil || o.Esp == nil {
		return nil, false
	}
	return o.Esp, true
}

// HasEsp returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyV4) HasEsp() bool {
	if o != nil && o.Esp != nil {
		return true
	}

	return false
}

// SetEsp gets a reference to the given SysruntimeFlowKeyESPInfo and assigns it to the Esp field.
func (o *SysruntimeFlowKeyV4) SetEsp(v SysruntimeFlowKeyESPInfo) {
	o.Esp = &v
}

// GetIcmp returns the Icmp field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyV4) GetIcmp() SysruntimeFlowKeyICMPInfo {
	if o == nil || o.Icmp == nil {
		var ret SysruntimeFlowKeyICMPInfo
		return ret
	}
	return *o.Icmp
}

// GetIcmpOk returns a tuple with the Icmp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyV4) GetIcmpOk() (*SysruntimeFlowKeyICMPInfo, bool) {
	if o == nil || o.Icmp == nil {
		return nil, false
	}
	return o.Icmp, true
}

// HasIcmp returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyV4) HasIcmp() bool {
	if o != nil && o.Icmp != nil {
		return true
	}

	return false
}

// SetIcmp gets a reference to the given SysruntimeFlowKeyICMPInfo and assigns it to the Icmp field.
func (o *SysruntimeFlowKeyV4) SetIcmp(v SysruntimeFlowKeyICMPInfo) {
	o.Icmp = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyV4) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyV4) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyV4) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *SysruntimeFlowKeyV4) SetProtocol(v string) {
	o.Protocol = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyV4) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyV4) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyV4) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *SysruntimeFlowKeyV4) SetSource(v string) {
	o.Source = &v
}

// GetTcpUdp returns the TcpUdp field value if set, zero value otherwise.
func (o *SysruntimeFlowKeyV4) GetTcpUdp() SysruntimeFlowKeyTcpUdpInfo {
	if o == nil || o.TcpUdp == nil {
		var ret SysruntimeFlowKeyTcpUdpInfo
		return ret
	}
	return *o.TcpUdp
}

// GetTcpUdpOk returns a tuple with the TcpUdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKeyV4) GetTcpUdpOk() (*SysruntimeFlowKeyTcpUdpInfo, bool) {
	if o == nil || o.TcpUdp == nil {
		return nil, false
	}
	return o.TcpUdp, true
}

// HasTcpUdp returns a boolean if a field has been set.
func (o *SysruntimeFlowKeyV4) HasTcpUdp() bool {
	if o != nil && o.TcpUdp != nil {
		return true
	}

	return false
}

// SetTcpUdp gets a reference to the given SysruntimeFlowKeyTcpUdpInfo and assigns it to the TcpUdp field.
func (o *SysruntimeFlowKeyV4) SetTcpUdp(v SysruntimeFlowKeyTcpUdpInfo) {
	o.TcpUdp = &v
}

func (o SysruntimeFlowKeyV4) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.Esp != nil {
		toSerialize["esp"] = o.Esp
	}
	if o.Icmp != nil {
		toSerialize["icmp"] = o.Icmp
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.TcpUdp != nil {
		toSerialize["tcp-udp"] = o.TcpUdp
	}
	return json.Marshal(toSerialize)
}

type NullableSysruntimeFlowKeyV4 struct {
	value *SysruntimeFlowKeyV4
	isSet bool
}

func (v NullableSysruntimeFlowKeyV4) Get() *SysruntimeFlowKeyV4 {
	return v.value
}

func (v *NullableSysruntimeFlowKeyV4) Set(val *SysruntimeFlowKeyV4) {
	v.value = val
	v.isSet = true
}

func (v NullableSysruntimeFlowKeyV4) IsSet() bool {
	return v.isSet
}

func (v *NullableSysruntimeFlowKeyV4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSysruntimeFlowKeyV4(val *SysruntimeFlowKeyV4) *NullableSysruntimeFlowKeyV4 {
	return &NullableSysruntimeFlowKeyV4{value: val, isSet: true}
}

func (v NullableSysruntimeFlowKeyV4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSysruntimeFlowKeyV4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


