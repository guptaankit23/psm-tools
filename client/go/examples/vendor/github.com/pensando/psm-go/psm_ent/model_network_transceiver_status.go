/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkTransceiverStatus struct for NetworkTransceiverStatus
type NetworkTransceiverStatus struct {
	CableType *string `json:"cable-type,omitempty"`
	Pid *string `json:"pid,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewNetworkTransceiverStatus instantiates a new NetworkTransceiverStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkTransceiverStatus() *NetworkTransceiverStatus {
	this := NetworkTransceiverStatus{}
	var cableType string = "none"
	this.CableType = &cableType
	var pid string = "unknown"
	this.Pid = &pid
	var state string = "state_na"
	this.State = &state
	return &this
}

// NewNetworkTransceiverStatusWithDefaults instantiates a new NetworkTransceiverStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTransceiverStatusWithDefaults() *NetworkTransceiverStatus {
	this := NetworkTransceiverStatus{}
	var cableType string = "none"
	this.CableType = &cableType
	var pid string = "unknown"
	this.Pid = &pid
	var state string = "state_na"
	this.State = &state
	return &this
}

// GetCableType returns the CableType field value if set, zero value otherwise.
func (o *NetworkTransceiverStatus) GetCableType() string {
	if o == nil || o.CableType == nil {
		var ret string
		return ret
	}
	return *o.CableType
}

// GetCableTypeOk returns a tuple with the CableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTransceiverStatus) GetCableTypeOk() (*string, bool) {
	if o == nil || o.CableType == nil {
		return nil, false
	}
	return o.CableType, true
}

// HasCableType returns a boolean if a field has been set.
func (o *NetworkTransceiverStatus) HasCableType() bool {
	if o != nil && o.CableType != nil {
		return true
	}

	return false
}

// SetCableType gets a reference to the given string and assigns it to the CableType field.
func (o *NetworkTransceiverStatus) SetCableType(v string) {
	o.CableType = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *NetworkTransceiverStatus) GetPid() string {
	if o == nil || o.Pid == nil {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTransceiverStatus) GetPidOk() (*string, bool) {
	if o == nil || o.Pid == nil {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *NetworkTransceiverStatus) HasPid() bool {
	if o != nil && o.Pid != nil {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *NetworkTransceiverStatus) SetPid(v string) {
	o.Pid = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *NetworkTransceiverStatus) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTransceiverStatus) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *NetworkTransceiverStatus) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *NetworkTransceiverStatus) SetState(v string) {
	o.State = &v
}

func (o NetworkTransceiverStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CableType != nil {
		toSerialize["cable-type"] = o.CableType
	}
	if o.Pid != nil {
		toSerialize["pid"] = o.Pid
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkTransceiverStatus struct {
	value *NetworkTransceiverStatus
	isSet bool
}

func (v NullableNetworkTransceiverStatus) Get() *NetworkTransceiverStatus {
	return v.value
}

func (v *NullableNetworkTransceiverStatus) Set(val *NetworkTransceiverStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTransceiverStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTransceiverStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTransceiverStatus(val *NetworkTransceiverStatus) *NullableNetworkTransceiverStatus {
	return &NullableNetworkTransceiverStatus{value: val, isSet: true}
}

func (v NullableNetworkTransceiverStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTransceiverStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


