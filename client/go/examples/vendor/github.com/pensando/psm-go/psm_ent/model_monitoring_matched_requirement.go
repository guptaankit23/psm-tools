/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringMatchedRequirement One of the requirement from the expression that was met.
type MonitoringMatchedRequirement struct {
	Key *string `json:"key,omitempty"`
	// The value at which the requirement was met. same as Requirement.value for operator `Equals` but could vary for other operators e.g. requirement - CPU;Gt;90 could have a matching value 96.
	ObservedValue *string `json:"observed-value,omitempty"`
	Operator *string `json:"operator,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

// NewMonitoringMatchedRequirement instantiates a new MonitoringMatchedRequirement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMatchedRequirement() *MonitoringMatchedRequirement {
	this := MonitoringMatchedRequirement{}
	var operator string = "equals"
	this.Operator = &operator
	return &this
}

// NewMonitoringMatchedRequirementWithDefaults instantiates a new MonitoringMatchedRequirement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMatchedRequirementWithDefaults() *MonitoringMatchedRequirement {
	this := MonitoringMatchedRequirement{}
	var operator string = "equals"
	this.Operator = &operator
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MonitoringMatchedRequirement) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchedRequirement) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MonitoringMatchedRequirement) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MonitoringMatchedRequirement) SetKey(v string) {
	o.Key = &v
}

// GetObservedValue returns the ObservedValue field value if set, zero value otherwise.
func (o *MonitoringMatchedRequirement) GetObservedValue() string {
	if o == nil || o.ObservedValue == nil {
		var ret string
		return ret
	}
	return *o.ObservedValue
}

// GetObservedValueOk returns a tuple with the ObservedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchedRequirement) GetObservedValueOk() (*string, bool) {
	if o == nil || o.ObservedValue == nil {
		return nil, false
	}
	return o.ObservedValue, true
}

// HasObservedValue returns a boolean if a field has been set.
func (o *MonitoringMatchedRequirement) HasObservedValue() bool {
	if o != nil && o.ObservedValue != nil {
		return true
	}

	return false
}

// SetObservedValue gets a reference to the given string and assigns it to the ObservedValue field.
func (o *MonitoringMatchedRequirement) SetObservedValue(v string) {
	o.ObservedValue = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *MonitoringMatchedRequirement) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchedRequirement) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *MonitoringMatchedRequirement) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *MonitoringMatchedRequirement) SetOperator(v string) {
	o.Operator = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *MonitoringMatchedRequirement) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMatchedRequirement) GetValuesOk() (*[]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MonitoringMatchedRequirement) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *MonitoringMatchedRequirement) SetValues(v []string) {
	o.Values = &v
}

func (o MonitoringMatchedRequirement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.ObservedValue != nil {
		toSerialize["observed-value"] = o.ObservedValue
	}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringMatchedRequirement struct {
	value *MonitoringMatchedRequirement
	isSet bool
}

func (v NullableMonitoringMatchedRequirement) Get() *MonitoringMatchedRequirement {
	return v.value
}

func (v *NullableMonitoringMatchedRequirement) Set(val *MonitoringMatchedRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMatchedRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMatchedRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMatchedRequirement(val *MonitoringMatchedRequirement) *NullableMonitoringMatchedRequirement {
	return &NullableMonitoringMatchedRequirement{value: val, isSet: true}
}

func (v NullableMonitoringMatchedRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMatchedRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


