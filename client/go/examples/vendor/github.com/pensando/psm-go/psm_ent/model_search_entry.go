/*
 * Search API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SearchEntry Entry represent a single search result entry and contents of this entity vary based on Kind. For Events and Alerts Kind, the result will be entire object respectively. For rest of the configs objects, the result will be ConfigEntry with only the type & object meta data fields.
type SearchEntry struct {
	Object *ApiAny `json:"object,omitempty"`
}

// NewSearchEntry instantiates a new SearchEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchEntry() *SearchEntry {
	this := SearchEntry{}
	return &this
}

// NewSearchEntryWithDefaults instantiates a new SearchEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchEntryWithDefaults() *SearchEntry {
	this := SearchEntry{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *SearchEntry) GetObject() ApiAny {
	if o == nil || o.Object == nil {
		var ret ApiAny
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchEntry) GetObjectOk() (*ApiAny, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *SearchEntry) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given ApiAny and assigns it to the Object field.
func (o *SearchEntry) SetObject(v ApiAny) {
	o.Object = &v
}

func (o SearchEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableSearchEntry struct {
	value *SearchEntry
	isSet bool
}

func (v NullableSearchEntry) Get() *SearchEntry {
	return v.value
}

func (v *NullableSearchEntry) Set(val *SearchEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchEntry(val *SearchEntry) *NullableSearchEntry {
	return &NullableSearchEntry{value: val, isSet: true}
}

func (v NullableSearchEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


