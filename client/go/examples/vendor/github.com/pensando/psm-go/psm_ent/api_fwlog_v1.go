/*
 * Fwlog API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// FwlogV1ApiService FwlogV1Api service
type FwlogV1ApiService service

type ApiFwlogGetDownloadFwLogFileContentRequest struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	oTenant string
	oNamespace *string
	oCreationTime *time.Time
	fieldChangeSelector *[]string
}

func (r ApiFwlogGetDownloadFwLogFileContentRequest) ONamespace(oNamespace string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) OCreationTime(oCreationTime time.Time) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) FieldChangeSelector(fieldChangeSelector []string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}

func (r ApiFwlogGetDownloadFwLogFileContentRequest) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.GetDownloadFwLogFileContentExecute(r)
}

/*
 * GetDownloadFwLogFileContent fwlog/v1/tenants/default/objects/<objectName>
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiFwlogGetDownloadFwLogFileContentRequest
 */
func (a *FwlogV1ApiService) GetDownloadFwLogFileContent(ctx _context.Context, oTenant string) ApiFwlogGetDownloadFwLogFileContentRequest {
	return ApiFwlogGetDownloadFwLogFileContentRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) GetDownloadFwLogFileContentExecute(r ApiFwlogGetDownloadFwLogFileContentRequest) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.GetDownloadFwLogFileContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/tenants/{O.Tenant}/objects/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetDownloadFwLogFileContentExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFwlogGetDownloadFwLogFileContent1Request struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	oName string
	oTenant *string
	oCreationTime *time.Time
	fieldChangeSelector *[]string
}

func (r ApiFwlogGetDownloadFwLogFileContent1Request) OTenant(oTenant string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) OCreationTime(oCreationTime time.Time) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) FieldChangeSelector(fieldChangeSelector []string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}

func (r ApiFwlogGetDownloadFwLogFileContent1Request) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.GetDownloadFwLogFileContent1Execute(r)
}

/*
 * GetDownloadFwLogFileContent1 fwlog/v1/tenants/default/objects/<objectName>
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiFwlogGetDownloadFwLogFileContent1Request
 */
func (a *FwlogV1ApiService) GetDownloadFwLogFileContent1(ctx _context.Context, oName string) ApiFwlogGetDownloadFwLogFileContent1Request {
	return ApiFwlogGetDownloadFwLogFileContent1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) GetDownloadFwLogFileContent1Execute(r ApiFwlogGetDownloadFwLogFileContent1Request) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.GetDownloadFwLogFileContent1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/objects/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetDownloadFwLogFileContent1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFwlogGetGetLogs1Request struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	sourceIps *[]string
	startTime *time.Time
	sortOrder *string
}

func (r ApiFwlogGetGetLogs1Request) SourceIps(sourceIps []string) ApiFwlogGetGetLogs1Request {
	r.sourceIps = &sourceIps
	return r
}
func (r ApiFwlogGetGetLogs1Request) StartTime(startTime time.Time) ApiFwlogGetGetLogs1Request {
	r.startTime = &startTime
	return r
}
func (r ApiFwlogGetGetLogs1Request) SortOrder(sortOrder string) ApiFwlogGetGetLogs1Request {
	r.sortOrder = &sortOrder
	return r
}

func (r ApiFwlogGetGetLogs1Request) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.GetGetLogs1Execute(r)
}

/*
 * GetGetLogs1 Queries firewall logs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiFwlogGetGetLogs1Request
 */
func (a *FwlogV1ApiService) GetGetLogs1(ctx _context.Context) ApiFwlogGetGetLogs1Request {
	return ApiFwlogGetGetLogs1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) GetGetLogs1Execute(r ApiFwlogGetGetLogs1Request) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.GetGetLogs1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sourceIps != nil {
		localVarQueryParams.Add("source-ips", parameterToString(*r.sourceIps, "csv"))
	}
	if r.startTime != nil {
		localVarQueryParams.Add("start-time", parameterToString(*r.startTime, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetGetLogs1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFwlogGetWatchLogsRequest struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	sourceIps *[]string
	startTime *time.Time
	sortOrder *string
}

func (r ApiFwlogGetWatchLogsRequest) SourceIps(sourceIps []string) ApiFwlogGetWatchLogsRequest {
	r.sourceIps = &sourceIps
	return r
}
func (r ApiFwlogGetWatchLogsRequest) StartTime(startTime time.Time) ApiFwlogGetWatchLogsRequest {
	r.startTime = &startTime
	return r
}
func (r ApiFwlogGetWatchLogsRequest) SortOrder(sortOrder string) ApiFwlogGetWatchLogsRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r ApiFwlogGetWatchLogsRequest) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.GetWatchLogsExecute(r)
}

/*
 * GetWatchLogs Method for GetWatchLogs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiFwlogGetWatchLogsRequest
 */
func (a *FwlogV1ApiService) GetWatchLogs(ctx _context.Context) ApiFwlogGetWatchLogsRequest {
	return ApiFwlogGetWatchLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) GetWatchLogsExecute(r ApiFwlogGetWatchLogsRequest) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.GetWatchLogs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/watch/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sourceIps != nil {
		localVarQueryParams.Add("source-ips", parameterToString(*r.sourceIps, "csv"))
	}
	if r.startTime != nil {
		localVarQueryParams.Add("start-time", parameterToString(*r.startTime, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetWatchLogsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFwlogPostGetLogsRequest struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	body *FwlogFwLogQuery
}

func (r ApiFwlogPostGetLogsRequest) Body(body FwlogFwLogQuery) ApiFwlogPostGetLogsRequest {
	r.body = &body
	return r
}

func (r ApiFwlogPostGetLogsRequest) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.PostGetLogsExecute(r)
}

/*
 * PostGetLogs Queries firewall logs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiFwlogPostGetLogsRequest
 */
func (a *FwlogV1ApiService) PostGetLogs(ctx _context.Context) ApiFwlogPostGetLogsRequest {
	return ApiFwlogPostGetLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) PostGetLogsExecute(r ApiFwlogPostGetLogsRequest) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.PostGetLogs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.PostGetLogsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
