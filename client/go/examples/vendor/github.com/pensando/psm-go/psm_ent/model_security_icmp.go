/*
 * Security API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SecurityIcmp ICMP ALG configuration.
type SecurityIcmp struct {
	// ICMP Code is sub-command for a given ICMP Type.
	Code *string `json:"code,omitempty"`
	// ICMP Type.
	Type *string `json:"type,omitempty"`
}

// NewSecurityIcmp instantiates a new SecurityIcmp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityIcmp() *SecurityIcmp {
	this := SecurityIcmp{}
	return &this
}

// NewSecurityIcmpWithDefaults instantiates a new SecurityIcmp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityIcmpWithDefaults() *SecurityIcmp {
	this := SecurityIcmp{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SecurityIcmp) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityIcmp) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SecurityIcmp) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SecurityIcmp) SetCode(v string) {
	o.Code = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SecurityIcmp) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityIcmp) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SecurityIcmp) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SecurityIcmp) SetType(v string) {
	o.Type = &v
}

func (o SecurityIcmp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityIcmp struct {
	value *SecurityIcmp
	isSet bool
}

func (v NullableSecurityIcmp) Get() *SecurityIcmp {
	return v.value
}

func (v *NullableSecurityIcmp) Set(val *SecurityIcmp) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityIcmp) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityIcmp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityIcmp(val *SecurityIcmp) *NullableSecurityIcmp {
	return &NullableSecurityIcmp{value: val, isSet: true}
}

func (v NullableSecurityIcmp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityIcmp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


