/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringStatsAlertPolicySpec struct for MonitoringStatsAlertPolicySpec
type MonitoringStatsAlertPolicySpec struct {
	// name of the alert destinations to be used to send out notification when an alert gets generated.
	Destinations *[]string `json:"destinations,omitempty"`
	// User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is.
	Enable *bool `json:"enable,omitempty"`
	InstanceSelector *MonitoringInstanceSelector `json:"instance-selector,omitempty"`
	MeasurementCriteria *MonitoringMeasurementCriteria `json:"measurement-criteria,omitempty"`
	Metric *MonitoringMetricIdentifier `json:"metric,omitempty"`
	Thresholds *MonitoringThresholds `json:"thresholds,omitempty"`
}

// NewMonitoringStatsAlertPolicySpec instantiates a new MonitoringStatsAlertPolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringStatsAlertPolicySpec() *MonitoringStatsAlertPolicySpec {
	this := MonitoringStatsAlertPolicySpec{}
	var enable bool = true
	this.Enable = &enable
	return &this
}

// NewMonitoringStatsAlertPolicySpecWithDefaults instantiates a new MonitoringStatsAlertPolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringStatsAlertPolicySpecWithDefaults() *MonitoringStatsAlertPolicySpec {
	this := MonitoringStatsAlertPolicySpec{}
	var enable bool = true
	this.Enable = &enable
	return &this
}

// GetDestinations returns the Destinations field value if set, zero value otherwise.
func (o *MonitoringStatsAlertPolicySpec) GetDestinations() []string {
	if o == nil || o.Destinations == nil {
		var ret []string
		return ret
	}
	return *o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringStatsAlertPolicySpec) GetDestinationsOk() (*[]string, bool) {
	if o == nil || o.Destinations == nil {
		return nil, false
	}
	return o.Destinations, true
}

// HasDestinations returns a boolean if a field has been set.
func (o *MonitoringStatsAlertPolicySpec) HasDestinations() bool {
	if o != nil && o.Destinations != nil {
		return true
	}

	return false
}

// SetDestinations gets a reference to the given []string and assigns it to the Destinations field.
func (o *MonitoringStatsAlertPolicySpec) SetDestinations(v []string) {
	o.Destinations = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *MonitoringStatsAlertPolicySpec) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringStatsAlertPolicySpec) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *MonitoringStatsAlertPolicySpec) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *MonitoringStatsAlertPolicySpec) SetEnable(v bool) {
	o.Enable = &v
}

// GetInstanceSelector returns the InstanceSelector field value if set, zero value otherwise.
func (o *MonitoringStatsAlertPolicySpec) GetInstanceSelector() MonitoringInstanceSelector {
	if o == nil || o.InstanceSelector == nil {
		var ret MonitoringInstanceSelector
		return ret
	}
	return *o.InstanceSelector
}

// GetInstanceSelectorOk returns a tuple with the InstanceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringStatsAlertPolicySpec) GetInstanceSelectorOk() (*MonitoringInstanceSelector, bool) {
	if o == nil || o.InstanceSelector == nil {
		return nil, false
	}
	return o.InstanceSelector, true
}

// HasInstanceSelector returns a boolean if a field has been set.
func (o *MonitoringStatsAlertPolicySpec) HasInstanceSelector() bool {
	if o != nil && o.InstanceSelector != nil {
		return true
	}

	return false
}

// SetInstanceSelector gets a reference to the given MonitoringInstanceSelector and assigns it to the InstanceSelector field.
func (o *MonitoringStatsAlertPolicySpec) SetInstanceSelector(v MonitoringInstanceSelector) {
	o.InstanceSelector = &v
}

// GetMeasurementCriteria returns the MeasurementCriteria field value if set, zero value otherwise.
func (o *MonitoringStatsAlertPolicySpec) GetMeasurementCriteria() MonitoringMeasurementCriteria {
	if o == nil || o.MeasurementCriteria == nil {
		var ret MonitoringMeasurementCriteria
		return ret
	}
	return *o.MeasurementCriteria
}

// GetMeasurementCriteriaOk returns a tuple with the MeasurementCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringStatsAlertPolicySpec) GetMeasurementCriteriaOk() (*MonitoringMeasurementCriteria, bool) {
	if o == nil || o.MeasurementCriteria == nil {
		return nil, false
	}
	return o.MeasurementCriteria, true
}

// HasMeasurementCriteria returns a boolean if a field has been set.
func (o *MonitoringStatsAlertPolicySpec) HasMeasurementCriteria() bool {
	if o != nil && o.MeasurementCriteria != nil {
		return true
	}

	return false
}

// SetMeasurementCriteria gets a reference to the given MonitoringMeasurementCriteria and assigns it to the MeasurementCriteria field.
func (o *MonitoringStatsAlertPolicySpec) SetMeasurementCriteria(v MonitoringMeasurementCriteria) {
	o.MeasurementCriteria = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *MonitoringStatsAlertPolicySpec) GetMetric() MonitoringMetricIdentifier {
	if o == nil || o.Metric == nil {
		var ret MonitoringMetricIdentifier
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringStatsAlertPolicySpec) GetMetricOk() (*MonitoringMetricIdentifier, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *MonitoringStatsAlertPolicySpec) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given MonitoringMetricIdentifier and assigns it to the Metric field.
func (o *MonitoringStatsAlertPolicySpec) SetMetric(v MonitoringMetricIdentifier) {
	o.Metric = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *MonitoringStatsAlertPolicySpec) GetThresholds() MonitoringThresholds {
	if o == nil || o.Thresholds == nil {
		var ret MonitoringThresholds
		return ret
	}
	return *o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringStatsAlertPolicySpec) GetThresholdsOk() (*MonitoringThresholds, bool) {
	if o == nil || o.Thresholds == nil {
		return nil, false
	}
	return o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *MonitoringStatsAlertPolicySpec) HasThresholds() bool {
	if o != nil && o.Thresholds != nil {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given MonitoringThresholds and assigns it to the Thresholds field.
func (o *MonitoringStatsAlertPolicySpec) SetThresholds(v MonitoringThresholds) {
	o.Thresholds = &v
}

func (o MonitoringStatsAlertPolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Destinations != nil {
		toSerialize["destinations"] = o.Destinations
	}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	if o.InstanceSelector != nil {
		toSerialize["instance-selector"] = o.InstanceSelector
	}
	if o.MeasurementCriteria != nil {
		toSerialize["measurement-criteria"] = o.MeasurementCriteria
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	if o.Thresholds != nil {
		toSerialize["thresholds"] = o.Thresholds
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringStatsAlertPolicySpec struct {
	value *MonitoringStatsAlertPolicySpec
	isSet bool
}

func (v NullableMonitoringStatsAlertPolicySpec) Get() *MonitoringStatsAlertPolicySpec {
	return v.value
}

func (v *NullableMonitoringStatsAlertPolicySpec) Set(val *MonitoringStatsAlertPolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringStatsAlertPolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringStatsAlertPolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringStatsAlertPolicySpec(val *MonitoringStatsAlertPolicySpec) *NullableMonitoringStatsAlertPolicySpec {
	return &NullableMonitoringStatsAlertPolicySpec{value: val, isSet: true}
}

func (v NullableMonitoringStatsAlertPolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringStatsAlertPolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


