/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringMirrorSource struct for MonitoringMirrorSource
type MonitoringMirrorSource struct {
	// rx is towards the Source and tx is from Source.
	Direction *string `json:"direction,omitempty"`
	TargetSelectors *[]LabelsSelector `json:"target-selectors,omitempty"`
	TargetType *string `json:"target-type,omitempty"`
}

// NewMonitoringMirrorSource instantiates a new MonitoringMirrorSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMirrorSource() *MonitoringMirrorSource {
	this := MonitoringMirrorSource{}
	var direction string = "both"
	this.Direction = &direction
	var targetType string = "none"
	this.TargetType = &targetType
	return &this
}

// NewMonitoringMirrorSourceWithDefaults instantiates a new MonitoringMirrorSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMirrorSourceWithDefaults() *MonitoringMirrorSource {
	this := MonitoringMirrorSource{}
	var direction string = "both"
	this.Direction = &direction
	var targetType string = "none"
	this.TargetType = &targetType
	return &this
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *MonitoringMirrorSource) GetDirection() string {
	if o == nil || o.Direction == nil {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSource) GetDirectionOk() (*string, bool) {
	if o == nil || o.Direction == nil {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *MonitoringMirrorSource) HasDirection() bool {
	if o != nil && o.Direction != nil {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *MonitoringMirrorSource) SetDirection(v string) {
	o.Direction = &v
}

// GetTargetSelectors returns the TargetSelectors field value if set, zero value otherwise.
func (o *MonitoringMirrorSource) GetTargetSelectors() []LabelsSelector {
	if o == nil || o.TargetSelectors == nil {
		var ret []LabelsSelector
		return ret
	}
	return *o.TargetSelectors
}

// GetTargetSelectorsOk returns a tuple with the TargetSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSource) GetTargetSelectorsOk() (*[]LabelsSelector, bool) {
	if o == nil || o.TargetSelectors == nil {
		return nil, false
	}
	return o.TargetSelectors, true
}

// HasTargetSelectors returns a boolean if a field has been set.
func (o *MonitoringMirrorSource) HasTargetSelectors() bool {
	if o != nil && o.TargetSelectors != nil {
		return true
	}

	return false
}

// SetTargetSelectors gets a reference to the given []LabelsSelector and assigns it to the TargetSelectors field.
func (o *MonitoringMirrorSource) SetTargetSelectors(v []LabelsSelector) {
	o.TargetSelectors = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *MonitoringMirrorSource) GetTargetType() string {
	if o == nil || o.TargetType == nil {
		var ret string
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorSource) GetTargetTypeOk() (*string, bool) {
	if o == nil || o.TargetType == nil {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *MonitoringMirrorSource) HasTargetType() bool {
	if o != nil && o.TargetType != nil {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given string and assigns it to the TargetType field.
func (o *MonitoringMirrorSource) SetTargetType(v string) {
	o.TargetType = &v
}

func (o MonitoringMirrorSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Direction != nil {
		toSerialize["direction"] = o.Direction
	}
	if o.TargetSelectors != nil {
		toSerialize["target-selectors"] = o.TargetSelectors
	}
	if o.TargetType != nil {
		toSerialize["target-type"] = o.TargetType
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringMirrorSource struct {
	value *MonitoringMirrorSource
	isSet bool
}

func (v NullableMonitoringMirrorSource) Get() *MonitoringMirrorSource {
	return v.value
}

func (v *NullableMonitoringMirrorSource) Set(val *MonitoringMirrorSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMirrorSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMirrorSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMirrorSource(val *MonitoringMirrorSource) *NullableMonitoringMirrorSource {
	return &NullableMonitoringMirrorSource{value: val, isSet: true}
}

func (v NullableMonitoringMirrorSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMirrorSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


