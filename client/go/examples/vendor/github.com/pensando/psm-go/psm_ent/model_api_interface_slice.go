/*
 * Telemetry_query API reference
 *
 * Service name  
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ApiInterfaceSlice struct for ApiInterfaceSlice
type ApiInterfaceSlice struct {
	Values *[]ApiInterface `json:"Values,omitempty"`
}

// NewApiInterfaceSlice instantiates a new ApiInterfaceSlice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiInterfaceSlice() *ApiInterfaceSlice {
	this := ApiInterfaceSlice{}
	return &this
}

// NewApiInterfaceSliceWithDefaults instantiates a new ApiInterfaceSlice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiInterfaceSliceWithDefaults() *ApiInterfaceSlice {
	this := ApiInterfaceSlice{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ApiInterfaceSlice) GetValues() []ApiInterface {
	if o == nil || o.Values == nil {
		var ret []ApiInterface
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInterfaceSlice) GetValuesOk() (*[]ApiInterface, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ApiInterfaceSlice) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ApiInterface and assigns it to the Values field.
func (o *ApiInterfaceSlice) SetValues(v []ApiInterface) {
	o.Values = &v
}

func (o ApiInterfaceSlice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Values != nil {
		toSerialize["Values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableApiInterfaceSlice struct {
	value *ApiInterfaceSlice
	isSet bool
}

func (v NullableApiInterfaceSlice) Get() *ApiInterfaceSlice {
	return v.value
}

func (v *NullableApiInterfaceSlice) Set(val *ApiInterfaceSlice) {
	v.value = val
	v.isSet = true
}

func (v NullableApiInterfaceSlice) IsSet() bool {
	return v.isSet
}

func (v *NullableApiInterfaceSlice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiInterfaceSlice(val *ApiInterfaceSlice) *NullableApiInterfaceSlice {
	return &NullableApiInterfaceSlice{value: val, isSet: true}
}

func (v NullableApiInterfaceSlice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiInterfaceSlice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


