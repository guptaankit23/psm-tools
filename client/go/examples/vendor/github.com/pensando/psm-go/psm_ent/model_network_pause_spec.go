/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkPauseSpec struct for NetworkPauseSpec
type NetworkPauseSpec struct {
	// RX Pause enabled.
	RxPauseEnabled *bool `json:"rx-pause-enabled,omitempty"`
	// TX Pause enabled.
	TxPauseEnabled *bool `json:"tx-pause-enabled,omitempty"`
	// Pause type.
	Type *string `json:"type,omitempty"`
}

// NewNetworkPauseSpec instantiates a new NetworkPauseSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkPauseSpec() *NetworkPauseSpec {
	this := NetworkPauseSpec{}
	var type_ string = "disable"
	this.Type = &type_
	return &this
}

// NewNetworkPauseSpecWithDefaults instantiates a new NetworkPauseSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkPauseSpecWithDefaults() *NetworkPauseSpec {
	this := NetworkPauseSpec{}
	var type_ string = "disable"
	this.Type = &type_
	return &this
}

// GetRxPauseEnabled returns the RxPauseEnabled field value if set, zero value otherwise.
func (o *NetworkPauseSpec) GetRxPauseEnabled() bool {
	if o == nil || o.RxPauseEnabled == nil {
		var ret bool
		return ret
	}
	return *o.RxPauseEnabled
}

// GetRxPauseEnabledOk returns a tuple with the RxPauseEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPauseSpec) GetRxPauseEnabledOk() (*bool, bool) {
	if o == nil || o.RxPauseEnabled == nil {
		return nil, false
	}
	return o.RxPauseEnabled, true
}

// HasRxPauseEnabled returns a boolean if a field has been set.
func (o *NetworkPauseSpec) HasRxPauseEnabled() bool {
	if o != nil && o.RxPauseEnabled != nil {
		return true
	}

	return false
}

// SetRxPauseEnabled gets a reference to the given bool and assigns it to the RxPauseEnabled field.
func (o *NetworkPauseSpec) SetRxPauseEnabled(v bool) {
	o.RxPauseEnabled = &v
}

// GetTxPauseEnabled returns the TxPauseEnabled field value if set, zero value otherwise.
func (o *NetworkPauseSpec) GetTxPauseEnabled() bool {
	if o == nil || o.TxPauseEnabled == nil {
		var ret bool
		return ret
	}
	return *o.TxPauseEnabled
}

// GetTxPauseEnabledOk returns a tuple with the TxPauseEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPauseSpec) GetTxPauseEnabledOk() (*bool, bool) {
	if o == nil || o.TxPauseEnabled == nil {
		return nil, false
	}
	return o.TxPauseEnabled, true
}

// HasTxPauseEnabled returns a boolean if a field has been set.
func (o *NetworkPauseSpec) HasTxPauseEnabled() bool {
	if o != nil && o.TxPauseEnabled != nil {
		return true
	}

	return false
}

// SetTxPauseEnabled gets a reference to the given bool and assigns it to the TxPauseEnabled field.
func (o *NetworkPauseSpec) SetTxPauseEnabled(v bool) {
	o.TxPauseEnabled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkPauseSpec) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPauseSpec) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkPauseSpec) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkPauseSpec) SetType(v string) {
	o.Type = &v
}

func (o NetworkPauseSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RxPauseEnabled != nil {
		toSerialize["rx-pause-enabled"] = o.RxPauseEnabled
	}
	if o.TxPauseEnabled != nil {
		toSerialize["tx-pause-enabled"] = o.TxPauseEnabled
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkPauseSpec struct {
	value *NetworkPauseSpec
	isSet bool
}

func (v NullableNetworkPauseSpec) Get() *NetworkPauseSpec {
	return v.value
}

func (v *NullableNetworkPauseSpec) Set(val *NetworkPauseSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkPauseSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkPauseSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkPauseSpec(val *NetworkPauseSpec) *NullableNetworkPauseSpec {
	return &NullableNetworkPauseSpec{value: val, isSet: true}
}

func (v NullableNetworkPauseSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkPauseSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


