/*
 * Browser API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// BrowserV1ApiService BrowserV1Api service
type BrowserV1ApiService service

type ApiBrowserGetQuery1Request struct {
	ctx _context.Context
	ApiService *BrowserV1ApiService
	tKind *string
	tApiVersion *string
	metaName *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
}

func (r ApiBrowserGetQuery1Request) TKind(tKind string) ApiBrowserGetQuery1Request {
	r.tKind = &tKind
	return r
}
func (r ApiBrowserGetQuery1Request) TApiVersion(tApiVersion string) ApiBrowserGetQuery1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiBrowserGetQuery1Request) MetaName(metaName string) ApiBrowserGetQuery1Request {
	r.metaName = &metaName
	return r
}
func (r ApiBrowserGetQuery1Request) MetaTenant(metaTenant string) ApiBrowserGetQuery1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiBrowserGetQuery1Request) MetaNamespace(metaNamespace string) ApiBrowserGetQuery1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiBrowserGetQuery1Request) MetaGenerationId(metaGenerationId string) ApiBrowserGetQuery1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiBrowserGetQuery1Request) MetaResourceVersion(metaResourceVersion string) ApiBrowserGetQuery1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiBrowserGetQuery1Request) MetaUuid(metaUuid string) ApiBrowserGetQuery1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiBrowserGetQuery1Request) MetaCreationTime(metaCreationTime time.Time) ApiBrowserGetQuery1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiBrowserGetQuery1Request) MetaModTime(metaModTime time.Time) ApiBrowserGetQuery1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiBrowserGetQuery1Request) MetaSelfLink(metaSelfLink string) ApiBrowserGetQuery1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}

func (r ApiBrowserGetQuery1Request) Execute() (BrowserBrowseResponseList, *_nethttp.Response, error) {
	return r.ApiService.GetQuery1Execute(r)
}

/*
 * GetQuery1 Method for GetQuery1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBrowserGetQuery1Request
 */
func (a *BrowserV1ApiService) GetQuery1(ctx _context.Context) ApiBrowserGetQuery1Request {
	return ApiBrowserGetQuery1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BrowserBrowseResponseList
 */
func (a *BrowserV1ApiService) GetQuery1Execute(r ApiBrowserGetQuery1Request) (BrowserBrowseResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BrowserBrowseResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BrowserV1ApiService.GetQuery1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/browser/v1/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetQuery1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBrowserGetReferencesRequest struct {
	ctx _context.Context
	ApiService *BrowserV1ApiService
	tKind *string
	tApiVersion *string
	metaName *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	bUri *string
	bQueryType *string
	bMaxDepth *int64
	bCountOnly *bool
	bKindFilters *[]string
}

func (r ApiBrowserGetReferencesRequest) TKind(tKind string) ApiBrowserGetReferencesRequest {
	r.tKind = &tKind
	return r
}
func (r ApiBrowserGetReferencesRequest) TApiVersion(tApiVersion string) ApiBrowserGetReferencesRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaName(metaName string) ApiBrowserGetReferencesRequest {
	r.metaName = &metaName
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaTenant(metaTenant string) ApiBrowserGetReferencesRequest {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaNamespace(metaNamespace string) ApiBrowserGetReferencesRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaGenerationId(metaGenerationId string) ApiBrowserGetReferencesRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaResourceVersion(metaResourceVersion string) ApiBrowserGetReferencesRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaUuid(metaUuid string) ApiBrowserGetReferencesRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaCreationTime(metaCreationTime time.Time) ApiBrowserGetReferencesRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaModTime(metaModTime time.Time) ApiBrowserGetReferencesRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiBrowserGetReferencesRequest) MetaSelfLink(metaSelfLink string) ApiBrowserGetReferencesRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiBrowserGetReferencesRequest) BUri(bUri string) ApiBrowserGetReferencesRequest {
	r.bUri = &bUri
	return r
}
func (r ApiBrowserGetReferencesRequest) BQueryType(bQueryType string) ApiBrowserGetReferencesRequest {
	r.bQueryType = &bQueryType
	return r
}
func (r ApiBrowserGetReferencesRequest) BMaxDepth(bMaxDepth int64) ApiBrowserGetReferencesRequest {
	r.bMaxDepth = &bMaxDepth
	return r
}
func (r ApiBrowserGetReferencesRequest) BCountOnly(bCountOnly bool) ApiBrowserGetReferencesRequest {
	r.bCountOnly = &bCountOnly
	return r
}
func (r ApiBrowserGetReferencesRequest) BKindFilters(bKindFilters []string) ApiBrowserGetReferencesRequest {
	r.bKindFilters = &bKindFilters
	return r
}

func (r ApiBrowserGetReferencesRequest) Execute() (BrowserBrowseResponse, *_nethttp.Response, error) {
	return r.ApiService.GetReferencesExecute(r)
}

/*
 * GetReferences Method for GetReferences
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBrowserGetReferencesRequest
 */
func (a *BrowserV1ApiService) GetReferences(ctx _context.Context) ApiBrowserGetReferencesRequest {
	return ApiBrowserGetReferencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BrowserBrowseResponse
 */
func (a *BrowserV1ApiService) GetReferencesExecute(r ApiBrowserGetReferencesRequest) (BrowserBrowseResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BrowserBrowseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BrowserV1ApiService.GetReferences")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/browser/v1/dependencies/**"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.bUri != nil {
		localVarQueryParams.Add("B.uri", parameterToString(*r.bUri, ""))
	}
	if r.bQueryType != nil {
		localVarQueryParams.Add("B.query-type", parameterToString(*r.bQueryType, ""))
	}
	if r.bMaxDepth != nil {
		localVarQueryParams.Add("B.max-depth", parameterToString(*r.bMaxDepth, ""))
	}
	if r.bCountOnly != nil {
		localVarQueryParams.Add("B.count-only", parameterToString(*r.bCountOnly, ""))
	}
	if r.bKindFilters != nil {
		localVarQueryParams.Add("B.kind-filters", parameterToString(*r.bKindFilters, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetReferencesExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBrowserGetReferrersRequest struct {
	ctx _context.Context
	ApiService *BrowserV1ApiService
	tKind *string
	tApiVersion *string
	metaName *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	bUri *string
	bQueryType *string
	bMaxDepth *int64
	bCountOnly *bool
	bKindFilters *[]string
}

func (r ApiBrowserGetReferrersRequest) TKind(tKind string) ApiBrowserGetReferrersRequest {
	r.tKind = &tKind
	return r
}
func (r ApiBrowserGetReferrersRequest) TApiVersion(tApiVersion string) ApiBrowserGetReferrersRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaName(metaName string) ApiBrowserGetReferrersRequest {
	r.metaName = &metaName
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaTenant(metaTenant string) ApiBrowserGetReferrersRequest {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaNamespace(metaNamespace string) ApiBrowserGetReferrersRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaGenerationId(metaGenerationId string) ApiBrowserGetReferrersRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaResourceVersion(metaResourceVersion string) ApiBrowserGetReferrersRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaUuid(metaUuid string) ApiBrowserGetReferrersRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaCreationTime(metaCreationTime time.Time) ApiBrowserGetReferrersRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaModTime(metaModTime time.Time) ApiBrowserGetReferrersRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiBrowserGetReferrersRequest) MetaSelfLink(metaSelfLink string) ApiBrowserGetReferrersRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiBrowserGetReferrersRequest) BUri(bUri string) ApiBrowserGetReferrersRequest {
	r.bUri = &bUri
	return r
}
func (r ApiBrowserGetReferrersRequest) BQueryType(bQueryType string) ApiBrowserGetReferrersRequest {
	r.bQueryType = &bQueryType
	return r
}
func (r ApiBrowserGetReferrersRequest) BMaxDepth(bMaxDepth int64) ApiBrowserGetReferrersRequest {
	r.bMaxDepth = &bMaxDepth
	return r
}
func (r ApiBrowserGetReferrersRequest) BCountOnly(bCountOnly bool) ApiBrowserGetReferrersRequest {
	r.bCountOnly = &bCountOnly
	return r
}
func (r ApiBrowserGetReferrersRequest) BKindFilters(bKindFilters []string) ApiBrowserGetReferrersRequest {
	r.bKindFilters = &bKindFilters
	return r
}

func (r ApiBrowserGetReferrersRequest) Execute() (BrowserBrowseResponse, *_nethttp.Response, error) {
	return r.ApiService.GetReferrersExecute(r)
}

/*
 * GetReferrers Method for GetReferrers
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBrowserGetReferrersRequest
 */
func (a *BrowserV1ApiService) GetReferrers(ctx _context.Context) ApiBrowserGetReferrersRequest {
	return ApiBrowserGetReferrersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BrowserBrowseResponse
 */
func (a *BrowserV1ApiService) GetReferrersExecute(r ApiBrowserGetReferrersRequest) (BrowserBrowseResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BrowserBrowseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BrowserV1ApiService.GetReferrers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/browser/v1/dependedby/**"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.bUri != nil {
		localVarQueryParams.Add("B.uri", parameterToString(*r.bUri, ""))
	}
	if r.bQueryType != nil {
		localVarQueryParams.Add("B.query-type", parameterToString(*r.bQueryType, ""))
	}
	if r.bMaxDepth != nil {
		localVarQueryParams.Add("B.max-depth", parameterToString(*r.bMaxDepth, ""))
	}
	if r.bCountOnly != nil {
		localVarQueryParams.Add("B.count-only", parameterToString(*r.bCountOnly, ""))
	}
	if r.bKindFilters != nil {
		localVarQueryParams.Add("B.kind-filters", parameterToString(*r.bKindFilters, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetReferrersExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBrowserPostQueryRequest struct {
	ctx _context.Context
	ApiService *BrowserV1ApiService
	body *BrowserBrowseRequestList
}

func (r ApiBrowserPostQueryRequest) Body(body BrowserBrowseRequestList) ApiBrowserPostQueryRequest {
	r.body = &body
	return r
}

func (r ApiBrowserPostQueryRequest) Execute() (BrowserBrowseResponseList, *_nethttp.Response, error) {
	return r.ApiService.PostQueryExecute(r)
}

/*
 * PostQuery Method for PostQuery
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBrowserPostQueryRequest
 */
func (a *BrowserV1ApiService) PostQuery(ctx _context.Context) ApiBrowserPostQueryRequest {
	return ApiBrowserPostQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BrowserBrowseResponseList
 */
func (a *BrowserV1ApiService) PostQueryExecute(r ApiBrowserPostQueryRequest) (BrowserBrowseResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BrowserBrowseResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BrowserV1ApiService.PostQuery")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/browser/v1/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.PostQueryExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
