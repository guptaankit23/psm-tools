/*
 * Diagnostics API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// DiagnosticsV1ApiService DiagnosticsV1Api service
type DiagnosticsV1ApiService service

type ApiDiagnosticsDebugRequest struct {
	ctx _context.Context
	ApiService *DiagnosticsV1ApiService
	oName string
	body *DiagnosticsDiagnosticsRequest
}

func (r ApiDiagnosticsDebugRequest) Body(body DiagnosticsDiagnosticsRequest) ApiDiagnosticsDebugRequest {
	r.body = &body
	return r
}

func (r ApiDiagnosticsDebugRequest) Execute() (DiagnosticsDiagnosticsResponse, *_nethttp.Response, error) {
	return r.ApiService.DebugExecute(r)
}

/*
 * Debug Request Diagnostics information for a module
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiDiagnosticsDebugRequest
 */
func (a *DiagnosticsV1ApiService) Debug(ctx _context.Context, oName string) ApiDiagnosticsDebugRequest {
	return ApiDiagnosticsDebugRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return DiagnosticsDiagnosticsResponse
 */
func (a *DiagnosticsV1ApiService) DebugExecute(r ApiDiagnosticsDebugRequest) (DiagnosticsDiagnosticsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DiagnosticsDiagnosticsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsV1ApiService.Debug")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/diagnostics/v1/modules/{O.Name}/Debug"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DebugExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDiagnosticsGetModuleRequest struct {
	ctx _context.Context
	ApiService *DiagnosticsV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specLogLevel *string
	specEnableTrace *bool
	specArgs *[]string
	statusNode *string
	statusModule *string
	statusCategory *string
	statusLastStart *time.Time
	statusRestartCount *int32
	statusLastRestartReason *string
	statusService *string
	statusMacAddress *string
}

func (r ApiDiagnosticsGetModuleRequest) TKind(tKind string) ApiDiagnosticsGetModuleRequest {
	r.tKind = &tKind
	return r
}
func (r ApiDiagnosticsGetModuleRequest) TApiVersion(tApiVersion string) ApiDiagnosticsGetModuleRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiDiagnosticsGetModuleRequest) MetaTenant(metaTenant string) ApiDiagnosticsGetModuleRequest {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiDiagnosticsGetModuleRequest) MetaNamespace(metaNamespace string) ApiDiagnosticsGetModuleRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiDiagnosticsGetModuleRequest) MetaGenerationId(metaGenerationId string) ApiDiagnosticsGetModuleRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiDiagnosticsGetModuleRequest) MetaResourceVersion(metaResourceVersion string) ApiDiagnosticsGetModuleRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiDiagnosticsGetModuleRequest) MetaUuid(metaUuid string) ApiDiagnosticsGetModuleRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiDiagnosticsGetModuleRequest) MetaCreationTime(metaCreationTime time.Time) ApiDiagnosticsGetModuleRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiDiagnosticsGetModuleRequest) MetaModTime(metaModTime time.Time) ApiDiagnosticsGetModuleRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiDiagnosticsGetModuleRequest) MetaSelfLink(metaSelfLink string) ApiDiagnosticsGetModuleRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiDiagnosticsGetModuleRequest) SpecLogLevel(specLogLevel string) ApiDiagnosticsGetModuleRequest {
	r.specLogLevel = &specLogLevel
	return r
}
func (r ApiDiagnosticsGetModuleRequest) SpecEnableTrace(specEnableTrace bool) ApiDiagnosticsGetModuleRequest {
	r.specEnableTrace = &specEnableTrace
	return r
}
func (r ApiDiagnosticsGetModuleRequest) SpecArgs(specArgs []string) ApiDiagnosticsGetModuleRequest {
	r.specArgs = &specArgs
	return r
}
func (r ApiDiagnosticsGetModuleRequest) StatusNode(statusNode string) ApiDiagnosticsGetModuleRequest {
	r.statusNode = &statusNode
	return r
}
func (r ApiDiagnosticsGetModuleRequest) StatusModule(statusModule string) ApiDiagnosticsGetModuleRequest {
	r.statusModule = &statusModule
	return r
}
func (r ApiDiagnosticsGetModuleRequest) StatusCategory(statusCategory string) ApiDiagnosticsGetModuleRequest {
	r.statusCategory = &statusCategory
	return r
}
func (r ApiDiagnosticsGetModuleRequest) StatusLastStart(statusLastStart time.Time) ApiDiagnosticsGetModuleRequest {
	r.statusLastStart = &statusLastStart
	return r
}
func (r ApiDiagnosticsGetModuleRequest) StatusRestartCount(statusRestartCount int32) ApiDiagnosticsGetModuleRequest {
	r.statusRestartCount = &statusRestartCount
	return r
}
func (r ApiDiagnosticsGetModuleRequest) StatusLastRestartReason(statusLastRestartReason string) ApiDiagnosticsGetModuleRequest {
	r.statusLastRestartReason = &statusLastRestartReason
	return r
}
func (r ApiDiagnosticsGetModuleRequest) StatusService(statusService string) ApiDiagnosticsGetModuleRequest {
	r.statusService = &statusService
	return r
}
func (r ApiDiagnosticsGetModuleRequest) StatusMacAddress(statusMacAddress string) ApiDiagnosticsGetModuleRequest {
	r.statusMacAddress = &statusMacAddress
	return r
}

func (r ApiDiagnosticsGetModuleRequest) Execute() (DiagnosticsModule, *_nethttp.Response, error) {
	return r.ApiService.GetModuleExecute(r)
}

/*
 * GetModule Get Module object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiDiagnosticsGetModuleRequest
 */
func (a *DiagnosticsV1ApiService) GetModule(ctx _context.Context, oName string) ApiDiagnosticsGetModuleRequest {
	return ApiDiagnosticsGetModuleRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return DiagnosticsModule
 */
func (a *DiagnosticsV1ApiService) GetModuleExecute(r ApiDiagnosticsGetModuleRequest) (DiagnosticsModule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DiagnosticsModule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsV1ApiService.GetModule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/diagnostics/v1/modules/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specLogLevel != nil {
		localVarQueryParams.Add("spec.log-level", parameterToString(*r.specLogLevel, ""))
	}
	if r.specEnableTrace != nil {
		localVarQueryParams.Add("spec.enable-trace", parameterToString(*r.specEnableTrace, ""))
	}
	if r.specArgs != nil {
		localVarQueryParams.Add("spec.args", parameterToString(*r.specArgs, "csv"))
	}
	if r.statusNode != nil {
		localVarQueryParams.Add("status.node", parameterToString(*r.statusNode, ""))
	}
	if r.statusModule != nil {
		localVarQueryParams.Add("status.module", parameterToString(*r.statusModule, ""))
	}
	if r.statusCategory != nil {
		localVarQueryParams.Add("status.category", parameterToString(*r.statusCategory, ""))
	}
	if r.statusLastStart != nil {
		localVarQueryParams.Add("status.last-start", parameterToString(*r.statusLastStart, ""))
	}
	if r.statusRestartCount != nil {
		localVarQueryParams.Add("status.restart-count", parameterToString(*r.statusRestartCount, ""))
	}
	if r.statusLastRestartReason != nil {
		localVarQueryParams.Add("status.last-restart-reason", parameterToString(*r.statusLastRestartReason, ""))
	}
	if r.statusService != nil {
		localVarQueryParams.Add("status.service", parameterToString(*r.statusService, ""))
	}
	if r.statusMacAddress != nil {
		localVarQueryParams.Add("status.mac-address", parameterToString(*r.statusMacAddress, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetModuleExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDiagnosticsLabelModuleRequest struct {
	ctx _context.Context
	ApiService *DiagnosticsV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiDiagnosticsLabelModuleRequest) Body(body ApiLabel) ApiDiagnosticsLabelModuleRequest {
	r.body = &body
	return r
}

func (r ApiDiagnosticsLabelModuleRequest) Execute() (DiagnosticsModule, *_nethttp.Response, error) {
	return r.ApiService.LabelModuleExecute(r)
}

/*
 * LabelModule Label Module object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiDiagnosticsLabelModuleRequest
 */
func (a *DiagnosticsV1ApiService) LabelModule(ctx _context.Context, oName string) ApiDiagnosticsLabelModuleRequest {
	return ApiDiagnosticsLabelModuleRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return DiagnosticsModule
 */
func (a *DiagnosticsV1ApiService) LabelModuleExecute(r ApiDiagnosticsLabelModuleRequest) (DiagnosticsModule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DiagnosticsModule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsV1ApiService.LabelModule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/diagnostics/v1/modules/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelModuleExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDiagnosticsListModuleRequest struct {
	ctx _context.Context
	ApiService *DiagnosticsV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiDiagnosticsListModuleRequest) OName(oName string) ApiDiagnosticsListModuleRequest {
	r.oName = &oName
	return r
}
func (r ApiDiagnosticsListModuleRequest) OTenant(oTenant string) ApiDiagnosticsListModuleRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiDiagnosticsListModuleRequest) ONamespace(oNamespace string) ApiDiagnosticsListModuleRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiDiagnosticsListModuleRequest) OGenerationId(oGenerationId string) ApiDiagnosticsListModuleRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiDiagnosticsListModuleRequest) OResourceVersion(oResourceVersion string) ApiDiagnosticsListModuleRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiDiagnosticsListModuleRequest) OUuid(oUuid string) ApiDiagnosticsListModuleRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiDiagnosticsListModuleRequest) OCreationTime(oCreationTime time.Time) ApiDiagnosticsListModuleRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiDiagnosticsListModuleRequest) OModTime(oModTime time.Time) ApiDiagnosticsListModuleRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiDiagnosticsListModuleRequest) OSelfLink(oSelfLink string) ApiDiagnosticsListModuleRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiDiagnosticsListModuleRequest) LabelSelector(labelSelector string) ApiDiagnosticsListModuleRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiDiagnosticsListModuleRequest) FieldSelector(fieldSelector string) ApiDiagnosticsListModuleRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiDiagnosticsListModuleRequest) FieldChangeSelector(fieldChangeSelector []string) ApiDiagnosticsListModuleRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiDiagnosticsListModuleRequest) From(from int32) ApiDiagnosticsListModuleRequest {
	r.from = &from
	return r
}
func (r ApiDiagnosticsListModuleRequest) MaxResults(maxResults int32) ApiDiagnosticsListModuleRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiDiagnosticsListModuleRequest) SortOrder(sortOrder string) ApiDiagnosticsListModuleRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiDiagnosticsListModuleRequest) MetaOnly(metaOnly bool) ApiDiagnosticsListModuleRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiDiagnosticsListModuleRequest) Execute() (DiagnosticsModuleList, *_nethttp.Response, error) {
	return r.ApiService.ListModuleExecute(r)
}

/*
 * ListModule List Module objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDiagnosticsListModuleRequest
 */
func (a *DiagnosticsV1ApiService) ListModule(ctx _context.Context) ApiDiagnosticsListModuleRequest {
	return ApiDiagnosticsListModuleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return DiagnosticsModuleList
 */
func (a *DiagnosticsV1ApiService) ListModuleExecute(r ApiDiagnosticsListModuleRequest) (DiagnosticsModuleList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DiagnosticsModuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsV1ApiService.ListModule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/diagnostics/v1/modules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListModuleExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDiagnosticsUpdateModuleRequest struct {
	ctx _context.Context
	ApiService *DiagnosticsV1ApiService
	oName string
	body *DiagnosticsModule
}

func (r ApiDiagnosticsUpdateModuleRequest) Body(body DiagnosticsModule) ApiDiagnosticsUpdateModuleRequest {
	r.body = &body
	return r
}

func (r ApiDiagnosticsUpdateModuleRequest) Execute() (DiagnosticsModule, *_nethttp.Response, error) {
	return r.ApiService.UpdateModuleExecute(r)
}

/*
 * UpdateModule Update Module object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiDiagnosticsUpdateModuleRequest
 */
func (a *DiagnosticsV1ApiService) UpdateModule(ctx _context.Context, oName string) ApiDiagnosticsUpdateModuleRequest {
	return ApiDiagnosticsUpdateModuleRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return DiagnosticsModule
 */
func (a *DiagnosticsV1ApiService) UpdateModuleExecute(r ApiDiagnosticsUpdateModuleRequest) (DiagnosticsModule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DiagnosticsModule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsV1ApiService.UpdateModule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/diagnostics/v1/modules/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateModuleExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDiagnosticsWatchModuleRequest struct {
	ctx _context.Context
	ApiService *DiagnosticsV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiDiagnosticsWatchModuleRequest) OName(oName string) ApiDiagnosticsWatchModuleRequest {
	r.oName = &oName
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) OTenant(oTenant string) ApiDiagnosticsWatchModuleRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) ONamespace(oNamespace string) ApiDiagnosticsWatchModuleRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) OGenerationId(oGenerationId string) ApiDiagnosticsWatchModuleRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) OResourceVersion(oResourceVersion string) ApiDiagnosticsWatchModuleRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) OUuid(oUuid string) ApiDiagnosticsWatchModuleRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) OCreationTime(oCreationTime time.Time) ApiDiagnosticsWatchModuleRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) OModTime(oModTime time.Time) ApiDiagnosticsWatchModuleRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) OSelfLink(oSelfLink string) ApiDiagnosticsWatchModuleRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) LabelSelector(labelSelector string) ApiDiagnosticsWatchModuleRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) FieldSelector(fieldSelector string) ApiDiagnosticsWatchModuleRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) FieldChangeSelector(fieldChangeSelector []string) ApiDiagnosticsWatchModuleRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) From(from int32) ApiDiagnosticsWatchModuleRequest {
	r.from = &from
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) MaxResults(maxResults int32) ApiDiagnosticsWatchModuleRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) SortOrder(sortOrder string) ApiDiagnosticsWatchModuleRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiDiagnosticsWatchModuleRequest) MetaOnly(metaOnly bool) ApiDiagnosticsWatchModuleRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiDiagnosticsWatchModuleRequest) Execute() (DiagnosticsAutoMsgModuleWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchModuleExecute(r)
}

/*
 * WatchModule Watch Module objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDiagnosticsWatchModuleRequest
 */
func (a *DiagnosticsV1ApiService) WatchModule(ctx _context.Context) ApiDiagnosticsWatchModuleRequest {
	return ApiDiagnosticsWatchModuleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return DiagnosticsAutoMsgModuleWatchHelper
 */
func (a *DiagnosticsV1ApiService) WatchModuleExecute(r ApiDiagnosticsWatchModuleRequest) (DiagnosticsAutoMsgModuleWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DiagnosticsAutoMsgModuleWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsV1ApiService.WatchModule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/diagnostics/v1/watch/modules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchModuleExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
