/*
 * Security API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SecurityFtp FTP ALG configuration.
type SecurityFtp struct {
	// Allow Mismatch IP Address in the payload compared to what is present in the IP header.
	AllowMismatchIpAddress *bool `json:"allow-mismatch-ip-address,omitempty"`
}

// NewSecurityFtp instantiates a new SecurityFtp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityFtp() *SecurityFtp {
	this := SecurityFtp{}
	return &this
}

// NewSecurityFtpWithDefaults instantiates a new SecurityFtp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityFtpWithDefaults() *SecurityFtp {
	this := SecurityFtp{}
	return &this
}

// GetAllowMismatchIpAddress returns the AllowMismatchIpAddress field value if set, zero value otherwise.
func (o *SecurityFtp) GetAllowMismatchIpAddress() bool {
	if o == nil || o.AllowMismatchIpAddress == nil {
		var ret bool
		return ret
	}
	return *o.AllowMismatchIpAddress
}

// GetAllowMismatchIpAddressOk returns a tuple with the AllowMismatchIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityFtp) GetAllowMismatchIpAddressOk() (*bool, bool) {
	if o == nil || o.AllowMismatchIpAddress == nil {
		return nil, false
	}
	return o.AllowMismatchIpAddress, true
}

// HasAllowMismatchIpAddress returns a boolean if a field has been set.
func (o *SecurityFtp) HasAllowMismatchIpAddress() bool {
	if o != nil && o.AllowMismatchIpAddress != nil {
		return true
	}

	return false
}

// SetAllowMismatchIpAddress gets a reference to the given bool and assigns it to the AllowMismatchIpAddress field.
func (o *SecurityFtp) SetAllowMismatchIpAddress(v bool) {
	o.AllowMismatchIpAddress = &v
}

func (o SecurityFtp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowMismatchIpAddress != nil {
		toSerialize["allow-mismatch-ip-address"] = o.AllowMismatchIpAddress
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityFtp struct {
	value *SecurityFtp
	isSet bool
}

func (v NullableSecurityFtp) Get() *SecurityFtp {
	return v.value
}

func (v *NullableSecurityFtp) Set(val *SecurityFtp) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityFtp) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityFtp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityFtp(val *SecurityFtp) *NullableSecurityFtp {
	return &NullableSecurityFtp{value: val, isSet: true}
}

func (v NullableSecurityFtp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityFtp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


