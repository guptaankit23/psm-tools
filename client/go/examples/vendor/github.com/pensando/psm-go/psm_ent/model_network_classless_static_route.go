/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkClasslessStaticRoute struct for NetworkClasslessStaticRoute
type NetworkClasslessStaticRoute struct {
	GatewayIp *string `json:"gateway-ip,omitempty"`
	Subnet *string `json:"subnet,omitempty"`
}

// NewNetworkClasslessStaticRoute instantiates a new NetworkClasslessStaticRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkClasslessStaticRoute() *NetworkClasslessStaticRoute {
	this := NetworkClasslessStaticRoute{}
	return &this
}

// NewNetworkClasslessStaticRouteWithDefaults instantiates a new NetworkClasslessStaticRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkClasslessStaticRouteWithDefaults() *NetworkClasslessStaticRoute {
	this := NetworkClasslessStaticRoute{}
	return &this
}

// GetGatewayIp returns the GatewayIp field value if set, zero value otherwise.
func (o *NetworkClasslessStaticRoute) GetGatewayIp() string {
	if o == nil || o.GatewayIp == nil {
		var ret string
		return ret
	}
	return *o.GatewayIp
}

// GetGatewayIpOk returns a tuple with the GatewayIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkClasslessStaticRoute) GetGatewayIpOk() (*string, bool) {
	if o == nil || o.GatewayIp == nil {
		return nil, false
	}
	return o.GatewayIp, true
}

// HasGatewayIp returns a boolean if a field has been set.
func (o *NetworkClasslessStaticRoute) HasGatewayIp() bool {
	if o != nil && o.GatewayIp != nil {
		return true
	}

	return false
}

// SetGatewayIp gets a reference to the given string and assigns it to the GatewayIp field.
func (o *NetworkClasslessStaticRoute) SetGatewayIp(v string) {
	o.GatewayIp = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *NetworkClasslessStaticRoute) GetSubnet() string {
	if o == nil || o.Subnet == nil {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkClasslessStaticRoute) GetSubnetOk() (*string, bool) {
	if o == nil || o.Subnet == nil {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *NetworkClasslessStaticRoute) HasSubnet() bool {
	if o != nil && o.Subnet != nil {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *NetworkClasslessStaticRoute) SetSubnet(v string) {
	o.Subnet = &v
}

func (o NetworkClasslessStaticRoute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GatewayIp != nil {
		toSerialize["gateway-ip"] = o.GatewayIp
	}
	if o.Subnet != nil {
		toSerialize["subnet"] = o.Subnet
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkClasslessStaticRoute struct {
	value *NetworkClasslessStaticRoute
	isSet bool
}

func (v NullableNetworkClasslessStaticRoute) Get() *NetworkClasslessStaticRoute {
	return v.value
}

func (v *NullableNetworkClasslessStaticRoute) Set(val *NetworkClasslessStaticRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkClasslessStaticRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkClasslessStaticRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkClasslessStaticRoute(val *NetworkClasslessStaticRoute) *NullableNetworkClasslessStaticRoute {
	return &NullableNetworkClasslessStaticRoute{value: val, isSet: true}
}

func (v NullableNetworkClasslessStaticRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkClasslessStaticRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


