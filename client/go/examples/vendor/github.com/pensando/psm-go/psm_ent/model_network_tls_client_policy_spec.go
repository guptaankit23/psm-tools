/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkTLSClientPolicySpec Service TLS configuration for connections initiated by the workload towards destinations inside or outside the cluster.
type NetworkTLSClientPolicySpec struct {
	// Valid DNS names or IP addresses that must appear in the server certificate SubjAltName or Common Name (if SAN is not specified). If not specified, client validates the IP address of the server.
	TlsClientAllowedPeerId *[]string `json:"tls-client-allowed-peer-id,omitempty"`
	// A map containing the certificate to use for a set of destinations. The key is a selector for workloads that exist either inside or outside the cluster. It can be based on labels, hostnames or \"IP:port\" pairs. The value is the name of the certificate to use for the selected destinations. The certificates \"usage\" field must contain \"client\". TODO: replace the first \"string\" type with proper selector type when available. A single \"default\" certificate which matches all destinations is allowed. If a destination matches multiple non-default map keys, an error is returned. If a destination does not match any map key (and there is no default), the outbound connection is initiated without TLS.
	TlsClientCertificatesSelector *map[string]string `json:"tls-client-certificates-selector,omitempty"`
	// The list of root certificates used to validate a trust chain presented by a server. If the list is empty, all roots certificates in the tenant scope are considered.
	TlsClientTrustRoots *[]string `json:"tls-client-trust-roots,omitempty"`
}

// NewNetworkTLSClientPolicySpec instantiates a new NetworkTLSClientPolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkTLSClientPolicySpec() *NetworkTLSClientPolicySpec {
	this := NetworkTLSClientPolicySpec{}
	return &this
}

// NewNetworkTLSClientPolicySpecWithDefaults instantiates a new NetworkTLSClientPolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTLSClientPolicySpecWithDefaults() *NetworkTLSClientPolicySpec {
	this := NetworkTLSClientPolicySpec{}
	return &this
}

// GetTlsClientAllowedPeerId returns the TlsClientAllowedPeerId field value if set, zero value otherwise.
func (o *NetworkTLSClientPolicySpec) GetTlsClientAllowedPeerId() []string {
	if o == nil || o.TlsClientAllowedPeerId == nil {
		var ret []string
		return ret
	}
	return *o.TlsClientAllowedPeerId
}

// GetTlsClientAllowedPeerIdOk returns a tuple with the TlsClientAllowedPeerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTLSClientPolicySpec) GetTlsClientAllowedPeerIdOk() (*[]string, bool) {
	if o == nil || o.TlsClientAllowedPeerId == nil {
		return nil, false
	}
	return o.TlsClientAllowedPeerId, true
}

// HasTlsClientAllowedPeerId returns a boolean if a field has been set.
func (o *NetworkTLSClientPolicySpec) HasTlsClientAllowedPeerId() bool {
	if o != nil && o.TlsClientAllowedPeerId != nil {
		return true
	}

	return false
}

// SetTlsClientAllowedPeerId gets a reference to the given []string and assigns it to the TlsClientAllowedPeerId field.
func (o *NetworkTLSClientPolicySpec) SetTlsClientAllowedPeerId(v []string) {
	o.TlsClientAllowedPeerId = &v
}

// GetTlsClientCertificatesSelector returns the TlsClientCertificatesSelector field value if set, zero value otherwise.
func (o *NetworkTLSClientPolicySpec) GetTlsClientCertificatesSelector() map[string]string {
	if o == nil || o.TlsClientCertificatesSelector == nil {
		var ret map[string]string
		return ret
	}
	return *o.TlsClientCertificatesSelector
}

// GetTlsClientCertificatesSelectorOk returns a tuple with the TlsClientCertificatesSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTLSClientPolicySpec) GetTlsClientCertificatesSelectorOk() (*map[string]string, bool) {
	if o == nil || o.TlsClientCertificatesSelector == nil {
		return nil, false
	}
	return o.TlsClientCertificatesSelector, true
}

// HasTlsClientCertificatesSelector returns a boolean if a field has been set.
func (o *NetworkTLSClientPolicySpec) HasTlsClientCertificatesSelector() bool {
	if o != nil && o.TlsClientCertificatesSelector != nil {
		return true
	}

	return false
}

// SetTlsClientCertificatesSelector gets a reference to the given map[string]string and assigns it to the TlsClientCertificatesSelector field.
func (o *NetworkTLSClientPolicySpec) SetTlsClientCertificatesSelector(v map[string]string) {
	o.TlsClientCertificatesSelector = &v
}

// GetTlsClientTrustRoots returns the TlsClientTrustRoots field value if set, zero value otherwise.
func (o *NetworkTLSClientPolicySpec) GetTlsClientTrustRoots() []string {
	if o == nil || o.TlsClientTrustRoots == nil {
		var ret []string
		return ret
	}
	return *o.TlsClientTrustRoots
}

// GetTlsClientTrustRootsOk returns a tuple with the TlsClientTrustRoots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTLSClientPolicySpec) GetTlsClientTrustRootsOk() (*[]string, bool) {
	if o == nil || o.TlsClientTrustRoots == nil {
		return nil, false
	}
	return o.TlsClientTrustRoots, true
}

// HasTlsClientTrustRoots returns a boolean if a field has been set.
func (o *NetworkTLSClientPolicySpec) HasTlsClientTrustRoots() bool {
	if o != nil && o.TlsClientTrustRoots != nil {
		return true
	}

	return false
}

// SetTlsClientTrustRoots gets a reference to the given []string and assigns it to the TlsClientTrustRoots field.
func (o *NetworkTLSClientPolicySpec) SetTlsClientTrustRoots(v []string) {
	o.TlsClientTrustRoots = &v
}

func (o NetworkTLSClientPolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TlsClientAllowedPeerId != nil {
		toSerialize["tls-client-allowed-peer-id"] = o.TlsClientAllowedPeerId
	}
	if o.TlsClientCertificatesSelector != nil {
		toSerialize["tls-client-certificates-selector"] = o.TlsClientCertificatesSelector
	}
	if o.TlsClientTrustRoots != nil {
		toSerialize["tls-client-trust-roots"] = o.TlsClientTrustRoots
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkTLSClientPolicySpec struct {
	value *NetworkTLSClientPolicySpec
	isSet bool
}

func (v NullableNetworkTLSClientPolicySpec) Get() *NetworkTLSClientPolicySpec {
	return v.value
}

func (v *NullableNetworkTLSClientPolicySpec) Set(val *NetworkTLSClientPolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTLSClientPolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTLSClientPolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTLSClientPolicySpec(val *NetworkTLSClientPolicySpec) *NullableNetworkTLSClientPolicySpec {
	return &NullableNetworkTLSClientPolicySpec{value: val, isSet: true}
}

func (v NullableNetworkTLSClientPolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTLSClientPolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


