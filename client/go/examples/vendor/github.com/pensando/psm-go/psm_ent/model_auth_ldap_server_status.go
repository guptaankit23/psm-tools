/*
 * Auth API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// AuthLdapServerStatus struct for AuthLdapServerStatus
type AuthLdapServerStatus struct {
	// The LDAP base DN to be used in a user search.
	BaseDn *string `json:"base-dn,omitempty"`
	// The bind DN is the string that Venice uses to log in to the LDAP server. Venice uses this account to validate the remote user attempting to log in. The base DN is the container name and path in the LDAPserver where Venice searches for the remote user account. This is where the password is validated. This contains the user authorization and assigned RBAC roles for use on Venice. Venice requests the attribute from theLDAP server.
	BindDn *string `json:"bind-dn,omitempty"`
	// The password for the LDAP database account specified in the Root DN field.
	BindPassword *string `json:"bind-password,omitempty"`
	// Message contains error message in case of failed check or a success message.
	Message *string `json:"message,omitempty"`
	// Result indicates if ldap check was successful.
	Result *string `json:"result,omitempty"`
	Server *AuthLdapServer `json:"server,omitempty"`
}

// NewAuthLdapServerStatus instantiates a new AuthLdapServerStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthLdapServerStatus() *AuthLdapServerStatus {
	this := AuthLdapServerStatus{}
	var result string = "connect-success"
	this.Result = &result
	return &this
}

// NewAuthLdapServerStatusWithDefaults instantiates a new AuthLdapServerStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthLdapServerStatusWithDefaults() *AuthLdapServerStatus {
	this := AuthLdapServerStatus{}
	var result string = "connect-success"
	this.Result = &result
	return &this
}

// GetBaseDn returns the BaseDn field value if set, zero value otherwise.
func (o *AuthLdapServerStatus) GetBaseDn() string {
	if o == nil || o.BaseDn == nil {
		var ret string
		return ret
	}
	return *o.BaseDn
}

// GetBaseDnOk returns a tuple with the BaseDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLdapServerStatus) GetBaseDnOk() (*string, bool) {
	if o == nil || o.BaseDn == nil {
		return nil, false
	}
	return o.BaseDn, true
}

// HasBaseDn returns a boolean if a field has been set.
func (o *AuthLdapServerStatus) HasBaseDn() bool {
	if o != nil && o.BaseDn != nil {
		return true
	}

	return false
}

// SetBaseDn gets a reference to the given string and assigns it to the BaseDn field.
func (o *AuthLdapServerStatus) SetBaseDn(v string) {
	o.BaseDn = &v
}

// GetBindDn returns the BindDn field value if set, zero value otherwise.
func (o *AuthLdapServerStatus) GetBindDn() string {
	if o == nil || o.BindDn == nil {
		var ret string
		return ret
	}
	return *o.BindDn
}

// GetBindDnOk returns a tuple with the BindDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLdapServerStatus) GetBindDnOk() (*string, bool) {
	if o == nil || o.BindDn == nil {
		return nil, false
	}
	return o.BindDn, true
}

// HasBindDn returns a boolean if a field has been set.
func (o *AuthLdapServerStatus) HasBindDn() bool {
	if o != nil && o.BindDn != nil {
		return true
	}

	return false
}

// SetBindDn gets a reference to the given string and assigns it to the BindDn field.
func (o *AuthLdapServerStatus) SetBindDn(v string) {
	o.BindDn = &v
}

// GetBindPassword returns the BindPassword field value if set, zero value otherwise.
func (o *AuthLdapServerStatus) GetBindPassword() string {
	if o == nil || o.BindPassword == nil {
		var ret string
		return ret
	}
	return *o.BindPassword
}

// GetBindPasswordOk returns a tuple with the BindPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLdapServerStatus) GetBindPasswordOk() (*string, bool) {
	if o == nil || o.BindPassword == nil {
		return nil, false
	}
	return o.BindPassword, true
}

// HasBindPassword returns a boolean if a field has been set.
func (o *AuthLdapServerStatus) HasBindPassword() bool {
	if o != nil && o.BindPassword != nil {
		return true
	}

	return false
}

// SetBindPassword gets a reference to the given string and assigns it to the BindPassword field.
func (o *AuthLdapServerStatus) SetBindPassword(v string) {
	o.BindPassword = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *AuthLdapServerStatus) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLdapServerStatus) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *AuthLdapServerStatus) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *AuthLdapServerStatus) SetMessage(v string) {
	o.Message = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *AuthLdapServerStatus) GetResult() string {
	if o == nil || o.Result == nil {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLdapServerStatus) GetResultOk() (*string, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *AuthLdapServerStatus) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *AuthLdapServerStatus) SetResult(v string) {
	o.Result = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *AuthLdapServerStatus) GetServer() AuthLdapServer {
	if o == nil || o.Server == nil {
		var ret AuthLdapServer
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLdapServerStatus) GetServerOk() (*AuthLdapServer, bool) {
	if o == nil || o.Server == nil {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *AuthLdapServerStatus) HasServer() bool {
	if o != nil && o.Server != nil {
		return true
	}

	return false
}

// SetServer gets a reference to the given AuthLdapServer and assigns it to the Server field.
func (o *AuthLdapServerStatus) SetServer(v AuthLdapServer) {
	o.Server = &v
}

func (o AuthLdapServerStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BaseDn != nil {
		toSerialize["base-dn"] = o.BaseDn
	}
	if o.BindDn != nil {
		toSerialize["bind-dn"] = o.BindDn
	}
	if o.BindPassword != nil {
		toSerialize["bind-password"] = o.BindPassword
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Server != nil {
		toSerialize["server"] = o.Server
	}
	return json.Marshal(toSerialize)
}

type NullableAuthLdapServerStatus struct {
	value *AuthLdapServerStatus
	isSet bool
}

func (v NullableAuthLdapServerStatus) Get() *AuthLdapServerStatus {
	return v.value
}

func (v *NullableAuthLdapServerStatus) Set(val *AuthLdapServerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthLdapServerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthLdapServerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthLdapServerStatus(val *AuthLdapServerStatus) *NullableAuthLdapServerStatus {
	return &NullableAuthLdapServerStatus{value: val, isSet: true}
}

func (v NullableAuthLdapServerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthLdapServerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


