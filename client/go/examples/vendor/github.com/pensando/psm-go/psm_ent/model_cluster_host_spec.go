/*
 * Cluster API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ClusterHostSpec HostSpec contains the configuration of the Host.
type ClusterHostSpec struct {
	// DSCs contains the information about all DistributedServiceCards on a host.
	Dscs *[]ClusterDistributedServiceCardID `json:"dscs,omitempty"`
	// information of the pnics associated with this host.
	PnicInfo *[]ClusterPnicInfo `json:"pnic-info,omitempty"`
}

// NewClusterHostSpec instantiates a new ClusterHostSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterHostSpec() *ClusterHostSpec {
	this := ClusterHostSpec{}
	return &this
}

// NewClusterHostSpecWithDefaults instantiates a new ClusterHostSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterHostSpecWithDefaults() *ClusterHostSpec {
	this := ClusterHostSpec{}
	return &this
}

// GetDscs returns the Dscs field value if set, zero value otherwise.
func (o *ClusterHostSpec) GetDscs() []ClusterDistributedServiceCardID {
	if o == nil || o.Dscs == nil {
		var ret []ClusterDistributedServiceCardID
		return ret
	}
	return *o.Dscs
}

// GetDscsOk returns a tuple with the Dscs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterHostSpec) GetDscsOk() (*[]ClusterDistributedServiceCardID, bool) {
	if o == nil || o.Dscs == nil {
		return nil, false
	}
	return o.Dscs, true
}

// HasDscs returns a boolean if a field has been set.
func (o *ClusterHostSpec) HasDscs() bool {
	if o != nil && o.Dscs != nil {
		return true
	}

	return false
}

// SetDscs gets a reference to the given []ClusterDistributedServiceCardID and assigns it to the Dscs field.
func (o *ClusterHostSpec) SetDscs(v []ClusterDistributedServiceCardID) {
	o.Dscs = &v
}

// GetPnicInfo returns the PnicInfo field value if set, zero value otherwise.
func (o *ClusterHostSpec) GetPnicInfo() []ClusterPnicInfo {
	if o == nil || o.PnicInfo == nil {
		var ret []ClusterPnicInfo
		return ret
	}
	return *o.PnicInfo
}

// GetPnicInfoOk returns a tuple with the PnicInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterHostSpec) GetPnicInfoOk() (*[]ClusterPnicInfo, bool) {
	if o == nil || o.PnicInfo == nil {
		return nil, false
	}
	return o.PnicInfo, true
}

// HasPnicInfo returns a boolean if a field has been set.
func (o *ClusterHostSpec) HasPnicInfo() bool {
	if o != nil && o.PnicInfo != nil {
		return true
	}

	return false
}

// SetPnicInfo gets a reference to the given []ClusterPnicInfo and assigns it to the PnicInfo field.
func (o *ClusterHostSpec) SetPnicInfo(v []ClusterPnicInfo) {
	o.PnicInfo = &v
}

func (o ClusterHostSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dscs != nil {
		toSerialize["dscs"] = o.Dscs
	}
	if o.PnicInfo != nil {
		toSerialize["pnic-info"] = o.PnicInfo
	}
	return json.Marshal(toSerialize)
}

type NullableClusterHostSpec struct {
	value *ClusterHostSpec
	isSet bool
}

func (v NullableClusterHostSpec) Get() *ClusterHostSpec {
	return v.value
}

func (v *NullableClusterHostSpec) Set(val *ClusterHostSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterHostSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterHostSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterHostSpec(val *ClusterHostSpec) *NullableClusterHostSpec {
	return &NullableClusterHostSpec{value: val, isSet: true}
}

func (v NullableClusterHostSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterHostSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


