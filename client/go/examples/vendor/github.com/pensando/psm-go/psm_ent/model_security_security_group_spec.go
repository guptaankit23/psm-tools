/*
 * Security API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SecuritySecurityGroupSpec security group configuration.
type SecuritySecurityGroupSpec struct {
	// list of CIDRs that are part of this security group.
	MatchPrefixes *[]string `json:"match-prefixes,omitempty"`
	// Service object selector.
	ServiceLabels *[]string `json:"service-labels,omitempty"`
	WorkloadSelector *LabelsSelector `json:"workload-selector,omitempty"`
}

// NewSecuritySecurityGroupSpec instantiates a new SecuritySecurityGroupSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecuritySecurityGroupSpec() *SecuritySecurityGroupSpec {
	this := SecuritySecurityGroupSpec{}
	return &this
}

// NewSecuritySecurityGroupSpecWithDefaults instantiates a new SecuritySecurityGroupSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecuritySecurityGroupSpecWithDefaults() *SecuritySecurityGroupSpec {
	this := SecuritySecurityGroupSpec{}
	return &this
}

// GetMatchPrefixes returns the MatchPrefixes field value if set, zero value otherwise.
func (o *SecuritySecurityGroupSpec) GetMatchPrefixes() []string {
	if o == nil || o.MatchPrefixes == nil {
		var ret []string
		return ret
	}
	return *o.MatchPrefixes
}

// GetMatchPrefixesOk returns a tuple with the MatchPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySecurityGroupSpec) GetMatchPrefixesOk() (*[]string, bool) {
	if o == nil || o.MatchPrefixes == nil {
		return nil, false
	}
	return o.MatchPrefixes, true
}

// HasMatchPrefixes returns a boolean if a field has been set.
func (o *SecuritySecurityGroupSpec) HasMatchPrefixes() bool {
	if o != nil && o.MatchPrefixes != nil {
		return true
	}

	return false
}

// SetMatchPrefixes gets a reference to the given []string and assigns it to the MatchPrefixes field.
func (o *SecuritySecurityGroupSpec) SetMatchPrefixes(v []string) {
	o.MatchPrefixes = &v
}

// GetServiceLabels returns the ServiceLabels field value if set, zero value otherwise.
func (o *SecuritySecurityGroupSpec) GetServiceLabels() []string {
	if o == nil || o.ServiceLabels == nil {
		var ret []string
		return ret
	}
	return *o.ServiceLabels
}

// GetServiceLabelsOk returns a tuple with the ServiceLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySecurityGroupSpec) GetServiceLabelsOk() (*[]string, bool) {
	if o == nil || o.ServiceLabels == nil {
		return nil, false
	}
	return o.ServiceLabels, true
}

// HasServiceLabels returns a boolean if a field has been set.
func (o *SecuritySecurityGroupSpec) HasServiceLabels() bool {
	if o != nil && o.ServiceLabels != nil {
		return true
	}

	return false
}

// SetServiceLabels gets a reference to the given []string and assigns it to the ServiceLabels field.
func (o *SecuritySecurityGroupSpec) SetServiceLabels(v []string) {
	o.ServiceLabels = &v
}

// GetWorkloadSelector returns the WorkloadSelector field value if set, zero value otherwise.
func (o *SecuritySecurityGroupSpec) GetWorkloadSelector() LabelsSelector {
	if o == nil || o.WorkloadSelector == nil {
		var ret LabelsSelector
		return ret
	}
	return *o.WorkloadSelector
}

// GetWorkloadSelectorOk returns a tuple with the WorkloadSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySecurityGroupSpec) GetWorkloadSelectorOk() (*LabelsSelector, bool) {
	if o == nil || o.WorkloadSelector == nil {
		return nil, false
	}
	return o.WorkloadSelector, true
}

// HasWorkloadSelector returns a boolean if a field has been set.
func (o *SecuritySecurityGroupSpec) HasWorkloadSelector() bool {
	if o != nil && o.WorkloadSelector != nil {
		return true
	}

	return false
}

// SetWorkloadSelector gets a reference to the given LabelsSelector and assigns it to the WorkloadSelector field.
func (o *SecuritySecurityGroupSpec) SetWorkloadSelector(v LabelsSelector) {
	o.WorkloadSelector = &v
}

func (o SecuritySecurityGroupSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MatchPrefixes != nil {
		toSerialize["match-prefixes"] = o.MatchPrefixes
	}
	if o.ServiceLabels != nil {
		toSerialize["service-labels"] = o.ServiceLabels
	}
	if o.WorkloadSelector != nil {
		toSerialize["workload-selector"] = o.WorkloadSelector
	}
	return json.Marshal(toSerialize)
}

type NullableSecuritySecurityGroupSpec struct {
	value *SecuritySecurityGroupSpec
	isSet bool
}

func (v NullableSecuritySecurityGroupSpec) Get() *SecuritySecurityGroupSpec {
	return v.value
}

func (v *NullableSecuritySecurityGroupSpec) Set(val *SecuritySecurityGroupSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSecuritySecurityGroupSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSecuritySecurityGroupSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecuritySecurityGroupSpec(val *SecuritySecurityGroupSpec) *NullableSecuritySecurityGroupSpec {
	return &NullableSecuritySecurityGroupSpec{value: val, isSet: true}
}

func (v NullableSecuritySecurityGroupSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecuritySecurityGroupSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


