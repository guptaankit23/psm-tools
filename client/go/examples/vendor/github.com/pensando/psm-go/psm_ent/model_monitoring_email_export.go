/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringEmailExport struct for MonitoringEmailExport
type MonitoringEmailExport struct {
	// TODO:  format, config, SMTP config.
	EmailList *[]string `json:"email-list,omitempty"`
}

// NewMonitoringEmailExport instantiates a new MonitoringEmailExport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringEmailExport() *MonitoringEmailExport {
	this := MonitoringEmailExport{}
	return &this
}

// NewMonitoringEmailExportWithDefaults instantiates a new MonitoringEmailExport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringEmailExportWithDefaults() *MonitoringEmailExport {
	this := MonitoringEmailExport{}
	return &this
}

// GetEmailList returns the EmailList field value if set, zero value otherwise.
func (o *MonitoringEmailExport) GetEmailList() []string {
	if o == nil || o.EmailList == nil {
		var ret []string
		return ret
	}
	return *o.EmailList
}

// GetEmailListOk returns a tuple with the EmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringEmailExport) GetEmailListOk() (*[]string, bool) {
	if o == nil || o.EmailList == nil {
		return nil, false
	}
	return o.EmailList, true
}

// HasEmailList returns a boolean if a field has been set.
func (o *MonitoringEmailExport) HasEmailList() bool {
	if o != nil && o.EmailList != nil {
		return true
	}

	return false
}

// SetEmailList gets a reference to the given []string and assigns it to the EmailList field.
func (o *MonitoringEmailExport) SetEmailList(v []string) {
	o.EmailList = &v
}

func (o MonitoringEmailExport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailList != nil {
		toSerialize["email-list"] = o.EmailList
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringEmailExport struct {
	value *MonitoringEmailExport
	isSet bool
}

func (v NullableMonitoringEmailExport) Get() *MonitoringEmailExport {
	return v.value
}

func (v *NullableMonitoringEmailExport) Set(val *MonitoringEmailExport) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringEmailExport) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringEmailExport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringEmailExport(val *MonitoringEmailExport) *NullableMonitoringEmailExport {
	return &NullableMonitoringEmailExport{value: val, isSet: true}
}

func (v NullableMonitoringEmailExport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringEmailExport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


