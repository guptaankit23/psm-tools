/*
 * Objstore API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ObjstoreObjectSpec struct for ObjstoreObjectSpec
type ObjstoreObjectSpec struct {
	// Content-Type for the stored object. Can either be specified when uploading. or the backend guesses one if possible.
	ContentType *string `json:"content-type,omitempty"`
}

// NewObjstoreObjectSpec instantiates a new ObjstoreObjectSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjstoreObjectSpec() *ObjstoreObjectSpec {
	this := ObjstoreObjectSpec{}
	return &this
}

// NewObjstoreObjectSpecWithDefaults instantiates a new ObjstoreObjectSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjstoreObjectSpecWithDefaults() *ObjstoreObjectSpec {
	this := ObjstoreObjectSpec{}
	return &this
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *ObjstoreObjectSpec) GetContentType() string {
	if o == nil || o.ContentType == nil {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjstoreObjectSpec) GetContentTypeOk() (*string, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *ObjstoreObjectSpec) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *ObjstoreObjectSpec) SetContentType(v string) {
	o.ContentType = &v
}

func (o ObjstoreObjectSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContentType != nil {
		toSerialize["content-type"] = o.ContentType
	}
	return json.Marshal(toSerialize)
}

type NullableObjstoreObjectSpec struct {
	value *ObjstoreObjectSpec
	isSet bool
}

func (v NullableObjstoreObjectSpec) Get() *ObjstoreObjectSpec {
	return v.value
}

func (v *NullableObjstoreObjectSpec) Set(val *ObjstoreObjectSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableObjstoreObjectSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableObjstoreObjectSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjstoreObjectSpec(val *ObjstoreObjectSpec) *NullableObjstoreObjectSpec {
	return &NullableObjstoreObjectSpec{value: val, isSet: true}
}

func (v NullableObjstoreObjectSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjstoreObjectSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


