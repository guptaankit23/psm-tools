/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkHealthCheckSpec struct for NetworkHealthCheckSpec
type NetworkHealthCheckSpec struct {
	// # of successful probes before we declare the backend back up.
	DeclareHealthyCount *int64 `json:"declare-healthy-count,omitempty"`
	// Health check interval.
	Interval *int64 `json:"interval,omitempty"`
	// timeout for declaring backend down.
	MaxTimeouts *int64 `json:"max-timeouts,omitempty"`
	// probe URL.
	ProbePortOrUrl *string `json:"probe-port-or-url,omitempty"`
	// # of probes per interval.
	ProbesPerInterval *int64 `json:"probes-per-interval,omitempty"`
}

// NewNetworkHealthCheckSpec instantiates a new NetworkHealthCheckSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkHealthCheckSpec() *NetworkHealthCheckSpec {
	this := NetworkHealthCheckSpec{}
	return &this
}

// NewNetworkHealthCheckSpecWithDefaults instantiates a new NetworkHealthCheckSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkHealthCheckSpecWithDefaults() *NetworkHealthCheckSpec {
	this := NetworkHealthCheckSpec{}
	return &this
}

// GetDeclareHealthyCount returns the DeclareHealthyCount field value if set, zero value otherwise.
func (o *NetworkHealthCheckSpec) GetDeclareHealthyCount() int64 {
	if o == nil || o.DeclareHealthyCount == nil {
		var ret int64
		return ret
	}
	return *o.DeclareHealthyCount
}

// GetDeclareHealthyCountOk returns a tuple with the DeclareHealthyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHealthCheckSpec) GetDeclareHealthyCountOk() (*int64, bool) {
	if o == nil || o.DeclareHealthyCount == nil {
		return nil, false
	}
	return o.DeclareHealthyCount, true
}

// HasDeclareHealthyCount returns a boolean if a field has been set.
func (o *NetworkHealthCheckSpec) HasDeclareHealthyCount() bool {
	if o != nil && o.DeclareHealthyCount != nil {
		return true
	}

	return false
}

// SetDeclareHealthyCount gets a reference to the given int64 and assigns it to the DeclareHealthyCount field.
func (o *NetworkHealthCheckSpec) SetDeclareHealthyCount(v int64) {
	o.DeclareHealthyCount = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *NetworkHealthCheckSpec) GetInterval() int64 {
	if o == nil || o.Interval == nil {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHealthCheckSpec) GetIntervalOk() (*int64, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *NetworkHealthCheckSpec) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *NetworkHealthCheckSpec) SetInterval(v int64) {
	o.Interval = &v
}

// GetMaxTimeouts returns the MaxTimeouts field value if set, zero value otherwise.
func (o *NetworkHealthCheckSpec) GetMaxTimeouts() int64 {
	if o == nil || o.MaxTimeouts == nil {
		var ret int64
		return ret
	}
	return *o.MaxTimeouts
}

// GetMaxTimeoutsOk returns a tuple with the MaxTimeouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHealthCheckSpec) GetMaxTimeoutsOk() (*int64, bool) {
	if o == nil || o.MaxTimeouts == nil {
		return nil, false
	}
	return o.MaxTimeouts, true
}

// HasMaxTimeouts returns a boolean if a field has been set.
func (o *NetworkHealthCheckSpec) HasMaxTimeouts() bool {
	if o != nil && o.MaxTimeouts != nil {
		return true
	}

	return false
}

// SetMaxTimeouts gets a reference to the given int64 and assigns it to the MaxTimeouts field.
func (o *NetworkHealthCheckSpec) SetMaxTimeouts(v int64) {
	o.MaxTimeouts = &v
}

// GetProbePortOrUrl returns the ProbePortOrUrl field value if set, zero value otherwise.
func (o *NetworkHealthCheckSpec) GetProbePortOrUrl() string {
	if o == nil || o.ProbePortOrUrl == nil {
		var ret string
		return ret
	}
	return *o.ProbePortOrUrl
}

// GetProbePortOrUrlOk returns a tuple with the ProbePortOrUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHealthCheckSpec) GetProbePortOrUrlOk() (*string, bool) {
	if o == nil || o.ProbePortOrUrl == nil {
		return nil, false
	}
	return o.ProbePortOrUrl, true
}

// HasProbePortOrUrl returns a boolean if a field has been set.
func (o *NetworkHealthCheckSpec) HasProbePortOrUrl() bool {
	if o != nil && o.ProbePortOrUrl != nil {
		return true
	}

	return false
}

// SetProbePortOrUrl gets a reference to the given string and assigns it to the ProbePortOrUrl field.
func (o *NetworkHealthCheckSpec) SetProbePortOrUrl(v string) {
	o.ProbePortOrUrl = &v
}

// GetProbesPerInterval returns the ProbesPerInterval field value if set, zero value otherwise.
func (o *NetworkHealthCheckSpec) GetProbesPerInterval() int64 {
	if o == nil || o.ProbesPerInterval == nil {
		var ret int64
		return ret
	}
	return *o.ProbesPerInterval
}

// GetProbesPerIntervalOk returns a tuple with the ProbesPerInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHealthCheckSpec) GetProbesPerIntervalOk() (*int64, bool) {
	if o == nil || o.ProbesPerInterval == nil {
		return nil, false
	}
	return o.ProbesPerInterval, true
}

// HasProbesPerInterval returns a boolean if a field has been set.
func (o *NetworkHealthCheckSpec) HasProbesPerInterval() bool {
	if o != nil && o.ProbesPerInterval != nil {
		return true
	}

	return false
}

// SetProbesPerInterval gets a reference to the given int64 and assigns it to the ProbesPerInterval field.
func (o *NetworkHealthCheckSpec) SetProbesPerInterval(v int64) {
	o.ProbesPerInterval = &v
}

func (o NetworkHealthCheckSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeclareHealthyCount != nil {
		toSerialize["declare-healthy-count"] = o.DeclareHealthyCount
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.MaxTimeouts != nil {
		toSerialize["max-timeouts"] = o.MaxTimeouts
	}
	if o.ProbePortOrUrl != nil {
		toSerialize["probe-port-or-url"] = o.ProbePortOrUrl
	}
	if o.ProbesPerInterval != nil {
		toSerialize["probes-per-interval"] = o.ProbesPerInterval
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkHealthCheckSpec struct {
	value *NetworkHealthCheckSpec
	isSet bool
}

func (v NullableNetworkHealthCheckSpec) Get() *NetworkHealthCheckSpec {
	return v.value
}

func (v *NullableNetworkHealthCheckSpec) Set(val *NetworkHealthCheckSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkHealthCheckSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkHealthCheckSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkHealthCheckSpec(val *NetworkHealthCheckSpec) *NullableNetworkHealthCheckSpec {
	return &NullableNetworkHealthCheckSpec{value: val, isSet: true}
}

func (v NullableNetworkHealthCheckSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkHealthCheckSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


