/*
 * Telemetry_query API reference
 *
 * Service name  
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ApiInterface struct for ApiInterface
type ApiInterface struct {
	Bool *bool `json:"Bool,omitempty"`
	Float *float64 `json:"Float,omitempty"`
	Int64 *string `json:"Int64,omitempty"`
	Interfaces *ApiInterfaceSlice `json:"Interfaces,omitempty"`
	Str *string `json:"Str,omitempty"`
}

// NewApiInterface instantiates a new ApiInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiInterface() *ApiInterface {
	this := ApiInterface{}
	return &this
}

// NewApiInterfaceWithDefaults instantiates a new ApiInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiInterfaceWithDefaults() *ApiInterface {
	this := ApiInterface{}
	return &this
}

// GetBool returns the Bool field value if set, zero value otherwise.
func (o *ApiInterface) GetBool() bool {
	if o == nil || o.Bool == nil {
		var ret bool
		return ret
	}
	return *o.Bool
}

// GetBoolOk returns a tuple with the Bool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInterface) GetBoolOk() (*bool, bool) {
	if o == nil || o.Bool == nil {
		return nil, false
	}
	return o.Bool, true
}

// HasBool returns a boolean if a field has been set.
func (o *ApiInterface) HasBool() bool {
	if o != nil && o.Bool != nil {
		return true
	}

	return false
}

// SetBool gets a reference to the given bool and assigns it to the Bool field.
func (o *ApiInterface) SetBool(v bool) {
	o.Bool = &v
}

// GetFloat returns the Float field value if set, zero value otherwise.
func (o *ApiInterface) GetFloat() float64 {
	if o == nil || o.Float == nil {
		var ret float64
		return ret
	}
	return *o.Float
}

// GetFloatOk returns a tuple with the Float field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInterface) GetFloatOk() (*float64, bool) {
	if o == nil || o.Float == nil {
		return nil, false
	}
	return o.Float, true
}

// HasFloat returns a boolean if a field has been set.
func (o *ApiInterface) HasFloat() bool {
	if o != nil && o.Float != nil {
		return true
	}

	return false
}

// SetFloat gets a reference to the given float64 and assigns it to the Float field.
func (o *ApiInterface) SetFloat(v float64) {
	o.Float = &v
}

// GetInt64 returns the Int64 field value if set, zero value otherwise.
func (o *ApiInterface) GetInt64() string {
	if o == nil || o.Int64 == nil {
		var ret string
		return ret
	}
	return *o.Int64
}

// GetInt64Ok returns a tuple with the Int64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInterface) GetInt64Ok() (*string, bool) {
	if o == nil || o.Int64 == nil {
		return nil, false
	}
	return o.Int64, true
}

// HasInt64 returns a boolean if a field has been set.
func (o *ApiInterface) HasInt64() bool {
	if o != nil && o.Int64 != nil {
		return true
	}

	return false
}

// SetInt64 gets a reference to the given string and assigns it to the Int64 field.
func (o *ApiInterface) SetInt64(v string) {
	o.Int64 = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *ApiInterface) GetInterfaces() ApiInterfaceSlice {
	if o == nil || o.Interfaces == nil {
		var ret ApiInterfaceSlice
		return ret
	}
	return *o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInterface) GetInterfacesOk() (*ApiInterfaceSlice, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *ApiInterface) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given ApiInterfaceSlice and assigns it to the Interfaces field.
func (o *ApiInterface) SetInterfaces(v ApiInterfaceSlice) {
	o.Interfaces = &v
}

// GetStr returns the Str field value if set, zero value otherwise.
func (o *ApiInterface) GetStr() string {
	if o == nil || o.Str == nil {
		var ret string
		return ret
	}
	return *o.Str
}

// GetStrOk returns a tuple with the Str field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInterface) GetStrOk() (*string, bool) {
	if o == nil || o.Str == nil {
		return nil, false
	}
	return o.Str, true
}

// HasStr returns a boolean if a field has been set.
func (o *ApiInterface) HasStr() bool {
	if o != nil && o.Str != nil {
		return true
	}

	return false
}

// SetStr gets a reference to the given string and assigns it to the Str field.
func (o *ApiInterface) SetStr(v string) {
	o.Str = &v
}

func (o ApiInterface) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bool != nil {
		toSerialize["Bool"] = o.Bool
	}
	if o.Float != nil {
		toSerialize["Float"] = o.Float
	}
	if o.Int64 != nil {
		toSerialize["Int64"] = o.Int64
	}
	if o.Interfaces != nil {
		toSerialize["Interfaces"] = o.Interfaces
	}
	if o.Str != nil {
		toSerialize["Str"] = o.Str
	}
	return json.Marshal(toSerialize)
}

type NullableApiInterface struct {
	value *ApiInterface
	isSet bool
}

func (v NullableApiInterface) Get() *ApiInterface {
	return v.value
}

func (v *NullableApiInterface) Set(val *ApiInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableApiInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableApiInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiInterface(val *ApiInterface) *NullableApiInterface {
	return &NullableApiInterface{value: val, isSet: true}
}

func (v NullableApiInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


