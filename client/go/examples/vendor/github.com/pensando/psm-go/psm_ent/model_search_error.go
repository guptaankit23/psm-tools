/*
 * Search API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SearchError Error contains the error code, description and associated details.
type SearchError struct {
	// Reason or description of the failure.
	Reason *string `json:"reason,omitempty"`
	// Type of error.
	Type *string `json:"type,omitempty"`
}

// NewSearchError instantiates a new SearchError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchError() *SearchError {
	this := SearchError{}
	return &this
}

// NewSearchErrorWithDefaults instantiates a new SearchError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchErrorWithDefaults() *SearchError {
	this := SearchError{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *SearchError) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchError) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *SearchError) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *SearchError) SetReason(v string) {
	o.Reason = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchError) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchError) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchError) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SearchError) SetType(v string) {
	o.Type = &v
}

func (o SearchError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSearchError struct {
	value *SearchError
	isSet bool
}

func (v NullableSearchError) Get() *SearchError {
	return v.value
}

func (v *NullableSearchError) Set(val *SearchError) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchError) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchError(val *SearchError) *NullableSearchError {
	return &NullableSearchError{value: val, isSet: true}
}

func (v NullableSearchError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


