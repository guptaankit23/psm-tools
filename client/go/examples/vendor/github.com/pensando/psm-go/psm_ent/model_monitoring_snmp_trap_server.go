/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringSNMPTrapServer SNMPTrapServer contains the configuration for sending SNMP traps to a receiver.
type MonitoringSNMPTrapServer struct {
	AuthConfig *MonitoringAuthConfig `json:"auth-config,omitempty"`
	// CommunityOrUser contains community string for v2c, user for v3.
	CommunityOrUser *string `json:"community-or-user,omitempty"`
	// Host where the trap needs to be sent.
	Host *string `json:"host,omitempty"`
	// Port on the Host where the trap needs to be sent, default is 162.
	Port *string `json:"port,omitempty"`
	PrivacyConfig *MonitoringPrivacyConfig `json:"privacy-config,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewMonitoringSNMPTrapServer instantiates a new MonitoringSNMPTrapServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringSNMPTrapServer() *MonitoringSNMPTrapServer {
	this := MonitoringSNMPTrapServer{}
	var port string = "162"
	this.Port = &port
	var version string = "v2c"
	this.Version = &version
	return &this
}

// NewMonitoringSNMPTrapServerWithDefaults instantiates a new MonitoringSNMPTrapServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringSNMPTrapServerWithDefaults() *MonitoringSNMPTrapServer {
	this := MonitoringSNMPTrapServer{}
	var port string = "162"
	this.Port = &port
	var version string = "v2c"
	this.Version = &version
	return &this
}

// GetAuthConfig returns the AuthConfig field value if set, zero value otherwise.
func (o *MonitoringSNMPTrapServer) GetAuthConfig() MonitoringAuthConfig {
	if o == nil || o.AuthConfig == nil {
		var ret MonitoringAuthConfig
		return ret
	}
	return *o.AuthConfig
}

// GetAuthConfigOk returns a tuple with the AuthConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringSNMPTrapServer) GetAuthConfigOk() (*MonitoringAuthConfig, bool) {
	if o == nil || o.AuthConfig == nil {
		return nil, false
	}
	return o.AuthConfig, true
}

// HasAuthConfig returns a boolean if a field has been set.
func (o *MonitoringSNMPTrapServer) HasAuthConfig() bool {
	if o != nil && o.AuthConfig != nil {
		return true
	}

	return false
}

// SetAuthConfig gets a reference to the given MonitoringAuthConfig and assigns it to the AuthConfig field.
func (o *MonitoringSNMPTrapServer) SetAuthConfig(v MonitoringAuthConfig) {
	o.AuthConfig = &v
}

// GetCommunityOrUser returns the CommunityOrUser field value if set, zero value otherwise.
func (o *MonitoringSNMPTrapServer) GetCommunityOrUser() string {
	if o == nil || o.CommunityOrUser == nil {
		var ret string
		return ret
	}
	return *o.CommunityOrUser
}

// GetCommunityOrUserOk returns a tuple with the CommunityOrUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringSNMPTrapServer) GetCommunityOrUserOk() (*string, bool) {
	if o == nil || o.CommunityOrUser == nil {
		return nil, false
	}
	return o.CommunityOrUser, true
}

// HasCommunityOrUser returns a boolean if a field has been set.
func (o *MonitoringSNMPTrapServer) HasCommunityOrUser() bool {
	if o != nil && o.CommunityOrUser != nil {
		return true
	}

	return false
}

// SetCommunityOrUser gets a reference to the given string and assigns it to the CommunityOrUser field.
func (o *MonitoringSNMPTrapServer) SetCommunityOrUser(v string) {
	o.CommunityOrUser = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *MonitoringSNMPTrapServer) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringSNMPTrapServer) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *MonitoringSNMPTrapServer) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *MonitoringSNMPTrapServer) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *MonitoringSNMPTrapServer) GetPort() string {
	if o == nil || o.Port == nil {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringSNMPTrapServer) GetPortOk() (*string, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *MonitoringSNMPTrapServer) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *MonitoringSNMPTrapServer) SetPort(v string) {
	o.Port = &v
}

// GetPrivacyConfig returns the PrivacyConfig field value if set, zero value otherwise.
func (o *MonitoringSNMPTrapServer) GetPrivacyConfig() MonitoringPrivacyConfig {
	if o == nil || o.PrivacyConfig == nil {
		var ret MonitoringPrivacyConfig
		return ret
	}
	return *o.PrivacyConfig
}

// GetPrivacyConfigOk returns a tuple with the PrivacyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringSNMPTrapServer) GetPrivacyConfigOk() (*MonitoringPrivacyConfig, bool) {
	if o == nil || o.PrivacyConfig == nil {
		return nil, false
	}
	return o.PrivacyConfig, true
}

// HasPrivacyConfig returns a boolean if a field has been set.
func (o *MonitoringSNMPTrapServer) HasPrivacyConfig() bool {
	if o != nil && o.PrivacyConfig != nil {
		return true
	}

	return false
}

// SetPrivacyConfig gets a reference to the given MonitoringPrivacyConfig and assigns it to the PrivacyConfig field.
func (o *MonitoringSNMPTrapServer) SetPrivacyConfig(v MonitoringPrivacyConfig) {
	o.PrivacyConfig = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MonitoringSNMPTrapServer) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringSNMPTrapServer) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MonitoringSNMPTrapServer) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MonitoringSNMPTrapServer) SetVersion(v string) {
	o.Version = &v
}

func (o MonitoringSNMPTrapServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthConfig != nil {
		toSerialize["auth-config"] = o.AuthConfig
	}
	if o.CommunityOrUser != nil {
		toSerialize["community-or-user"] = o.CommunityOrUser
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.PrivacyConfig != nil {
		toSerialize["privacy-config"] = o.PrivacyConfig
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringSNMPTrapServer struct {
	value *MonitoringSNMPTrapServer
	isSet bool
}

func (v NullableMonitoringSNMPTrapServer) Get() *MonitoringSNMPTrapServer {
	return v.value
}

func (v *NullableMonitoringSNMPTrapServer) Set(val *MonitoringSNMPTrapServer) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringSNMPTrapServer) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringSNMPTrapServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringSNMPTrapServer(val *MonitoringSNMPTrapServer) *NullableMonitoringSNMPTrapServer {
	return &NullableMonitoringSNMPTrapServer{value: val, isSet: true}
}

func (v NullableMonitoringSNMPTrapServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringSNMPTrapServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


