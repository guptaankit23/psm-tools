/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
	"time"
)

// MonitoringTimeWindow struct for MonitoringTimeWindow
type MonitoringTimeWindow struct {
	// Start/Stop Time - when start time is not specified, it implies start NOW.
	StartTime *time.Time `json:"start-time,omitempty"`
	// Stop time - when not specified, default will be used.
	StopTime *time.Time `json:"stop-time,omitempty"`
}

// NewMonitoringTimeWindow instantiates a new MonitoringTimeWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringTimeWindow() *MonitoringTimeWindow {
	this := MonitoringTimeWindow{}
	return &this
}

// NewMonitoringTimeWindowWithDefaults instantiates a new MonitoringTimeWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringTimeWindowWithDefaults() *MonitoringTimeWindow {
	this := MonitoringTimeWindow{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *MonitoringTimeWindow) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTimeWindow) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *MonitoringTimeWindow) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *MonitoringTimeWindow) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetStopTime returns the StopTime field value if set, zero value otherwise.
func (o *MonitoringTimeWindow) GetStopTime() time.Time {
	if o == nil || o.StopTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StopTime
}

// GetStopTimeOk returns a tuple with the StopTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTimeWindow) GetStopTimeOk() (*time.Time, bool) {
	if o == nil || o.StopTime == nil {
		return nil, false
	}
	return o.StopTime, true
}

// HasStopTime returns a boolean if a field has been set.
func (o *MonitoringTimeWindow) HasStopTime() bool {
	if o != nil && o.StopTime != nil {
		return true
	}

	return false
}

// SetStopTime gets a reference to the given time.Time and assigns it to the StopTime field.
func (o *MonitoringTimeWindow) SetStopTime(v time.Time) {
	o.StopTime = &v
}

func (o MonitoringTimeWindow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartTime != nil {
		toSerialize["start-time"] = o.StartTime
	}
	if o.StopTime != nil {
		toSerialize["stop-time"] = o.StopTime
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringTimeWindow struct {
	value *MonitoringTimeWindow
	isSet bool
}

func (v NullableMonitoringTimeWindow) Get() *MonitoringTimeWindow {
	return v.value
}

func (v *NullableMonitoringTimeWindow) Set(val *MonitoringTimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringTimeWindow(val *MonitoringTimeWindow) *NullableMonitoringTimeWindow {
	return &NullableMonitoringTimeWindow{value: val, isSet: true}
}

func (v NullableMonitoringTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


