/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// TechSupportRequestSpecNodeSelectorSpec struct for TechSupportRequestSpecNodeSelectorSpec
type TechSupportRequestSpecNodeSelectorSpec struct {
	Labels *LabelsSelector `json:"labels,omitempty"`
	Names *[]string `json:"names,omitempty"`
}

// NewTechSupportRequestSpecNodeSelectorSpec instantiates a new TechSupportRequestSpecNodeSelectorSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTechSupportRequestSpecNodeSelectorSpec() *TechSupportRequestSpecNodeSelectorSpec {
	this := TechSupportRequestSpecNodeSelectorSpec{}
	return &this
}

// NewTechSupportRequestSpecNodeSelectorSpecWithDefaults instantiates a new TechSupportRequestSpecNodeSelectorSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTechSupportRequestSpecNodeSelectorSpecWithDefaults() *TechSupportRequestSpecNodeSelectorSpec {
	this := TechSupportRequestSpecNodeSelectorSpec{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *TechSupportRequestSpecNodeSelectorSpec) GetLabels() LabelsSelector {
	if o == nil || o.Labels == nil {
		var ret LabelsSelector
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechSupportRequestSpecNodeSelectorSpec) GetLabelsOk() (*LabelsSelector, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *TechSupportRequestSpecNodeSelectorSpec) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given LabelsSelector and assigns it to the Labels field.
func (o *TechSupportRequestSpecNodeSelectorSpec) SetLabels(v LabelsSelector) {
	o.Labels = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *TechSupportRequestSpecNodeSelectorSpec) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechSupportRequestSpecNodeSelectorSpec) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *TechSupportRequestSpecNodeSelectorSpec) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *TechSupportRequestSpecNodeSelectorSpec) SetNames(v []string) {
	o.Names = &v
}

func (o TechSupportRequestSpecNodeSelectorSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableTechSupportRequestSpecNodeSelectorSpec struct {
	value *TechSupportRequestSpecNodeSelectorSpec
	isSet bool
}

func (v NullableTechSupportRequestSpecNodeSelectorSpec) Get() *TechSupportRequestSpecNodeSelectorSpec {
	return v.value
}

func (v *NullableTechSupportRequestSpecNodeSelectorSpec) Set(val *TechSupportRequestSpecNodeSelectorSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTechSupportRequestSpecNodeSelectorSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTechSupportRequestSpecNodeSelectorSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTechSupportRequestSpecNodeSelectorSpec(val *TechSupportRequestSpecNodeSelectorSpec) *NullableTechSupportRequestSpecNodeSelectorSpec {
	return &NullableTechSupportRequestSpecNodeSelectorSpec{value: val, isSet: true}
}

func (v NullableTechSupportRequestSpecNodeSelectorSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTechSupportRequestSpecNodeSelectorSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


