/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
	"time"
)

// MonitoringMirrorStartConditions MirrorStartConditions - Conditions to start mirroring.
type MonitoringMirrorStartConditions struct {
	ScheduleTime *time.Time `json:"schedule-time,omitempty"`
}

// NewMonitoringMirrorStartConditions instantiates a new MonitoringMirrorStartConditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMirrorStartConditions() *MonitoringMirrorStartConditions {
	this := MonitoringMirrorStartConditions{}
	return &this
}

// NewMonitoringMirrorStartConditionsWithDefaults instantiates a new MonitoringMirrorStartConditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMirrorStartConditionsWithDefaults() *MonitoringMirrorStartConditions {
	this := MonitoringMirrorStartConditions{}
	return &this
}

// GetScheduleTime returns the ScheduleTime field value if set, zero value otherwise.
func (o *MonitoringMirrorStartConditions) GetScheduleTime() time.Time {
	if o == nil || o.ScheduleTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduleTime
}

// GetScheduleTimeOk returns a tuple with the ScheduleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMirrorStartConditions) GetScheduleTimeOk() (*time.Time, bool) {
	if o == nil || o.ScheduleTime == nil {
		return nil, false
	}
	return o.ScheduleTime, true
}

// HasScheduleTime returns a boolean if a field has been set.
func (o *MonitoringMirrorStartConditions) HasScheduleTime() bool {
	if o != nil && o.ScheduleTime != nil {
		return true
	}

	return false
}

// SetScheduleTime gets a reference to the given time.Time and assigns it to the ScheduleTime field.
func (o *MonitoringMirrorStartConditions) SetScheduleTime(v time.Time) {
	o.ScheduleTime = &v
}

func (o MonitoringMirrorStartConditions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScheduleTime != nil {
		toSerialize["schedule-time"] = o.ScheduleTime
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringMirrorStartConditions struct {
	value *MonitoringMirrorStartConditions
	isSet bool
}

func (v NullableMonitoringMirrorStartConditions) Get() *MonitoringMirrorStartConditions {
	return v.value
}

func (v *NullableMonitoringMirrorStartConditions) Set(val *MonitoringMirrorStartConditions) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMirrorStartConditions) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMirrorStartConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMirrorStartConditions(val *MonitoringMirrorStartConditions) *NullableMonitoringMirrorStartConditions {
	return &NullableMonitoringMirrorStartConditions{value: val, isSet: true}
}

func (v NullableMonitoringMirrorStartConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMirrorStartConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


