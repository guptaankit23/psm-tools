/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkDHCPServer DHCPServer specifies details about each server.
type NetworkDHCPServer struct {
	// IP Address of the server. Should be a valid v4 or v6 IP address.
	IpAddress *string `json:"ip-address,omitempty"`
	// Destination VRF where the server is connected. An empty value specifies that the server is reachable in the same vrf as the one where the policy is attached.
	VirtualRouter *string `json:"virtual-router,omitempty"`
}

// NewNetworkDHCPServer instantiates a new NetworkDHCPServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDHCPServer() *NetworkDHCPServer {
	this := NetworkDHCPServer{}
	return &this
}

// NewNetworkDHCPServerWithDefaults instantiates a new NetworkDHCPServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDHCPServerWithDefaults() *NetworkDHCPServer {
	this := NetworkDHCPServer{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *NetworkDHCPServer) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDHCPServer) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *NetworkDHCPServer) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *NetworkDHCPServer) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetVirtualRouter returns the VirtualRouter field value if set, zero value otherwise.
func (o *NetworkDHCPServer) GetVirtualRouter() string {
	if o == nil || o.VirtualRouter == nil {
		var ret string
		return ret
	}
	return *o.VirtualRouter
}

// GetVirtualRouterOk returns a tuple with the VirtualRouter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDHCPServer) GetVirtualRouterOk() (*string, bool) {
	if o == nil || o.VirtualRouter == nil {
		return nil, false
	}
	return o.VirtualRouter, true
}

// HasVirtualRouter returns a boolean if a field has been set.
func (o *NetworkDHCPServer) HasVirtualRouter() bool {
	if o != nil && o.VirtualRouter != nil {
		return true
	}

	return false
}

// SetVirtualRouter gets a reference to the given string and assigns it to the VirtualRouter field.
func (o *NetworkDHCPServer) SetVirtualRouter(v string) {
	o.VirtualRouter = &v
}

func (o NetworkDHCPServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddress != nil {
		toSerialize["ip-address"] = o.IpAddress
	}
	if o.VirtualRouter != nil {
		toSerialize["virtual-router"] = o.VirtualRouter
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkDHCPServer struct {
	value *NetworkDHCPServer
	isSet bool
}

func (v NullableNetworkDHCPServer) Get() *NetworkDHCPServer {
	return v.value
}

func (v *NullableNetworkDHCPServer) Set(val *NetworkDHCPServer) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDHCPServer) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDHCPServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDHCPServer(val *NetworkDHCPServer) *NullableNetworkDHCPServer {
	return &NullableNetworkDHCPServer{value: val, isSet: true}
}

func (v NullableNetworkDHCPServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDHCPServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


