/*
 * Search API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SearchTenantAggregation TenantAggregation contains map of search result entries grouped by three levels: first by Tenant, second by Category and finally by Kind.
type SearchTenantAggregation struct {
	Tenants *map[string]SearchCategoryAggregation `json:"tenants,omitempty"`
}

// NewSearchTenantAggregation instantiates a new SearchTenantAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchTenantAggregation() *SearchTenantAggregation {
	this := SearchTenantAggregation{}
	return &this
}

// NewSearchTenantAggregationWithDefaults instantiates a new SearchTenantAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchTenantAggregationWithDefaults() *SearchTenantAggregation {
	this := SearchTenantAggregation{}
	return &this
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *SearchTenantAggregation) GetTenants() map[string]SearchCategoryAggregation {
	if o == nil || o.Tenants == nil {
		var ret map[string]SearchCategoryAggregation
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchTenantAggregation) GetTenantsOk() (*map[string]SearchCategoryAggregation, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *SearchTenantAggregation) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given map[string]SearchCategoryAggregation and assigns it to the Tenants field.
func (o *SearchTenantAggregation) SetTenants(v map[string]SearchCategoryAggregation) {
	o.Tenants = &v
}

func (o SearchTenantAggregation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	return json.Marshal(toSerialize)
}

type NullableSearchTenantAggregation struct {
	value *SearchTenantAggregation
	isSet bool
}

func (v NullableSearchTenantAggregation) Get() *SearchTenantAggregation {
	return v.value
}

func (v *NullableSearchTenantAggregation) Set(val *SearchTenantAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchTenantAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchTenantAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchTenantAggregation(val *SearchTenantAggregation) *NullableSearchTenantAggregation {
	return &NullableSearchTenantAggregation{value: val, isSet: true}
}

func (v NullableSearchTenantAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchTenantAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


