/*
 * Security API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SecurityIPSecPolicySpec struct for SecurityIPSecPolicySpec
type SecurityIPSecPolicySpec struct {
	Config *SecurityIPSecConfig `json:"config,omitempty"`
	// list of rules.
	Rules *[]SecurityIPSecPolicyRule `json:"rules,omitempty"`
}

// NewSecurityIPSecPolicySpec instantiates a new SecurityIPSecPolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityIPSecPolicySpec() *SecurityIPSecPolicySpec {
	this := SecurityIPSecPolicySpec{}
	return &this
}

// NewSecurityIPSecPolicySpecWithDefaults instantiates a new SecurityIPSecPolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityIPSecPolicySpecWithDefaults() *SecurityIPSecPolicySpec {
	this := SecurityIPSecPolicySpec{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *SecurityIPSecPolicySpec) GetConfig() SecurityIPSecConfig {
	if o == nil || o.Config == nil {
		var ret SecurityIPSecConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityIPSecPolicySpec) GetConfigOk() (*SecurityIPSecConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *SecurityIPSecPolicySpec) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given SecurityIPSecConfig and assigns it to the Config field.
func (o *SecurityIPSecPolicySpec) SetConfig(v SecurityIPSecConfig) {
	o.Config = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *SecurityIPSecPolicySpec) GetRules() []SecurityIPSecPolicyRule {
	if o == nil || o.Rules == nil {
		var ret []SecurityIPSecPolicyRule
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityIPSecPolicySpec) GetRulesOk() (*[]SecurityIPSecPolicyRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *SecurityIPSecPolicySpec) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []SecurityIPSecPolicyRule and assigns it to the Rules field.
func (o *SecurityIPSecPolicySpec) SetRules(v []SecurityIPSecPolicyRule) {
	o.Rules = &v
}

func (o SecurityIPSecPolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityIPSecPolicySpec struct {
	value *SecurityIPSecPolicySpec
	isSet bool
}

func (v NullableSecurityIPSecPolicySpec) Get() *SecurityIPSecPolicySpec {
	return v.value
}

func (v *NullableSecurityIPSecPolicySpec) Set(val *SecurityIPSecPolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityIPSecPolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityIPSecPolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityIPSecPolicySpec(val *SecurityIPSecPolicySpec) *NullableSecurityIPSecPolicySpec {
	return &NullableSecurityIPSecPolicySpec{value: val, isSet: true}
}

func (v NullableSecurityIPSecPolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityIPSecPolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


