/*
 * Browser API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ObjectURIs struct for ObjectURIs
type ObjectURIs struct {
	RefType *string `json:"ref-type,omitempty"`
	Uri *[]ApiObjectRef `json:"uri,omitempty"`
}

// NewObjectURIs instantiates a new ObjectURIs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectURIs() *ObjectURIs {
	this := ObjectURIs{}
	var refType string = "named-reference"
	this.RefType = &refType
	return &this
}

// NewObjectURIsWithDefaults instantiates a new ObjectURIs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectURIsWithDefaults() *ObjectURIs {
	this := ObjectURIs{}
	var refType string = "named-reference"
	this.RefType = &refType
	return &this
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *ObjectURIs) GetRefType() string {
	if o == nil || o.RefType == nil {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectURIs) GetRefTypeOk() (*string, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *ObjectURIs) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *ObjectURIs) SetRefType(v string) {
	o.RefType = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ObjectURIs) GetUri() []ApiObjectRef {
	if o == nil || o.Uri == nil {
		var ret []ApiObjectRef
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectURIs) GetUriOk() (*[]ApiObjectRef, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ObjectURIs) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given []ApiObjectRef and assigns it to the Uri field.
func (o *ObjectURIs) SetUri(v []ApiObjectRef) {
	o.Uri = &v
}

func (o ObjectURIs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RefType != nil {
		toSerialize["ref-type"] = o.RefType
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	return json.Marshal(toSerialize)
}

type NullableObjectURIs struct {
	value *ObjectURIs
	isSet bool
}

func (v NullableObjectURIs) Get() *ObjectURIs {
	return v.value
}

func (v *NullableObjectURIs) Set(val *ObjectURIs) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectURIs) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectURIs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectURIs(val *ObjectURIs) *NullableObjectURIs {
	return &NullableObjectURIs{value: val, isSet: true}
}

func (v NullableObjectURIs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectURIs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


