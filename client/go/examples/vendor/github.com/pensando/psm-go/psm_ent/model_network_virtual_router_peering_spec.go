/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkVirtualRouterPeeringSpec struct for NetworkVirtualRouterPeeringSpec
type NetworkVirtualRouterPeeringSpec struct {
	// List of destination prefixes located in this Virtual Router exposed as reachable from any other Virtual Router participating in this peering group. Should be a valid v4 or v6 CIDR block.
	Ipv4Prefixes *[]string `json:"ipv4-prefixes,omitempty"`
	VirtualRouter *string `json:"virtual-router,omitempty"`
}

// NewNetworkVirtualRouterPeeringSpec instantiates a new NetworkVirtualRouterPeeringSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkVirtualRouterPeeringSpec() *NetworkVirtualRouterPeeringSpec {
	this := NetworkVirtualRouterPeeringSpec{}
	return &this
}

// NewNetworkVirtualRouterPeeringSpecWithDefaults instantiates a new NetworkVirtualRouterPeeringSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkVirtualRouterPeeringSpecWithDefaults() *NetworkVirtualRouterPeeringSpec {
	this := NetworkVirtualRouterPeeringSpec{}
	return &this
}

// GetIpv4Prefixes returns the Ipv4Prefixes field value if set, zero value otherwise.
func (o *NetworkVirtualRouterPeeringSpec) GetIpv4Prefixes() []string {
	if o == nil || o.Ipv4Prefixes == nil {
		var ret []string
		return ret
	}
	return *o.Ipv4Prefixes
}

// GetIpv4PrefixesOk returns a tuple with the Ipv4Prefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterPeeringSpec) GetIpv4PrefixesOk() (*[]string, bool) {
	if o == nil || o.Ipv4Prefixes == nil {
		return nil, false
	}
	return o.Ipv4Prefixes, true
}

// HasIpv4Prefixes returns a boolean if a field has been set.
func (o *NetworkVirtualRouterPeeringSpec) HasIpv4Prefixes() bool {
	if o != nil && o.Ipv4Prefixes != nil {
		return true
	}

	return false
}

// SetIpv4Prefixes gets a reference to the given []string and assigns it to the Ipv4Prefixes field.
func (o *NetworkVirtualRouterPeeringSpec) SetIpv4Prefixes(v []string) {
	o.Ipv4Prefixes = &v
}

// GetVirtualRouter returns the VirtualRouter field value if set, zero value otherwise.
func (o *NetworkVirtualRouterPeeringSpec) GetVirtualRouter() string {
	if o == nil || o.VirtualRouter == nil {
		var ret string
		return ret
	}
	return *o.VirtualRouter
}

// GetVirtualRouterOk returns a tuple with the VirtualRouter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterPeeringSpec) GetVirtualRouterOk() (*string, bool) {
	if o == nil || o.VirtualRouter == nil {
		return nil, false
	}
	return o.VirtualRouter, true
}

// HasVirtualRouter returns a boolean if a field has been set.
func (o *NetworkVirtualRouterPeeringSpec) HasVirtualRouter() bool {
	if o != nil && o.VirtualRouter != nil {
		return true
	}

	return false
}

// SetVirtualRouter gets a reference to the given string and assigns it to the VirtualRouter field.
func (o *NetworkVirtualRouterPeeringSpec) SetVirtualRouter(v string) {
	o.VirtualRouter = &v
}

func (o NetworkVirtualRouterPeeringSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ipv4Prefixes != nil {
		toSerialize["ipv4-prefixes"] = o.Ipv4Prefixes
	}
	if o.VirtualRouter != nil {
		toSerialize["virtual-router"] = o.VirtualRouter
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkVirtualRouterPeeringSpec struct {
	value *NetworkVirtualRouterPeeringSpec
	isSet bool
}

func (v NullableNetworkVirtualRouterPeeringSpec) Get() *NetworkVirtualRouterPeeringSpec {
	return v.value
}

func (v *NullableNetworkVirtualRouterPeeringSpec) Set(val *NetworkVirtualRouterPeeringSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkVirtualRouterPeeringSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkVirtualRouterPeeringSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkVirtualRouterPeeringSpec(val *NetworkVirtualRouterPeeringSpec) *NullableNetworkVirtualRouterPeeringSpec {
	return &NullableNetworkVirtualRouterPeeringSpec{value: val, isSet: true}
}

func (v NullableNetworkVirtualRouterPeeringSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkVirtualRouterPeeringSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


