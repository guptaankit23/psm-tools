/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkOrchestratorInfo struct for NetworkOrchestratorInfo
type NetworkOrchestratorInfo struct {
	// Namespace in the orchestrator in which this network should be created in. Length of string should be at least 1.
	Namespace *string `json:"namespace,omitempty"`
	// Name of Orchestrator object to which this network should be applied to. Length of string should be at least 1.
	OrchestratorName *string `json:"orchestrator-name,omitempty"`
}

// NewNetworkOrchestratorInfo instantiates a new NetworkOrchestratorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkOrchestratorInfo() *NetworkOrchestratorInfo {
	this := NetworkOrchestratorInfo{}
	return &this
}

// NewNetworkOrchestratorInfoWithDefaults instantiates a new NetworkOrchestratorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkOrchestratorInfoWithDefaults() *NetworkOrchestratorInfo {
	this := NetworkOrchestratorInfo{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *NetworkOrchestratorInfo) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkOrchestratorInfo) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *NetworkOrchestratorInfo) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *NetworkOrchestratorInfo) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOrchestratorName returns the OrchestratorName field value if set, zero value otherwise.
func (o *NetworkOrchestratorInfo) GetOrchestratorName() string {
	if o == nil || o.OrchestratorName == nil {
		var ret string
		return ret
	}
	return *o.OrchestratorName
}

// GetOrchestratorNameOk returns a tuple with the OrchestratorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkOrchestratorInfo) GetOrchestratorNameOk() (*string, bool) {
	if o == nil || o.OrchestratorName == nil {
		return nil, false
	}
	return o.OrchestratorName, true
}

// HasOrchestratorName returns a boolean if a field has been set.
func (o *NetworkOrchestratorInfo) HasOrchestratorName() bool {
	if o != nil && o.OrchestratorName != nil {
		return true
	}

	return false
}

// SetOrchestratorName gets a reference to the given string and assigns it to the OrchestratorName field.
func (o *NetworkOrchestratorInfo) SetOrchestratorName(v string) {
	o.OrchestratorName = &v
}

func (o NetworkOrchestratorInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.OrchestratorName != nil {
		toSerialize["orchestrator-name"] = o.OrchestratorName
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkOrchestratorInfo struct {
	value *NetworkOrchestratorInfo
	isSet bool
}

func (v NullableNetworkOrchestratorInfo) Get() *NetworkOrchestratorInfo {
	return v.value
}

func (v *NullableNetworkOrchestratorInfo) Set(val *NetworkOrchestratorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkOrchestratorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkOrchestratorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkOrchestratorInfo(val *NetworkOrchestratorInfo) *NullableNetworkOrchestratorInfo {
	return &NullableNetworkOrchestratorInfo{value: val, isSet: true}
}

func (v NullableNetworkOrchestratorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkOrchestratorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


