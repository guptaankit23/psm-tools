/*
 * Sysruntime API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SysruntimeFlowKey FlowKey is the key for uni-directional flow.
type SysruntimeFlowKey struct {
	DestinationVrfId *string `json:"destination-vrf-id,omitempty"`
	Ipv4 *SysruntimeFlowKeyV4 `json:"ipv4,omitempty"`
	L2 *SysruntimeFlowKeyL2 `json:"l2,omitempty"`
	SourceVrfId *string `json:"source-vrf-id,omitempty"`
}

// NewSysruntimeFlowKey instantiates a new SysruntimeFlowKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSysruntimeFlowKey() *SysruntimeFlowKey {
	this := SysruntimeFlowKey{}
	return &this
}

// NewSysruntimeFlowKeyWithDefaults instantiates a new SysruntimeFlowKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSysruntimeFlowKeyWithDefaults() *SysruntimeFlowKey {
	this := SysruntimeFlowKey{}
	return &this
}

// GetDestinationVrfId returns the DestinationVrfId field value if set, zero value otherwise.
func (o *SysruntimeFlowKey) GetDestinationVrfId() string {
	if o == nil || o.DestinationVrfId == nil {
		var ret string
		return ret
	}
	return *o.DestinationVrfId
}

// GetDestinationVrfIdOk returns a tuple with the DestinationVrfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKey) GetDestinationVrfIdOk() (*string, bool) {
	if o == nil || o.DestinationVrfId == nil {
		return nil, false
	}
	return o.DestinationVrfId, true
}

// HasDestinationVrfId returns a boolean if a field has been set.
func (o *SysruntimeFlowKey) HasDestinationVrfId() bool {
	if o != nil && o.DestinationVrfId != nil {
		return true
	}

	return false
}

// SetDestinationVrfId gets a reference to the given string and assigns it to the DestinationVrfId field.
func (o *SysruntimeFlowKey) SetDestinationVrfId(v string) {
	o.DestinationVrfId = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *SysruntimeFlowKey) GetIpv4() SysruntimeFlowKeyV4 {
	if o == nil || o.Ipv4 == nil {
		var ret SysruntimeFlowKeyV4
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKey) GetIpv4Ok() (*SysruntimeFlowKeyV4, bool) {
	if o == nil || o.Ipv4 == nil {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *SysruntimeFlowKey) HasIpv4() bool {
	if o != nil && o.Ipv4 != nil {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given SysruntimeFlowKeyV4 and assigns it to the Ipv4 field.
func (o *SysruntimeFlowKey) SetIpv4(v SysruntimeFlowKeyV4) {
	o.Ipv4 = &v
}

// GetL2 returns the L2 field value if set, zero value otherwise.
func (o *SysruntimeFlowKey) GetL2() SysruntimeFlowKeyL2 {
	if o == nil || o.L2 == nil {
		var ret SysruntimeFlowKeyL2
		return ret
	}
	return *o.L2
}

// GetL2Ok returns a tuple with the L2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKey) GetL2Ok() (*SysruntimeFlowKeyL2, bool) {
	if o == nil || o.L2 == nil {
		return nil, false
	}
	return o.L2, true
}

// HasL2 returns a boolean if a field has been set.
func (o *SysruntimeFlowKey) HasL2() bool {
	if o != nil && o.L2 != nil {
		return true
	}

	return false
}

// SetL2 gets a reference to the given SysruntimeFlowKeyL2 and assigns it to the L2 field.
func (o *SysruntimeFlowKey) SetL2(v SysruntimeFlowKeyL2) {
	o.L2 = &v
}

// GetSourceVrfId returns the SourceVrfId field value if set, zero value otherwise.
func (o *SysruntimeFlowKey) GetSourceVrfId() string {
	if o == nil || o.SourceVrfId == nil {
		var ret string
		return ret
	}
	return *o.SourceVrfId
}

// GetSourceVrfIdOk returns a tuple with the SourceVrfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SysruntimeFlowKey) GetSourceVrfIdOk() (*string, bool) {
	if o == nil || o.SourceVrfId == nil {
		return nil, false
	}
	return o.SourceVrfId, true
}

// HasSourceVrfId returns a boolean if a field has been set.
func (o *SysruntimeFlowKey) HasSourceVrfId() bool {
	if o != nil && o.SourceVrfId != nil {
		return true
	}

	return false
}

// SetSourceVrfId gets a reference to the given string and assigns it to the SourceVrfId field.
func (o *SysruntimeFlowKey) SetSourceVrfId(v string) {
	o.SourceVrfId = &v
}

func (o SysruntimeFlowKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DestinationVrfId != nil {
		toSerialize["destination-vrf-id"] = o.DestinationVrfId
	}
	if o.Ipv4 != nil {
		toSerialize["ipv4"] = o.Ipv4
	}
	if o.L2 != nil {
		toSerialize["l2"] = o.L2
	}
	if o.SourceVrfId != nil {
		toSerialize["source-vrf-id"] = o.SourceVrfId
	}
	return json.Marshal(toSerialize)
}

type NullableSysruntimeFlowKey struct {
	value *SysruntimeFlowKey
	isSet bool
}

func (v NullableSysruntimeFlowKey) Get() *SysruntimeFlowKey {
	return v.value
}

func (v *NullableSysruntimeFlowKey) Set(val *SysruntimeFlowKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSysruntimeFlowKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSysruntimeFlowKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSysruntimeFlowKey(val *SysruntimeFlowKey) *NullableSysruntimeFlowKey {
	return &NullableSysruntimeFlowKey{value: val, isSet: true}
}

func (v NullableSysruntimeFlowKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSysruntimeFlowKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


