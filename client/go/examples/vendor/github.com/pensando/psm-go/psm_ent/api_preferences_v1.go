/*
 * Preferences API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// PreferencesV1ApiService PreferencesV1Api service
type PreferencesV1ApiService service

type ApiPreferencesGetUIGlobalSettingsRequest struct {
	ctx _context.Context
	ApiService *PreferencesV1ApiService
	oTenant string
	tKind *string
	tApiVersion *string
	metaName *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specStyleOptions *string
	idleTimeoutDuration *string
	idleTimeoutWarningTime *string
}

func (r ApiPreferencesGetUIGlobalSettingsRequest) TKind(tKind string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.tKind = &tKind
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) TApiVersion(tApiVersion string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) MetaName(metaName string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.metaName = &metaName
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) MetaNamespace(metaNamespace string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) MetaGenerationId(metaGenerationId string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) MetaResourceVersion(metaResourceVersion string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) MetaUuid(metaUuid string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) MetaCreationTime(metaCreationTime time.Time) ApiPreferencesGetUIGlobalSettingsRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) MetaModTime(metaModTime time.Time) ApiPreferencesGetUIGlobalSettingsRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) MetaSelfLink(metaSelfLink string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) SpecStyleOptions(specStyleOptions string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.specStyleOptions = &specStyleOptions
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) IdleTimeoutDuration(idleTimeoutDuration string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.idleTimeoutDuration = &idleTimeoutDuration
	return r
}
func (r ApiPreferencesGetUIGlobalSettingsRequest) IdleTimeoutWarningTime(idleTimeoutWarningTime string) ApiPreferencesGetUIGlobalSettingsRequest {
	r.idleTimeoutWarningTime = &idleTimeoutWarningTime
	return r
}

func (r ApiPreferencesGetUIGlobalSettingsRequest) Execute() (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	return r.ApiService.GetUIGlobalSettingsExecute(r)
}

/*
 * GetUIGlobalSettings Get UIGlobalSettings object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiPreferencesGetUIGlobalSettingsRequest
 */
func (a *PreferencesV1ApiService) GetUIGlobalSettings(ctx _context.Context, oTenant string) ApiPreferencesGetUIGlobalSettingsRequest {
	return ApiPreferencesGetUIGlobalSettingsRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return PreferencesUIGlobalSettings
 */
func (a *PreferencesV1ApiService) GetUIGlobalSettingsExecute(r ApiPreferencesGetUIGlobalSettingsRequest) (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreferencesUIGlobalSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreferencesV1ApiService.GetUIGlobalSettings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/preferences/v1/tenant/{O.Tenant}/uiglobalsettings"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specStyleOptions != nil {
		localVarQueryParams.Add("spec.style-options", parameterToString(*r.specStyleOptions, ""))
	}
	if r.idleTimeoutDuration != nil {
		localVarQueryParams.Add("idle-timeout.duration", parameterToString(*r.idleTimeoutDuration, ""))
	}
	if r.idleTimeoutWarningTime != nil {
		localVarQueryParams.Add("idle-timeout.warning-time", parameterToString(*r.idleTimeoutWarningTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetUIGlobalSettingsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreferencesGetUIGlobalSettings1Request struct {
	ctx _context.Context
	ApiService *PreferencesV1ApiService
	tKind *string
	tApiVersion *string
	metaName *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specStyleOptions *string
	idleTimeoutDuration *string
	idleTimeoutWarningTime *string
}

func (r ApiPreferencesGetUIGlobalSettings1Request) TKind(tKind string) ApiPreferencesGetUIGlobalSettings1Request {
	r.tKind = &tKind
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) TApiVersion(tApiVersion string) ApiPreferencesGetUIGlobalSettings1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaName(metaName string) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaName = &metaName
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaTenant(metaTenant string) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaNamespace(metaNamespace string) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaGenerationId(metaGenerationId string) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaResourceVersion(metaResourceVersion string) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaUuid(metaUuid string) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaCreationTime(metaCreationTime time.Time) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaModTime(metaModTime time.Time) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) MetaSelfLink(metaSelfLink string) ApiPreferencesGetUIGlobalSettings1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) SpecStyleOptions(specStyleOptions string) ApiPreferencesGetUIGlobalSettings1Request {
	r.specStyleOptions = &specStyleOptions
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) IdleTimeoutDuration(idleTimeoutDuration string) ApiPreferencesGetUIGlobalSettings1Request {
	r.idleTimeoutDuration = &idleTimeoutDuration
	return r
}
func (r ApiPreferencesGetUIGlobalSettings1Request) IdleTimeoutWarningTime(idleTimeoutWarningTime string) ApiPreferencesGetUIGlobalSettings1Request {
	r.idleTimeoutWarningTime = &idleTimeoutWarningTime
	return r
}

func (r ApiPreferencesGetUIGlobalSettings1Request) Execute() (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	return r.ApiService.GetUIGlobalSettings1Execute(r)
}

/*
 * GetUIGlobalSettings1 Get UIGlobalSettings object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPreferencesGetUIGlobalSettings1Request
 */
func (a *PreferencesV1ApiService) GetUIGlobalSettings1(ctx _context.Context) ApiPreferencesGetUIGlobalSettings1Request {
	return ApiPreferencesGetUIGlobalSettings1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PreferencesUIGlobalSettings
 */
func (a *PreferencesV1ApiService) GetUIGlobalSettings1Execute(r ApiPreferencesGetUIGlobalSettings1Request) (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreferencesUIGlobalSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreferencesV1ApiService.GetUIGlobalSettings1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/preferences/v1/uiglobalsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specStyleOptions != nil {
		localVarQueryParams.Add("spec.style-options", parameterToString(*r.specStyleOptions, ""))
	}
	if r.idleTimeoutDuration != nil {
		localVarQueryParams.Add("idle-timeout.duration", parameterToString(*r.idleTimeoutDuration, ""))
	}
	if r.idleTimeoutWarningTime != nil {
		localVarQueryParams.Add("idle-timeout.warning-time", parameterToString(*r.idleTimeoutWarningTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetUIGlobalSettings1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreferencesLabelUIGlobalSettingsRequest struct {
	ctx _context.Context
	ApiService *PreferencesV1ApiService
	oTenant string
	body *ApiLabel
}

func (r ApiPreferencesLabelUIGlobalSettingsRequest) Body(body ApiLabel) ApiPreferencesLabelUIGlobalSettingsRequest {
	r.body = &body
	return r
}

func (r ApiPreferencesLabelUIGlobalSettingsRequest) Execute() (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	return r.ApiService.LabelUIGlobalSettingsExecute(r)
}

/*
 * LabelUIGlobalSettings Label UIGlobalSettings object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiPreferencesLabelUIGlobalSettingsRequest
 */
func (a *PreferencesV1ApiService) LabelUIGlobalSettings(ctx _context.Context, oTenant string) ApiPreferencesLabelUIGlobalSettingsRequest {
	return ApiPreferencesLabelUIGlobalSettingsRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return PreferencesUIGlobalSettings
 */
func (a *PreferencesV1ApiService) LabelUIGlobalSettingsExecute(r ApiPreferencesLabelUIGlobalSettingsRequest) (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreferencesUIGlobalSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreferencesV1ApiService.LabelUIGlobalSettings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/preferences/v1/tenant/{O.Tenant}/uiglobalsettings/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelUIGlobalSettingsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreferencesLabelUIGlobalSettings1Request struct {
	ctx _context.Context
	ApiService *PreferencesV1ApiService
	body *ApiLabel
}

func (r ApiPreferencesLabelUIGlobalSettings1Request) Body(body ApiLabel) ApiPreferencesLabelUIGlobalSettings1Request {
	r.body = &body
	return r
}

func (r ApiPreferencesLabelUIGlobalSettings1Request) Execute() (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	return r.ApiService.LabelUIGlobalSettings1Execute(r)
}

/*
 * LabelUIGlobalSettings1 Label UIGlobalSettings object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPreferencesLabelUIGlobalSettings1Request
 */
func (a *PreferencesV1ApiService) LabelUIGlobalSettings1(ctx _context.Context) ApiPreferencesLabelUIGlobalSettings1Request {
	return ApiPreferencesLabelUIGlobalSettings1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PreferencesUIGlobalSettings
 */
func (a *PreferencesV1ApiService) LabelUIGlobalSettings1Execute(r ApiPreferencesLabelUIGlobalSettings1Request) (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreferencesUIGlobalSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreferencesV1ApiService.LabelUIGlobalSettings1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/preferences/v1/uiglobalsettings/label"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelUIGlobalSettings1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreferencesUpdateUIGlobalSettingsRequest struct {
	ctx _context.Context
	ApiService *PreferencesV1ApiService
	oTenant string
	body *PreferencesUIGlobalSettings
}

func (r ApiPreferencesUpdateUIGlobalSettingsRequest) Body(body PreferencesUIGlobalSettings) ApiPreferencesUpdateUIGlobalSettingsRequest {
	r.body = &body
	return r
}

func (r ApiPreferencesUpdateUIGlobalSettingsRequest) Execute() (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	return r.ApiService.UpdateUIGlobalSettingsExecute(r)
}

/*
 * UpdateUIGlobalSettings Update UIGlobalSettings object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiPreferencesUpdateUIGlobalSettingsRequest
 */
func (a *PreferencesV1ApiService) UpdateUIGlobalSettings(ctx _context.Context, oTenant string) ApiPreferencesUpdateUIGlobalSettingsRequest {
	return ApiPreferencesUpdateUIGlobalSettingsRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return PreferencesUIGlobalSettings
 */
func (a *PreferencesV1ApiService) UpdateUIGlobalSettingsExecute(r ApiPreferencesUpdateUIGlobalSettingsRequest) (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreferencesUIGlobalSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreferencesV1ApiService.UpdateUIGlobalSettings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/preferences/v1/tenant/{O.Tenant}/uiglobalsettings"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateUIGlobalSettingsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreferencesUpdateUIGlobalSettings1Request struct {
	ctx _context.Context
	ApiService *PreferencesV1ApiService
	body *PreferencesUIGlobalSettings
}

func (r ApiPreferencesUpdateUIGlobalSettings1Request) Body(body PreferencesUIGlobalSettings) ApiPreferencesUpdateUIGlobalSettings1Request {
	r.body = &body
	return r
}

func (r ApiPreferencesUpdateUIGlobalSettings1Request) Execute() (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	return r.ApiService.UpdateUIGlobalSettings1Execute(r)
}

/*
 * UpdateUIGlobalSettings1 Update UIGlobalSettings object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPreferencesUpdateUIGlobalSettings1Request
 */
func (a *PreferencesV1ApiService) UpdateUIGlobalSettings1(ctx _context.Context) ApiPreferencesUpdateUIGlobalSettings1Request {
	return ApiPreferencesUpdateUIGlobalSettings1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PreferencesUIGlobalSettings
 */
func (a *PreferencesV1ApiService) UpdateUIGlobalSettings1Execute(r ApiPreferencesUpdateUIGlobalSettings1Request) (PreferencesUIGlobalSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreferencesUIGlobalSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreferencesV1ApiService.UpdateUIGlobalSettings1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/preferences/v1/uiglobalsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateUIGlobalSettings1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreferencesWatchUIGlobalSettingsRequest struct {
	ctx _context.Context
	ApiService *PreferencesV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiPreferencesWatchUIGlobalSettingsRequest) OName(oName string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.oName = &oName
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) ONamespace(oNamespace string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) OGenerationId(oGenerationId string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) OResourceVersion(oResourceVersion string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) OUuid(oUuid string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) OCreationTime(oCreationTime time.Time) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) OModTime(oModTime time.Time) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) OSelfLink(oSelfLink string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) LabelSelector(labelSelector string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) FieldSelector(fieldSelector string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) FieldChangeSelector(fieldChangeSelector []string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) From(from int32) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.from = &from
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) MaxResults(maxResults int32) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) SortOrder(sortOrder string) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiPreferencesWatchUIGlobalSettingsRequest) MetaOnly(metaOnly bool) ApiPreferencesWatchUIGlobalSettingsRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiPreferencesWatchUIGlobalSettingsRequest) Execute() (PreferencesAutoMsgUIGlobalSettingsWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchUIGlobalSettingsExecute(r)
}

/*
 * WatchUIGlobalSettings Watch UIGlobalSettings objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiPreferencesWatchUIGlobalSettingsRequest
 */
func (a *PreferencesV1ApiService) WatchUIGlobalSettings(ctx _context.Context, oTenant string) ApiPreferencesWatchUIGlobalSettingsRequest {
	return ApiPreferencesWatchUIGlobalSettingsRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return PreferencesAutoMsgUIGlobalSettingsWatchHelper
 */
func (a *PreferencesV1ApiService) WatchUIGlobalSettingsExecute(r ApiPreferencesWatchUIGlobalSettingsRequest) (PreferencesAutoMsgUIGlobalSettingsWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreferencesAutoMsgUIGlobalSettingsWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreferencesV1ApiService.WatchUIGlobalSettings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/preferences/v1/watch/tenant/{O.Tenant}/uiglobalsettings"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchUIGlobalSettingsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreferencesWatchUIGlobalSettings1Request struct {
	ctx _context.Context
	ApiService *PreferencesV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiPreferencesWatchUIGlobalSettings1Request) OName(oName string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oName = &oName
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) OTenant(oTenant string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) ONamespace(oNamespace string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) OGenerationId(oGenerationId string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) OResourceVersion(oResourceVersion string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) OUuid(oUuid string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) OCreationTime(oCreationTime time.Time) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) OModTime(oModTime time.Time) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) OSelfLink(oSelfLink string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) LabelSelector(labelSelector string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) FieldSelector(fieldSelector string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) FieldChangeSelector(fieldChangeSelector []string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) From(from int32) ApiPreferencesWatchUIGlobalSettings1Request {
	r.from = &from
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) MaxResults(maxResults int32) ApiPreferencesWatchUIGlobalSettings1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) SortOrder(sortOrder string) ApiPreferencesWatchUIGlobalSettings1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiPreferencesWatchUIGlobalSettings1Request) MetaOnly(metaOnly bool) ApiPreferencesWatchUIGlobalSettings1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiPreferencesWatchUIGlobalSettings1Request) Execute() (PreferencesAutoMsgUIGlobalSettingsWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchUIGlobalSettings1Execute(r)
}

/*
 * WatchUIGlobalSettings1 Watch UIGlobalSettings objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPreferencesWatchUIGlobalSettings1Request
 */
func (a *PreferencesV1ApiService) WatchUIGlobalSettings1(ctx _context.Context) ApiPreferencesWatchUIGlobalSettings1Request {
	return ApiPreferencesWatchUIGlobalSettings1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PreferencesAutoMsgUIGlobalSettingsWatchHelper
 */
func (a *PreferencesV1ApiService) WatchUIGlobalSettings1Execute(r ApiPreferencesWatchUIGlobalSettings1Request) (PreferencesAutoMsgUIGlobalSettingsWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreferencesAutoMsgUIGlobalSettingsWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreferencesV1ApiService.WatchUIGlobalSettings1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/preferences/v1/watch/uiglobalsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchUIGlobalSettings1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
