/*
 * Workload API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ApiObjectRef ObjectRef contains identifying information about an object.
type ApiObjectRef struct {
	// Kind represents the type of the API object.
	Kind *string `json:"kind,omitempty"`
	// Name of the object, unique within a Namespace for scoped objects.
	Name *string `json:"name,omitempty"`
	// Namespace of the object, for scoped objects.
	Namespace *string `json:"namespace,omitempty"`
	// Tenant of the object.
	Tenant *string `json:"tenant,omitempty"`
	// URI is a link to accessing the referenced object.
	Uri *string `json:"uri,omitempty"`
}

// NewApiObjectRef instantiates a new ApiObjectRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiObjectRef() *ApiObjectRef {
	this := ApiObjectRef{}
	return &this
}

// NewApiObjectRefWithDefaults instantiates a new ApiObjectRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiObjectRefWithDefaults() *ApiObjectRef {
	this := ApiObjectRef{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ApiObjectRef) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiObjectRef) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ApiObjectRef) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ApiObjectRef) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiObjectRef) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiObjectRef) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiObjectRef) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiObjectRef) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ApiObjectRef) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiObjectRef) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ApiObjectRef) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *ApiObjectRef) SetNamespace(v string) {
	o.Namespace = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *ApiObjectRef) GetTenant() string {
	if o == nil || o.Tenant == nil {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiObjectRef) GetTenantOk() (*string, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *ApiObjectRef) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *ApiObjectRef) SetTenant(v string) {
	o.Tenant = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ApiObjectRef) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiObjectRef) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ApiObjectRef) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ApiObjectRef) SetUri(v string) {
	o.Uri = &v
}

func (o ApiObjectRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	return json.Marshal(toSerialize)
}

type NullableApiObjectRef struct {
	value *ApiObjectRef
	isSet bool
}

func (v NullableApiObjectRef) Get() *ApiObjectRef {
	return v.value
}

func (v *NullableApiObjectRef) Set(val *ApiObjectRef) {
	v.value = val
	v.isSet = true
}

func (v NullableApiObjectRef) IsSet() bool {
	return v.isSet
}

func (v *NullableApiObjectRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiObjectRef(val *ApiObjectRef) *NullableApiObjectRef {
	return &NullableApiObjectRef{value: val, isSet: true}
}

func (v NullableApiObjectRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiObjectRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


