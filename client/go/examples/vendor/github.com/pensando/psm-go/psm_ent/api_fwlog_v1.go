/*
 * Fwlog API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// FwlogV1ApiService FwlogV1Api service
type FwlogV1ApiService service

type ApiFwlogGetDownloadFwLogFileContentRequest struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	oTenant string
	oName string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiFwlogGetDownloadFwLogFileContentRequest) ONamespace(oNamespace string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) OGenerationId(oGenerationId string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) OResourceVersion(oResourceVersion string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) OUuid(oUuid string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) OCreationTime(oCreationTime time.Time) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) OModTime(oModTime time.Time) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) OSelfLink(oSelfLink string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) LabelSelector(labelSelector string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) FieldSelector(fieldSelector string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) FieldChangeSelector(fieldChangeSelector []string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) From(from int32) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.from = &from
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) MaxResults(maxResults int32) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) SortOrder(sortOrder string) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContentRequest) MetaOnly(metaOnly bool) ApiFwlogGetDownloadFwLogFileContentRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiFwlogGetDownloadFwLogFileContentRequest) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.GetDownloadFwLogFileContentExecute(r)
}

/*
 * GetDownloadFwLogFileContent fwlog/v1/tenants/default/objects/<objectName>
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiFwlogGetDownloadFwLogFileContentRequest
 */
func (a *FwlogV1ApiService) GetDownloadFwLogFileContent(ctx _context.Context, oTenant string, oName string) ApiFwlogGetDownloadFwLogFileContentRequest {
	return ApiFwlogGetDownloadFwLogFileContentRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) GetDownloadFwLogFileContentExecute(r ApiFwlogGetDownloadFwLogFileContentRequest) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.GetDownloadFwLogFileContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/tenants/{O.Tenant}/objects/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetDownloadFwLogFileContentExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFwlogGetDownloadFwLogFileContent1Request struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	oName string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiFwlogGetDownloadFwLogFileContent1Request) OTenant(oTenant string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) ONamespace(oNamespace string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) OGenerationId(oGenerationId string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) OResourceVersion(oResourceVersion string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) OUuid(oUuid string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) OCreationTime(oCreationTime time.Time) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) OModTime(oModTime time.Time) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) OSelfLink(oSelfLink string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) LabelSelector(labelSelector string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) FieldSelector(fieldSelector string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) FieldChangeSelector(fieldChangeSelector []string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) From(from int32) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.from = &from
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) MaxResults(maxResults int32) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) SortOrder(sortOrder string) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiFwlogGetDownloadFwLogFileContent1Request) MetaOnly(metaOnly bool) ApiFwlogGetDownloadFwLogFileContent1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiFwlogGetDownloadFwLogFileContent1Request) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.GetDownloadFwLogFileContent1Execute(r)
}

/*
 * GetDownloadFwLogFileContent1 fwlog/v1/tenants/default/objects/<objectName>
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiFwlogGetDownloadFwLogFileContent1Request
 */
func (a *FwlogV1ApiService) GetDownloadFwLogFileContent1(ctx _context.Context, oName string) ApiFwlogGetDownloadFwLogFileContent1Request {
	return ApiFwlogGetDownloadFwLogFileContent1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) GetDownloadFwLogFileContent1Execute(r ApiFwlogGetDownloadFwLogFileContent1Request) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.GetDownloadFwLogFileContent1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/objects/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetDownloadFwLogFileContent1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFwlogGetGetLogs1Request struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	sourceIps *[]string
	destinationIps *[]string
	sourcePorts *[]int64
	destinationPorts *[]int64
	protocols *[]string
	actions *[]string
	reporterIds *[]string
	startTime *time.Time
	endTime *time.Time
	sortOrder *string
	maxResults *int32
	tenants *[]string
	scrollId *string
	scrollExpiry *string
	batchSize *int32
	scrollAction *string
	countOnly *bool
	encryptionStatus *string
	vpcNames *[]string
}

func (r ApiFwlogGetGetLogs1Request) SourceIps(sourceIps []string) ApiFwlogGetGetLogs1Request {
	r.sourceIps = &sourceIps
	return r
}
func (r ApiFwlogGetGetLogs1Request) DestinationIps(destinationIps []string) ApiFwlogGetGetLogs1Request {
	r.destinationIps = &destinationIps
	return r
}
func (r ApiFwlogGetGetLogs1Request) SourcePorts(sourcePorts []int64) ApiFwlogGetGetLogs1Request {
	r.sourcePorts = &sourcePorts
	return r
}
func (r ApiFwlogGetGetLogs1Request) DestinationPorts(destinationPorts []int64) ApiFwlogGetGetLogs1Request {
	r.destinationPorts = &destinationPorts
	return r
}
func (r ApiFwlogGetGetLogs1Request) Protocols(protocols []string) ApiFwlogGetGetLogs1Request {
	r.protocols = &protocols
	return r
}
func (r ApiFwlogGetGetLogs1Request) Actions(actions []string) ApiFwlogGetGetLogs1Request {
	r.actions = &actions
	return r
}
func (r ApiFwlogGetGetLogs1Request) ReporterIds(reporterIds []string) ApiFwlogGetGetLogs1Request {
	r.reporterIds = &reporterIds
	return r
}
func (r ApiFwlogGetGetLogs1Request) StartTime(startTime time.Time) ApiFwlogGetGetLogs1Request {
	r.startTime = &startTime
	return r
}
func (r ApiFwlogGetGetLogs1Request) EndTime(endTime time.Time) ApiFwlogGetGetLogs1Request {
	r.endTime = &endTime
	return r
}
func (r ApiFwlogGetGetLogs1Request) SortOrder(sortOrder string) ApiFwlogGetGetLogs1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiFwlogGetGetLogs1Request) MaxResults(maxResults int32) ApiFwlogGetGetLogs1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiFwlogGetGetLogs1Request) Tenants(tenants []string) ApiFwlogGetGetLogs1Request {
	r.tenants = &tenants
	return r
}
func (r ApiFwlogGetGetLogs1Request) ScrollId(scrollId string) ApiFwlogGetGetLogs1Request {
	r.scrollId = &scrollId
	return r
}
func (r ApiFwlogGetGetLogs1Request) ScrollExpiry(scrollExpiry string) ApiFwlogGetGetLogs1Request {
	r.scrollExpiry = &scrollExpiry
	return r
}
func (r ApiFwlogGetGetLogs1Request) BatchSize(batchSize int32) ApiFwlogGetGetLogs1Request {
	r.batchSize = &batchSize
	return r
}
func (r ApiFwlogGetGetLogs1Request) ScrollAction(scrollAction string) ApiFwlogGetGetLogs1Request {
	r.scrollAction = &scrollAction
	return r
}
func (r ApiFwlogGetGetLogs1Request) CountOnly(countOnly bool) ApiFwlogGetGetLogs1Request {
	r.countOnly = &countOnly
	return r
}
func (r ApiFwlogGetGetLogs1Request) EncryptionStatus(encryptionStatus string) ApiFwlogGetGetLogs1Request {
	r.encryptionStatus = &encryptionStatus
	return r
}
func (r ApiFwlogGetGetLogs1Request) VpcNames(vpcNames []string) ApiFwlogGetGetLogs1Request {
	r.vpcNames = &vpcNames
	return r
}

func (r ApiFwlogGetGetLogs1Request) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.GetGetLogs1Execute(r)
}

/*
 * GetGetLogs1 Queries firewall logs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiFwlogGetGetLogs1Request
 */
func (a *FwlogV1ApiService) GetGetLogs1(ctx _context.Context) ApiFwlogGetGetLogs1Request {
	return ApiFwlogGetGetLogs1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) GetGetLogs1Execute(r ApiFwlogGetGetLogs1Request) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.GetGetLogs1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sourceIps != nil {
		localVarQueryParams.Add("source-ips", parameterToString(*r.sourceIps, "csv"))
	}
	if r.destinationIps != nil {
		localVarQueryParams.Add("destination-ips", parameterToString(*r.destinationIps, "csv"))
	}
	if r.sourcePorts != nil {
		localVarQueryParams.Add("source-ports", parameterToString(*r.sourcePorts, "csv"))
	}
	if r.destinationPorts != nil {
		localVarQueryParams.Add("destination-ports", parameterToString(*r.destinationPorts, "csv"))
	}
	if r.protocols != nil {
		localVarQueryParams.Add("protocols", parameterToString(*r.protocols, "csv"))
	}
	if r.actions != nil {
		localVarQueryParams.Add("actions", parameterToString(*r.actions, "csv"))
	}
	if r.reporterIds != nil {
		localVarQueryParams.Add("reporter-ids", parameterToString(*r.reporterIds, "csv"))
	}
	if r.startTime != nil {
		localVarQueryParams.Add("start-time", parameterToString(*r.startTime, ""))
	}
	if r.endTime != nil {
		localVarQueryParams.Add("end-time", parameterToString(*r.endTime, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.tenants != nil {
		localVarQueryParams.Add("tenants", parameterToString(*r.tenants, "csv"))
	}
	if r.scrollId != nil {
		localVarQueryParams.Add("scroll-id", parameterToString(*r.scrollId, ""))
	}
	if r.scrollExpiry != nil {
		localVarQueryParams.Add("scroll-expiry", parameterToString(*r.scrollExpiry, ""))
	}
	if r.batchSize != nil {
		localVarQueryParams.Add("batch-size", parameterToString(*r.batchSize, ""))
	}
	if r.scrollAction != nil {
		localVarQueryParams.Add("scroll-action", parameterToString(*r.scrollAction, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("count-only", parameterToString(*r.countOnly, ""))
	}
	if r.encryptionStatus != nil {
		localVarQueryParams.Add("encryption-status", parameterToString(*r.encryptionStatus, ""))
	}
	if r.vpcNames != nil {
		localVarQueryParams.Add("vpc-names", parameterToString(*r.vpcNames, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetGetLogs1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFwlogGetWatchLogsRequest struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	sourceIps *[]string
	destinationIps *[]string
	sourcePorts *[]int64
	destinationPorts *[]int64
	protocols *[]string
	actions *[]string
	reporterIds *[]string
	startTime *time.Time
	endTime *time.Time
	sortOrder *string
	maxResults *int32
	tenants *[]string
	scrollId *string
	scrollExpiry *string
	batchSize *int32
	scrollAction *string
	countOnly *bool
	encryptionStatus *string
	vpcNames *[]string
}

func (r ApiFwlogGetWatchLogsRequest) SourceIps(sourceIps []string) ApiFwlogGetWatchLogsRequest {
	r.sourceIps = &sourceIps
	return r
}
func (r ApiFwlogGetWatchLogsRequest) DestinationIps(destinationIps []string) ApiFwlogGetWatchLogsRequest {
	r.destinationIps = &destinationIps
	return r
}
func (r ApiFwlogGetWatchLogsRequest) SourcePorts(sourcePorts []int64) ApiFwlogGetWatchLogsRequest {
	r.sourcePorts = &sourcePorts
	return r
}
func (r ApiFwlogGetWatchLogsRequest) DestinationPorts(destinationPorts []int64) ApiFwlogGetWatchLogsRequest {
	r.destinationPorts = &destinationPorts
	return r
}
func (r ApiFwlogGetWatchLogsRequest) Protocols(protocols []string) ApiFwlogGetWatchLogsRequest {
	r.protocols = &protocols
	return r
}
func (r ApiFwlogGetWatchLogsRequest) Actions(actions []string) ApiFwlogGetWatchLogsRequest {
	r.actions = &actions
	return r
}
func (r ApiFwlogGetWatchLogsRequest) ReporterIds(reporterIds []string) ApiFwlogGetWatchLogsRequest {
	r.reporterIds = &reporterIds
	return r
}
func (r ApiFwlogGetWatchLogsRequest) StartTime(startTime time.Time) ApiFwlogGetWatchLogsRequest {
	r.startTime = &startTime
	return r
}
func (r ApiFwlogGetWatchLogsRequest) EndTime(endTime time.Time) ApiFwlogGetWatchLogsRequest {
	r.endTime = &endTime
	return r
}
func (r ApiFwlogGetWatchLogsRequest) SortOrder(sortOrder string) ApiFwlogGetWatchLogsRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiFwlogGetWatchLogsRequest) MaxResults(maxResults int32) ApiFwlogGetWatchLogsRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiFwlogGetWatchLogsRequest) Tenants(tenants []string) ApiFwlogGetWatchLogsRequest {
	r.tenants = &tenants
	return r
}
func (r ApiFwlogGetWatchLogsRequest) ScrollId(scrollId string) ApiFwlogGetWatchLogsRequest {
	r.scrollId = &scrollId
	return r
}
func (r ApiFwlogGetWatchLogsRequest) ScrollExpiry(scrollExpiry string) ApiFwlogGetWatchLogsRequest {
	r.scrollExpiry = &scrollExpiry
	return r
}
func (r ApiFwlogGetWatchLogsRequest) BatchSize(batchSize int32) ApiFwlogGetWatchLogsRequest {
	r.batchSize = &batchSize
	return r
}
func (r ApiFwlogGetWatchLogsRequest) ScrollAction(scrollAction string) ApiFwlogGetWatchLogsRequest {
	r.scrollAction = &scrollAction
	return r
}
func (r ApiFwlogGetWatchLogsRequest) CountOnly(countOnly bool) ApiFwlogGetWatchLogsRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiFwlogGetWatchLogsRequest) EncryptionStatus(encryptionStatus string) ApiFwlogGetWatchLogsRequest {
	r.encryptionStatus = &encryptionStatus
	return r
}
func (r ApiFwlogGetWatchLogsRequest) VpcNames(vpcNames []string) ApiFwlogGetWatchLogsRequest {
	r.vpcNames = &vpcNames
	return r
}

func (r ApiFwlogGetWatchLogsRequest) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.GetWatchLogsExecute(r)
}

/*
 * GetWatchLogs Method for GetWatchLogs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiFwlogGetWatchLogsRequest
 */
func (a *FwlogV1ApiService) GetWatchLogs(ctx _context.Context) ApiFwlogGetWatchLogsRequest {
	return ApiFwlogGetWatchLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) GetWatchLogsExecute(r ApiFwlogGetWatchLogsRequest) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.GetWatchLogs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/watch/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sourceIps != nil {
		localVarQueryParams.Add("source-ips", parameterToString(*r.sourceIps, "csv"))
	}
	if r.destinationIps != nil {
		localVarQueryParams.Add("destination-ips", parameterToString(*r.destinationIps, "csv"))
	}
	if r.sourcePorts != nil {
		localVarQueryParams.Add("source-ports", parameterToString(*r.sourcePorts, "csv"))
	}
	if r.destinationPorts != nil {
		localVarQueryParams.Add("destination-ports", parameterToString(*r.destinationPorts, "csv"))
	}
	if r.protocols != nil {
		localVarQueryParams.Add("protocols", parameterToString(*r.protocols, "csv"))
	}
	if r.actions != nil {
		localVarQueryParams.Add("actions", parameterToString(*r.actions, "csv"))
	}
	if r.reporterIds != nil {
		localVarQueryParams.Add("reporter-ids", parameterToString(*r.reporterIds, "csv"))
	}
	if r.startTime != nil {
		localVarQueryParams.Add("start-time", parameterToString(*r.startTime, ""))
	}
	if r.endTime != nil {
		localVarQueryParams.Add("end-time", parameterToString(*r.endTime, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.tenants != nil {
		localVarQueryParams.Add("tenants", parameterToString(*r.tenants, "csv"))
	}
	if r.scrollId != nil {
		localVarQueryParams.Add("scroll-id", parameterToString(*r.scrollId, ""))
	}
	if r.scrollExpiry != nil {
		localVarQueryParams.Add("scroll-expiry", parameterToString(*r.scrollExpiry, ""))
	}
	if r.batchSize != nil {
		localVarQueryParams.Add("batch-size", parameterToString(*r.batchSize, ""))
	}
	if r.scrollAction != nil {
		localVarQueryParams.Add("scroll-action", parameterToString(*r.scrollAction, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("count-only", parameterToString(*r.countOnly, ""))
	}
	if r.encryptionStatus != nil {
		localVarQueryParams.Add("encryption-status", parameterToString(*r.encryptionStatus, ""))
	}
	if r.vpcNames != nil {
		localVarQueryParams.Add("vpc-names", parameterToString(*r.vpcNames, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetWatchLogsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFwlogPostGetLogsRequest struct {
	ctx _context.Context
	ApiService *FwlogV1ApiService
	body *FwlogFwLogQuery
}

func (r ApiFwlogPostGetLogsRequest) Body(body FwlogFwLogQuery) ApiFwlogPostGetLogsRequest {
	r.body = &body
	return r
}

func (r ApiFwlogPostGetLogsRequest) Execute() (FwlogFwLogList, *_nethttp.Response, error) {
	return r.ApiService.PostGetLogsExecute(r)
}

/*
 * PostGetLogs Queries firewall logs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiFwlogPostGetLogsRequest
 */
func (a *FwlogV1ApiService) PostGetLogs(ctx _context.Context) ApiFwlogPostGetLogsRequest {
	return ApiFwlogPostGetLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FwlogFwLogList
 */
func (a *FwlogV1ApiService) PostGetLogsExecute(r ApiFwlogPostGetLogsRequest) (FwlogFwLogList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FwlogFwLogList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FwlogV1ApiService.PostGetLogs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fwlog/v1/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.PostGetLogsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
