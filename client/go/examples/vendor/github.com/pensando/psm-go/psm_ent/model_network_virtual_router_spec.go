/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkVirtualRouterSpec struct for NetworkVirtualRouterSpec
type NetworkVirtualRouterSpec struct {
	// Default IPAM policy for networks belonging to this Virtual Router. Any IPAM Policy specified in the Network overrides this.
	DefaultIpamPolicy *string `json:"default-ipam-policy,omitempty"`
	RouteImportExport *NetworkRDSpec `json:"route-import-export,omitempty"`
	// Default Router MAC Address to use for this Virtual Router. Should be a valid MAC address.
	RouterMacAddress *string `json:"router-mac-address,omitempty"`
	Type *string `json:"type,omitempty"`
	// VxlAN VNI for the Virtual Router. Value should be between 0 and 16777215.
	VxlanVni *int64 `json:"vxlan-vni,omitempty"`
}

// NewNetworkVirtualRouterSpec instantiates a new NetworkVirtualRouterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkVirtualRouterSpec() *NetworkVirtualRouterSpec {
	this := NetworkVirtualRouterSpec{}
	var type_ string = "unknown"
	this.Type = &type_
	return &this
}

// NewNetworkVirtualRouterSpecWithDefaults instantiates a new NetworkVirtualRouterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkVirtualRouterSpecWithDefaults() *NetworkVirtualRouterSpec {
	this := NetworkVirtualRouterSpec{}
	var type_ string = "unknown"
	this.Type = &type_
	return &this
}

// GetDefaultIpamPolicy returns the DefaultIpamPolicy field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetDefaultIpamPolicy() string {
	if o == nil || o.DefaultIpamPolicy == nil {
		var ret string
		return ret
	}
	return *o.DefaultIpamPolicy
}

// GetDefaultIpamPolicyOk returns a tuple with the DefaultIpamPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetDefaultIpamPolicyOk() (*string, bool) {
	if o == nil || o.DefaultIpamPolicy == nil {
		return nil, false
	}
	return o.DefaultIpamPolicy, true
}

// HasDefaultIpamPolicy returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasDefaultIpamPolicy() bool {
	if o != nil && o.DefaultIpamPolicy != nil {
		return true
	}

	return false
}

// SetDefaultIpamPolicy gets a reference to the given string and assigns it to the DefaultIpamPolicy field.
func (o *NetworkVirtualRouterSpec) SetDefaultIpamPolicy(v string) {
	o.DefaultIpamPolicy = &v
}

// GetRouteImportExport returns the RouteImportExport field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetRouteImportExport() NetworkRDSpec {
	if o == nil || o.RouteImportExport == nil {
		var ret NetworkRDSpec
		return ret
	}
	return *o.RouteImportExport
}

// GetRouteImportExportOk returns a tuple with the RouteImportExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetRouteImportExportOk() (*NetworkRDSpec, bool) {
	if o == nil || o.RouteImportExport == nil {
		return nil, false
	}
	return o.RouteImportExport, true
}

// HasRouteImportExport returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasRouteImportExport() bool {
	if o != nil && o.RouteImportExport != nil {
		return true
	}

	return false
}

// SetRouteImportExport gets a reference to the given NetworkRDSpec and assigns it to the RouteImportExport field.
func (o *NetworkVirtualRouterSpec) SetRouteImportExport(v NetworkRDSpec) {
	o.RouteImportExport = &v
}

// GetRouterMacAddress returns the RouterMacAddress field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetRouterMacAddress() string {
	if o == nil || o.RouterMacAddress == nil {
		var ret string
		return ret
	}
	return *o.RouterMacAddress
}

// GetRouterMacAddressOk returns a tuple with the RouterMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetRouterMacAddressOk() (*string, bool) {
	if o == nil || o.RouterMacAddress == nil {
		return nil, false
	}
	return o.RouterMacAddress, true
}

// HasRouterMacAddress returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasRouterMacAddress() bool {
	if o != nil && o.RouterMacAddress != nil {
		return true
	}

	return false
}

// SetRouterMacAddress gets a reference to the given string and assigns it to the RouterMacAddress field.
func (o *NetworkVirtualRouterSpec) SetRouterMacAddress(v string) {
	o.RouterMacAddress = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkVirtualRouterSpec) SetType(v string) {
	o.Type = &v
}

// GetVxlanVni returns the VxlanVni field value if set, zero value otherwise.
func (o *NetworkVirtualRouterSpec) GetVxlanVni() int64 {
	if o == nil || o.VxlanVni == nil {
		var ret int64
		return ret
	}
	return *o.VxlanVni
}

// GetVxlanVniOk returns a tuple with the VxlanVni field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVirtualRouterSpec) GetVxlanVniOk() (*int64, bool) {
	if o == nil || o.VxlanVni == nil {
		return nil, false
	}
	return o.VxlanVni, true
}

// HasVxlanVni returns a boolean if a field has been set.
func (o *NetworkVirtualRouterSpec) HasVxlanVni() bool {
	if o != nil && o.VxlanVni != nil {
		return true
	}

	return false
}

// SetVxlanVni gets a reference to the given int64 and assigns it to the VxlanVni field.
func (o *NetworkVirtualRouterSpec) SetVxlanVni(v int64) {
	o.VxlanVni = &v
}

func (o NetworkVirtualRouterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultIpamPolicy != nil {
		toSerialize["default-ipam-policy"] = o.DefaultIpamPolicy
	}
	if o.RouteImportExport != nil {
		toSerialize["route-import-export"] = o.RouteImportExport
	}
	if o.RouterMacAddress != nil {
		toSerialize["router-mac-address"] = o.RouterMacAddress
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.VxlanVni != nil {
		toSerialize["vxlan-vni"] = o.VxlanVni
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkVirtualRouterSpec struct {
	value *NetworkVirtualRouterSpec
	isSet bool
}

func (v NullableNetworkVirtualRouterSpec) Get() *NetworkVirtualRouterSpec {
	return v.value
}

func (v *NullableNetworkVirtualRouterSpec) Set(val *NetworkVirtualRouterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkVirtualRouterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkVirtualRouterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkVirtualRouterSpec(val *NetworkVirtualRouterSpec) *NullableNetworkVirtualRouterSpec {
	return &NullableNetworkVirtualRouterSpec{value: val, isSet: true}
}

func (v NullableNetworkVirtualRouterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkVirtualRouterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


