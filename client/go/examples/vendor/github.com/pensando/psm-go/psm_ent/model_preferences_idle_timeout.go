/*
 * Preferences API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// PreferencesIdleTimeout struct for PreferencesIdleTimeout
type PreferencesIdleTimeout struct {
	// Time of inactivity after which user logout countdown warning pops up. Should be a valid time duration.
	Duration *string `json:"duration,omitempty"`
	// Warning duration before logout and after system idle time. Should be a valid time duration of at most 5m0s.
	WarningTime *string `json:"warning-time,omitempty"`
}

// NewPreferencesIdleTimeout instantiates a new PreferencesIdleTimeout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferencesIdleTimeout() *PreferencesIdleTimeout {
	this := PreferencesIdleTimeout{}
	var duration string = "60m"
	this.Duration = &duration
	var warningTime string = "10s"
	this.WarningTime = &warningTime
	return &this
}

// NewPreferencesIdleTimeoutWithDefaults instantiates a new PreferencesIdleTimeout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferencesIdleTimeoutWithDefaults() *PreferencesIdleTimeout {
	this := PreferencesIdleTimeout{}
	var duration string = "60m"
	this.Duration = &duration
	var warningTime string = "10s"
	this.WarningTime = &warningTime
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *PreferencesIdleTimeout) GetDuration() string {
	if o == nil || o.Duration == nil {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferencesIdleTimeout) GetDurationOk() (*string, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *PreferencesIdleTimeout) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *PreferencesIdleTimeout) SetDuration(v string) {
	o.Duration = &v
}

// GetWarningTime returns the WarningTime field value if set, zero value otherwise.
func (o *PreferencesIdleTimeout) GetWarningTime() string {
	if o == nil || o.WarningTime == nil {
		var ret string
		return ret
	}
	return *o.WarningTime
}

// GetWarningTimeOk returns a tuple with the WarningTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferencesIdleTimeout) GetWarningTimeOk() (*string, bool) {
	if o == nil || o.WarningTime == nil {
		return nil, false
	}
	return o.WarningTime, true
}

// HasWarningTime returns a boolean if a field has been set.
func (o *PreferencesIdleTimeout) HasWarningTime() bool {
	if o != nil && o.WarningTime != nil {
		return true
	}

	return false
}

// SetWarningTime gets a reference to the given string and assigns it to the WarningTime field.
func (o *PreferencesIdleTimeout) SetWarningTime(v string) {
	o.WarningTime = &v
}

func (o PreferencesIdleTimeout) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.WarningTime != nil {
		toSerialize["warning-time"] = o.WarningTime
	}
	return json.Marshal(toSerialize)
}

type NullablePreferencesIdleTimeout struct {
	value *PreferencesIdleTimeout
	isSet bool
}

func (v NullablePreferencesIdleTimeout) Get() *PreferencesIdleTimeout {
	return v.value
}

func (v *NullablePreferencesIdleTimeout) Set(val *PreferencesIdleTimeout) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferencesIdleTimeout) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferencesIdleTimeout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferencesIdleTimeout(val *PreferencesIdleTimeout) *NullablePreferencesIdleTimeout {
	return &NullablePreferencesIdleTimeout{value: val, isSet: true}
}

func (v NullablePreferencesIdleTimeout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferencesIdleTimeout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


