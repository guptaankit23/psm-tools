/*
 * Objstore API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// ObjstoreV1ApiService ObjstoreV1Api service
type ObjstoreV1ApiService service

type ApiObjstoreAddObjectRequest struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oTenant string
	oNamespace string
	body *ObjstoreObject
}

func (r ApiObjstoreAddObjectRequest) Body(body ObjstoreObject) ApiObjstoreAddObjectRequest {
	r.body = &body
	return r
}

func (r ApiObjstoreAddObjectRequest) Execute() (ObjstoreObject, *_nethttp.Response, error) {
	return r.ApiService.AddObjectExecute(r)
}

/*
 * AddObject Create Object object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oNamespace
 * @return ApiObjstoreAddObjectRequest
 */
func (a *ObjstoreV1ApiService) AddObject(ctx _context.Context, oTenant string, oNamespace string) ApiObjstoreAddObjectRequest {
	return ApiObjstoreAddObjectRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oNamespace: oNamespace,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreObject
 */
func (a *ObjstoreV1ApiService) AddObjectExecute(r ApiObjstoreAddObjectRequest) (ObjstoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.AddObject")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/tenant/{O.Tenant}/{O.Namespace}/objects"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddObjectExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreAddObject1Request struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oNamespace string
	body *ObjstoreObject
}

func (r ApiObjstoreAddObject1Request) Body(body ObjstoreObject) ApiObjstoreAddObject1Request {
	r.body = &body
	return r
}

func (r ApiObjstoreAddObject1Request) Execute() (ObjstoreObject, *_nethttp.Response, error) {
	return r.ApiService.AddObject1Execute(r)
}

/*
 * AddObject1 Create Object object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oNamespace
 * @return ApiObjstoreAddObject1Request
 */
func (a *ObjstoreV1ApiService) AddObject1(ctx _context.Context, oNamespace string) ApiObjstoreAddObject1Request {
	return ApiObjstoreAddObject1Request{
		ApiService: a,
		ctx: ctx,
		oNamespace: oNamespace,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreObject
 */
func (a *ObjstoreV1ApiService) AddObject1Execute(r ApiObjstoreAddObject1Request) (ObjstoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.AddObject1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/{O.Namespace}/objects"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddObject1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreDeleteObjectRequest struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oTenant string
	oNamespace string
	oName string
}


func (r ApiObjstoreDeleteObjectRequest) Execute() (ObjstoreObject, *_nethttp.Response, error) {
	return r.ApiService.DeleteObjectExecute(r)
}

/*
 * DeleteObject Delete Object object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oNamespace
 * @param oName
 * @return ApiObjstoreDeleteObjectRequest
 */
func (a *ObjstoreV1ApiService) DeleteObject(ctx _context.Context, oTenant string, oNamespace string, oName string) ApiObjstoreDeleteObjectRequest {
	return ApiObjstoreDeleteObjectRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oNamespace: oNamespace,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreObject
 */
func (a *ObjstoreV1ApiService) DeleteObjectExecute(r ApiObjstoreDeleteObjectRequest) (ObjstoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.DeleteObject")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/tenant/{O.Tenant}/{O.Namespace}/objects/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteObjectExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreDeleteObject1Request struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oNamespace string
	oName string
}


func (r ApiObjstoreDeleteObject1Request) Execute() (ObjstoreObject, *_nethttp.Response, error) {
	return r.ApiService.DeleteObject1Execute(r)
}

/*
 * DeleteObject1 Delete Object object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oNamespace
 * @param oName
 * @return ApiObjstoreDeleteObject1Request
 */
func (a *ObjstoreV1ApiService) DeleteObject1(ctx _context.Context, oNamespace string, oName string) ApiObjstoreDeleteObject1Request {
	return ApiObjstoreDeleteObject1Request{
		ApiService: a,
		ctx: ctx,
		oNamespace: oNamespace,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreObject
 */
func (a *ObjstoreV1ApiService) DeleteObject1Execute(r ApiObjstoreDeleteObject1Request) (ObjstoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.DeleteObject1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/{O.Namespace}/objects/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteObject1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreGetDownloadFileRequest struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oTenant string
	oNamespace string
	oName string
	tKind *string
	tApiVersion *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specContentType *string
	statusSize *string
	statusDigest *string
}

func (r ApiObjstoreGetDownloadFileRequest) TKind(tKind string) ApiObjstoreGetDownloadFileRequest {
	r.tKind = &tKind
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) TApiVersion(tApiVersion string) ApiObjstoreGetDownloadFileRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) MetaGenerationId(metaGenerationId string) ApiObjstoreGetDownloadFileRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) MetaResourceVersion(metaResourceVersion string) ApiObjstoreGetDownloadFileRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) MetaUuid(metaUuid string) ApiObjstoreGetDownloadFileRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) MetaCreationTime(metaCreationTime time.Time) ApiObjstoreGetDownloadFileRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) MetaModTime(metaModTime time.Time) ApiObjstoreGetDownloadFileRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) MetaSelfLink(metaSelfLink string) ApiObjstoreGetDownloadFileRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) SpecContentType(specContentType string) ApiObjstoreGetDownloadFileRequest {
	r.specContentType = &specContentType
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) StatusSize(statusSize string) ApiObjstoreGetDownloadFileRequest {
	r.statusSize = &statusSize
	return r
}
func (r ApiObjstoreGetDownloadFileRequest) StatusDigest(statusDigest string) ApiObjstoreGetDownloadFileRequest {
	r.statusDigest = &statusDigest
	return r
}

func (r ApiObjstoreGetDownloadFileRequest) Execute() (ObjstoreStreamChunk, *_nethttp.Response, error) {
	return r.ApiService.GetDownloadFileExecute(r)
}

/*
 * GetDownloadFile Download file
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oNamespace
 * @param oName
 * @return ApiObjstoreGetDownloadFileRequest
 */
func (a *ObjstoreV1ApiService) GetDownloadFile(ctx _context.Context, oTenant string, oNamespace string, oName string) ApiObjstoreGetDownloadFileRequest {
	return ApiObjstoreGetDownloadFileRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oNamespace: oNamespace,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreStreamChunk
 */
func (a *ObjstoreV1ApiService) GetDownloadFileExecute(r ApiObjstoreGetDownloadFileRequest) (ObjstoreStreamChunk, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreStreamChunk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.GetDownloadFile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/downloads/tenant/{O.Tenant}/{O.Namespace}/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specContentType != nil {
		localVarQueryParams.Add("spec.content-type", parameterToString(*r.specContentType, ""))
	}
	if r.statusSize != nil {
		localVarQueryParams.Add("status.size", parameterToString(*r.statusSize, ""))
	}
	if r.statusDigest != nil {
		localVarQueryParams.Add("status.digest", parameterToString(*r.statusDigest, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetDownloadFileExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreGetDownloadFile1Request struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oNamespace string
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specContentType *string
	statusSize *string
	statusDigest *string
}

func (r ApiObjstoreGetDownloadFile1Request) TKind(tKind string) ApiObjstoreGetDownloadFile1Request {
	r.tKind = &tKind
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) TApiVersion(tApiVersion string) ApiObjstoreGetDownloadFile1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) MetaTenant(metaTenant string) ApiObjstoreGetDownloadFile1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) MetaGenerationId(metaGenerationId string) ApiObjstoreGetDownloadFile1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) MetaResourceVersion(metaResourceVersion string) ApiObjstoreGetDownloadFile1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) MetaUuid(metaUuid string) ApiObjstoreGetDownloadFile1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) MetaCreationTime(metaCreationTime time.Time) ApiObjstoreGetDownloadFile1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) MetaModTime(metaModTime time.Time) ApiObjstoreGetDownloadFile1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) MetaSelfLink(metaSelfLink string) ApiObjstoreGetDownloadFile1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) SpecContentType(specContentType string) ApiObjstoreGetDownloadFile1Request {
	r.specContentType = &specContentType
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) StatusSize(statusSize string) ApiObjstoreGetDownloadFile1Request {
	r.statusSize = &statusSize
	return r
}
func (r ApiObjstoreGetDownloadFile1Request) StatusDigest(statusDigest string) ApiObjstoreGetDownloadFile1Request {
	r.statusDigest = &statusDigest
	return r
}

func (r ApiObjstoreGetDownloadFile1Request) Execute() (ObjstoreStreamChunk, *_nethttp.Response, error) {
	return r.ApiService.GetDownloadFile1Execute(r)
}

/*
 * GetDownloadFile1 Download file
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oNamespace
 * @param oName
 * @return ApiObjstoreGetDownloadFile1Request
 */
func (a *ObjstoreV1ApiService) GetDownloadFile1(ctx _context.Context, oNamespace string, oName string) ApiObjstoreGetDownloadFile1Request {
	return ApiObjstoreGetDownloadFile1Request{
		ApiService: a,
		ctx: ctx,
		oNamespace: oNamespace,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreStreamChunk
 */
func (a *ObjstoreV1ApiService) GetDownloadFile1Execute(r ApiObjstoreGetDownloadFile1Request) (ObjstoreStreamChunk, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreStreamChunk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.GetDownloadFile1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/downloads/{O.Namespace}/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specContentType != nil {
		localVarQueryParams.Add("spec.content-type", parameterToString(*r.specContentType, ""))
	}
	if r.statusSize != nil {
		localVarQueryParams.Add("status.size", parameterToString(*r.statusSize, ""))
	}
	if r.statusDigest != nil {
		localVarQueryParams.Add("status.digest", parameterToString(*r.statusDigest, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetDownloadFile1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreGetDownloadFileByPrefixRequest struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oTenant string
	oNamespace string
	oName string
	tKind *string
	tApiVersion *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specContentType *string
	statusSize *string
	statusDigest *string
}

func (r ApiObjstoreGetDownloadFileByPrefixRequest) TKind(tKind string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.tKind = &tKind
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) TApiVersion(tApiVersion string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) MetaGenerationId(metaGenerationId string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) MetaResourceVersion(metaResourceVersion string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) MetaUuid(metaUuid string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) MetaCreationTime(metaCreationTime time.Time) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) MetaModTime(metaModTime time.Time) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) MetaSelfLink(metaSelfLink string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) SpecContentType(specContentType string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.specContentType = &specContentType
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) StatusSize(statusSize string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.statusSize = &statusSize
	return r
}
func (r ApiObjstoreGetDownloadFileByPrefixRequest) StatusDigest(statusDigest string) ApiObjstoreGetDownloadFileByPrefixRequest {
	r.statusDigest = &statusDigest
	return r
}

func (r ApiObjstoreGetDownloadFileByPrefixRequest) Execute() (ObjstoreStreamChunk, *_nethttp.Response, error) {
	return r.ApiService.GetDownloadFileByPrefixExecute(r)
}

/*
 * GetDownloadFileByPrefix Download file by prefix
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oNamespace
 * @param oName
 * @return ApiObjstoreGetDownloadFileByPrefixRequest
 */
func (a *ObjstoreV1ApiService) GetDownloadFileByPrefix(ctx _context.Context, oTenant string, oNamespace string, oName string) ApiObjstoreGetDownloadFileByPrefixRequest {
	return ApiObjstoreGetDownloadFileByPrefixRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oNamespace: oNamespace,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreStreamChunk
 */
func (a *ObjstoreV1ApiService) GetDownloadFileByPrefixExecute(r ApiObjstoreGetDownloadFileByPrefixRequest) (ObjstoreStreamChunk, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreStreamChunk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.GetDownloadFileByPrefix")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/downloads/all/tenant/{O.Tenant}/{O.Namespace}/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specContentType != nil {
		localVarQueryParams.Add("spec.content-type", parameterToString(*r.specContentType, ""))
	}
	if r.statusSize != nil {
		localVarQueryParams.Add("status.size", parameterToString(*r.statusSize, ""))
	}
	if r.statusDigest != nil {
		localVarQueryParams.Add("status.digest", parameterToString(*r.statusDigest, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetDownloadFileByPrefixExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreGetObjectRequest struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oTenant string
	oNamespace string
	oName string
	tKind *string
	tApiVersion *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specContentType *string
	statusSize *string
	statusDigest *string
}

func (r ApiObjstoreGetObjectRequest) TKind(tKind string) ApiObjstoreGetObjectRequest {
	r.tKind = &tKind
	return r
}
func (r ApiObjstoreGetObjectRequest) TApiVersion(tApiVersion string) ApiObjstoreGetObjectRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiObjstoreGetObjectRequest) MetaGenerationId(metaGenerationId string) ApiObjstoreGetObjectRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiObjstoreGetObjectRequest) MetaResourceVersion(metaResourceVersion string) ApiObjstoreGetObjectRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiObjstoreGetObjectRequest) MetaUuid(metaUuid string) ApiObjstoreGetObjectRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiObjstoreGetObjectRequest) MetaCreationTime(metaCreationTime time.Time) ApiObjstoreGetObjectRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiObjstoreGetObjectRequest) MetaModTime(metaModTime time.Time) ApiObjstoreGetObjectRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiObjstoreGetObjectRequest) MetaSelfLink(metaSelfLink string) ApiObjstoreGetObjectRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiObjstoreGetObjectRequest) SpecContentType(specContentType string) ApiObjstoreGetObjectRequest {
	r.specContentType = &specContentType
	return r
}
func (r ApiObjstoreGetObjectRequest) StatusSize(statusSize string) ApiObjstoreGetObjectRequest {
	r.statusSize = &statusSize
	return r
}
func (r ApiObjstoreGetObjectRequest) StatusDigest(statusDigest string) ApiObjstoreGetObjectRequest {
	r.statusDigest = &statusDigest
	return r
}

func (r ApiObjstoreGetObjectRequest) Execute() (ObjstoreObject, *_nethttp.Response, error) {
	return r.ApiService.GetObjectExecute(r)
}

/*
 * GetObject Get Object object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oNamespace
 * @param oName
 * @return ApiObjstoreGetObjectRequest
 */
func (a *ObjstoreV1ApiService) GetObject(ctx _context.Context, oTenant string, oNamespace string, oName string) ApiObjstoreGetObjectRequest {
	return ApiObjstoreGetObjectRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oNamespace: oNamespace,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreObject
 */
func (a *ObjstoreV1ApiService) GetObjectExecute(r ApiObjstoreGetObjectRequest) (ObjstoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.GetObject")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/tenant/{O.Tenant}/{O.Namespace}/objects/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specContentType != nil {
		localVarQueryParams.Add("spec.content-type", parameterToString(*r.specContentType, ""))
	}
	if r.statusSize != nil {
		localVarQueryParams.Add("status.size", parameterToString(*r.statusSize, ""))
	}
	if r.statusDigest != nil {
		localVarQueryParams.Add("status.digest", parameterToString(*r.statusDigest, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetObjectExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreGetObject1Request struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oNamespace string
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specContentType *string
	statusSize *string
	statusDigest *string
}

func (r ApiObjstoreGetObject1Request) TKind(tKind string) ApiObjstoreGetObject1Request {
	r.tKind = &tKind
	return r
}
func (r ApiObjstoreGetObject1Request) TApiVersion(tApiVersion string) ApiObjstoreGetObject1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiObjstoreGetObject1Request) MetaTenant(metaTenant string) ApiObjstoreGetObject1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiObjstoreGetObject1Request) MetaGenerationId(metaGenerationId string) ApiObjstoreGetObject1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiObjstoreGetObject1Request) MetaResourceVersion(metaResourceVersion string) ApiObjstoreGetObject1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiObjstoreGetObject1Request) MetaUuid(metaUuid string) ApiObjstoreGetObject1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiObjstoreGetObject1Request) MetaCreationTime(metaCreationTime time.Time) ApiObjstoreGetObject1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiObjstoreGetObject1Request) MetaModTime(metaModTime time.Time) ApiObjstoreGetObject1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiObjstoreGetObject1Request) MetaSelfLink(metaSelfLink string) ApiObjstoreGetObject1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiObjstoreGetObject1Request) SpecContentType(specContentType string) ApiObjstoreGetObject1Request {
	r.specContentType = &specContentType
	return r
}
func (r ApiObjstoreGetObject1Request) StatusSize(statusSize string) ApiObjstoreGetObject1Request {
	r.statusSize = &statusSize
	return r
}
func (r ApiObjstoreGetObject1Request) StatusDigest(statusDigest string) ApiObjstoreGetObject1Request {
	r.statusDigest = &statusDigest
	return r
}

func (r ApiObjstoreGetObject1Request) Execute() (ObjstoreObject, *_nethttp.Response, error) {
	return r.ApiService.GetObject1Execute(r)
}

/*
 * GetObject1 Get Object object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oNamespace
 * @param oName
 * @return ApiObjstoreGetObject1Request
 */
func (a *ObjstoreV1ApiService) GetObject1(ctx _context.Context, oNamespace string, oName string) ApiObjstoreGetObject1Request {
	return ApiObjstoreGetObject1Request{
		ApiService: a,
		ctx: ctx,
		oNamespace: oNamespace,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreObject
 */
func (a *ObjstoreV1ApiService) GetObject1Execute(r ApiObjstoreGetObject1Request) (ObjstoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.GetObject1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/{O.Namespace}/objects/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specContentType != nil {
		localVarQueryParams.Add("spec.content-type", parameterToString(*r.specContentType, ""))
	}
	if r.statusSize != nil {
		localVarQueryParams.Add("status.size", parameterToString(*r.statusSize, ""))
	}
	if r.statusDigest != nil {
		localVarQueryParams.Add("status.digest", parameterToString(*r.statusDigest, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetObject1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreListObjectRequest struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oTenant string
	oNamespace string
	oName *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiObjstoreListObjectRequest) OName(oName string) ApiObjstoreListObjectRequest {
	r.oName = &oName
	return r
}
func (r ApiObjstoreListObjectRequest) OGenerationId(oGenerationId string) ApiObjstoreListObjectRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiObjstoreListObjectRequest) OResourceVersion(oResourceVersion string) ApiObjstoreListObjectRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiObjstoreListObjectRequest) OUuid(oUuid string) ApiObjstoreListObjectRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiObjstoreListObjectRequest) OCreationTime(oCreationTime time.Time) ApiObjstoreListObjectRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiObjstoreListObjectRequest) OModTime(oModTime time.Time) ApiObjstoreListObjectRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiObjstoreListObjectRequest) OSelfLink(oSelfLink string) ApiObjstoreListObjectRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiObjstoreListObjectRequest) LabelSelector(labelSelector string) ApiObjstoreListObjectRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiObjstoreListObjectRequest) FieldSelector(fieldSelector string) ApiObjstoreListObjectRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiObjstoreListObjectRequest) FieldChangeSelector(fieldChangeSelector []string) ApiObjstoreListObjectRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiObjstoreListObjectRequest) From(from int32) ApiObjstoreListObjectRequest {
	r.from = &from
	return r
}
func (r ApiObjstoreListObjectRequest) MaxResults(maxResults int32) ApiObjstoreListObjectRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiObjstoreListObjectRequest) SortOrder(sortOrder string) ApiObjstoreListObjectRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiObjstoreListObjectRequest) MetaOnly(metaOnly bool) ApiObjstoreListObjectRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiObjstoreListObjectRequest) Execute() (ObjstoreObjectList, *_nethttp.Response, error) {
	return r.ApiService.ListObjectExecute(r)
}

/*
 * ListObject List Object objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oNamespace
 * @return ApiObjstoreListObjectRequest
 */
func (a *ObjstoreV1ApiService) ListObject(ctx _context.Context, oTenant string, oNamespace string) ApiObjstoreListObjectRequest {
	return ApiObjstoreListObjectRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oNamespace: oNamespace,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreObjectList
 */
func (a *ObjstoreV1ApiService) ListObjectExecute(r ApiObjstoreListObjectRequest) (ObjstoreObjectList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreObjectList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.ListObject")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/tenant/{O.Tenant}/{O.Namespace}/objects"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListObjectExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreListObject1Request struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oNamespace string
	oName *string
	oTenant *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiObjstoreListObject1Request) OName(oName string) ApiObjstoreListObject1Request {
	r.oName = &oName
	return r
}
func (r ApiObjstoreListObject1Request) OTenant(oTenant string) ApiObjstoreListObject1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiObjstoreListObject1Request) OGenerationId(oGenerationId string) ApiObjstoreListObject1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiObjstoreListObject1Request) OResourceVersion(oResourceVersion string) ApiObjstoreListObject1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiObjstoreListObject1Request) OUuid(oUuid string) ApiObjstoreListObject1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiObjstoreListObject1Request) OCreationTime(oCreationTime time.Time) ApiObjstoreListObject1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiObjstoreListObject1Request) OModTime(oModTime time.Time) ApiObjstoreListObject1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiObjstoreListObject1Request) OSelfLink(oSelfLink string) ApiObjstoreListObject1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiObjstoreListObject1Request) LabelSelector(labelSelector string) ApiObjstoreListObject1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiObjstoreListObject1Request) FieldSelector(fieldSelector string) ApiObjstoreListObject1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiObjstoreListObject1Request) FieldChangeSelector(fieldChangeSelector []string) ApiObjstoreListObject1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiObjstoreListObject1Request) From(from int32) ApiObjstoreListObject1Request {
	r.from = &from
	return r
}
func (r ApiObjstoreListObject1Request) MaxResults(maxResults int32) ApiObjstoreListObject1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiObjstoreListObject1Request) SortOrder(sortOrder string) ApiObjstoreListObject1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiObjstoreListObject1Request) MetaOnly(metaOnly bool) ApiObjstoreListObject1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiObjstoreListObject1Request) Execute() (ObjstoreObjectList, *_nethttp.Response, error) {
	return r.ApiService.ListObject1Execute(r)
}

/*
 * ListObject1 List Object objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oNamespace
 * @return ApiObjstoreListObject1Request
 */
func (a *ObjstoreV1ApiService) ListObject1(ctx _context.Context, oNamespace string) ApiObjstoreListObject1Request {
	return ApiObjstoreListObject1Request{
		ApiService: a,
		ctx: ctx,
		oNamespace: oNamespace,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreObjectList
 */
func (a *ObjstoreV1ApiService) ListObject1Execute(r ApiObjstoreListObject1Request) (ObjstoreObjectList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreObjectList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.ListObject1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/{O.Namespace}/objects"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListObject1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreWatchObjectRequest struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oTenant string
	oNamespace string
	oName *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiObjstoreWatchObjectRequest) OName(oName string) ApiObjstoreWatchObjectRequest {
	r.oName = &oName
	return r
}
func (r ApiObjstoreWatchObjectRequest) OGenerationId(oGenerationId string) ApiObjstoreWatchObjectRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiObjstoreWatchObjectRequest) OResourceVersion(oResourceVersion string) ApiObjstoreWatchObjectRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiObjstoreWatchObjectRequest) OUuid(oUuid string) ApiObjstoreWatchObjectRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiObjstoreWatchObjectRequest) OCreationTime(oCreationTime time.Time) ApiObjstoreWatchObjectRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiObjstoreWatchObjectRequest) OModTime(oModTime time.Time) ApiObjstoreWatchObjectRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiObjstoreWatchObjectRequest) OSelfLink(oSelfLink string) ApiObjstoreWatchObjectRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiObjstoreWatchObjectRequest) LabelSelector(labelSelector string) ApiObjstoreWatchObjectRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiObjstoreWatchObjectRequest) FieldSelector(fieldSelector string) ApiObjstoreWatchObjectRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiObjstoreWatchObjectRequest) FieldChangeSelector(fieldChangeSelector []string) ApiObjstoreWatchObjectRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiObjstoreWatchObjectRequest) From(from int32) ApiObjstoreWatchObjectRequest {
	r.from = &from
	return r
}
func (r ApiObjstoreWatchObjectRequest) MaxResults(maxResults int32) ApiObjstoreWatchObjectRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiObjstoreWatchObjectRequest) SortOrder(sortOrder string) ApiObjstoreWatchObjectRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiObjstoreWatchObjectRequest) MetaOnly(metaOnly bool) ApiObjstoreWatchObjectRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiObjstoreWatchObjectRequest) Execute() (ObjstoreAutoMsgObjectWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchObjectExecute(r)
}

/*
 * WatchObject Watch Object objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oNamespace
 * @return ApiObjstoreWatchObjectRequest
 */
func (a *ObjstoreV1ApiService) WatchObject(ctx _context.Context, oTenant string, oNamespace string) ApiObjstoreWatchObjectRequest {
	return ApiObjstoreWatchObjectRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oNamespace: oNamespace,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreAutoMsgObjectWatchHelper
 */
func (a *ObjstoreV1ApiService) WatchObjectExecute(r ApiObjstoreWatchObjectRequest) (ObjstoreAutoMsgObjectWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreAutoMsgObjectWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.WatchObject")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/watch/tenant/{O.Tenant}/{O.Namespace}/objects"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchObjectExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiObjstoreWatchObject1Request struct {
	ctx _context.Context
	ApiService *ObjstoreV1ApiService
	oNamespace string
	oName *string
	oTenant *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiObjstoreWatchObject1Request) OName(oName string) ApiObjstoreWatchObject1Request {
	r.oName = &oName
	return r
}
func (r ApiObjstoreWatchObject1Request) OTenant(oTenant string) ApiObjstoreWatchObject1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiObjstoreWatchObject1Request) OGenerationId(oGenerationId string) ApiObjstoreWatchObject1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiObjstoreWatchObject1Request) OResourceVersion(oResourceVersion string) ApiObjstoreWatchObject1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiObjstoreWatchObject1Request) OUuid(oUuid string) ApiObjstoreWatchObject1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiObjstoreWatchObject1Request) OCreationTime(oCreationTime time.Time) ApiObjstoreWatchObject1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiObjstoreWatchObject1Request) OModTime(oModTime time.Time) ApiObjstoreWatchObject1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiObjstoreWatchObject1Request) OSelfLink(oSelfLink string) ApiObjstoreWatchObject1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiObjstoreWatchObject1Request) LabelSelector(labelSelector string) ApiObjstoreWatchObject1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiObjstoreWatchObject1Request) FieldSelector(fieldSelector string) ApiObjstoreWatchObject1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiObjstoreWatchObject1Request) FieldChangeSelector(fieldChangeSelector []string) ApiObjstoreWatchObject1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiObjstoreWatchObject1Request) From(from int32) ApiObjstoreWatchObject1Request {
	r.from = &from
	return r
}
func (r ApiObjstoreWatchObject1Request) MaxResults(maxResults int32) ApiObjstoreWatchObject1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiObjstoreWatchObject1Request) SortOrder(sortOrder string) ApiObjstoreWatchObject1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiObjstoreWatchObject1Request) MetaOnly(metaOnly bool) ApiObjstoreWatchObject1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiObjstoreWatchObject1Request) Execute() (ObjstoreAutoMsgObjectWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchObject1Execute(r)
}

/*
 * WatchObject1 Watch Object objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oNamespace
 * @return ApiObjstoreWatchObject1Request
 */
func (a *ObjstoreV1ApiService) WatchObject1(ctx _context.Context, oNamespace string) ApiObjstoreWatchObject1Request {
	return ApiObjstoreWatchObject1Request{
		ApiService: a,
		ctx: ctx,
		oNamespace: oNamespace,
	}
}

/*
 * Execute executes the request
 * @return ObjstoreAutoMsgObjectWatchHelper
 */
func (a *ObjstoreV1ApiService) WatchObject1Execute(r ApiObjstoreWatchObject1Request) (ObjstoreAutoMsgObjectWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjstoreAutoMsgObjectWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjstoreV1ApiService.WatchObject1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objstore/v1/watch/{O.Namespace}/objects"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Namespace"+"}", _neturl.PathEscape(parameterToString(r.oNamespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchObject1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
