/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringTroubleshootingSessionSpec Troubleshooting Session Spec.
type MonitoringTroubleshootingSessionSpec struct {
	// If packet capture is enabled, a mirror-session will be internally created.
	EnableMirroring *bool `json:"enable-mirroring,omitempty"`
	FlowSelector *MonitoringMatchRule `json:"flow-selector,omitempty"`
	RepeatEvery *string `json:"repeat-every,omitempty"`
	TimeWindow *MonitoringTimeWindow `json:"time-window,omitempty"`
}

// NewMonitoringTroubleshootingSessionSpec instantiates a new MonitoringTroubleshootingSessionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringTroubleshootingSessionSpec() *MonitoringTroubleshootingSessionSpec {
	this := MonitoringTroubleshootingSessionSpec{}
	return &this
}

// NewMonitoringTroubleshootingSessionSpecWithDefaults instantiates a new MonitoringTroubleshootingSessionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringTroubleshootingSessionSpecWithDefaults() *MonitoringTroubleshootingSessionSpec {
	this := MonitoringTroubleshootingSessionSpec{}
	return &this
}

// GetEnableMirroring returns the EnableMirroring field value if set, zero value otherwise.
func (o *MonitoringTroubleshootingSessionSpec) GetEnableMirroring() bool {
	if o == nil || o.EnableMirroring == nil {
		var ret bool
		return ret
	}
	return *o.EnableMirroring
}

// GetEnableMirroringOk returns a tuple with the EnableMirroring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTroubleshootingSessionSpec) GetEnableMirroringOk() (*bool, bool) {
	if o == nil || o.EnableMirroring == nil {
		return nil, false
	}
	return o.EnableMirroring, true
}

// HasEnableMirroring returns a boolean if a field has been set.
func (o *MonitoringTroubleshootingSessionSpec) HasEnableMirroring() bool {
	if o != nil && o.EnableMirroring != nil {
		return true
	}

	return false
}

// SetEnableMirroring gets a reference to the given bool and assigns it to the EnableMirroring field.
func (o *MonitoringTroubleshootingSessionSpec) SetEnableMirroring(v bool) {
	o.EnableMirroring = &v
}

// GetFlowSelector returns the FlowSelector field value if set, zero value otherwise.
func (o *MonitoringTroubleshootingSessionSpec) GetFlowSelector() MonitoringMatchRule {
	if o == nil || o.FlowSelector == nil {
		var ret MonitoringMatchRule
		return ret
	}
	return *o.FlowSelector
}

// GetFlowSelectorOk returns a tuple with the FlowSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTroubleshootingSessionSpec) GetFlowSelectorOk() (*MonitoringMatchRule, bool) {
	if o == nil || o.FlowSelector == nil {
		return nil, false
	}
	return o.FlowSelector, true
}

// HasFlowSelector returns a boolean if a field has been set.
func (o *MonitoringTroubleshootingSessionSpec) HasFlowSelector() bool {
	if o != nil && o.FlowSelector != nil {
		return true
	}

	return false
}

// SetFlowSelector gets a reference to the given MonitoringMatchRule and assigns it to the FlowSelector field.
func (o *MonitoringTroubleshootingSessionSpec) SetFlowSelector(v MonitoringMatchRule) {
	o.FlowSelector = &v
}

// GetRepeatEvery returns the RepeatEvery field value if set, zero value otherwise.
func (o *MonitoringTroubleshootingSessionSpec) GetRepeatEvery() string {
	if o == nil || o.RepeatEvery == nil {
		var ret string
		return ret
	}
	return *o.RepeatEvery
}

// GetRepeatEveryOk returns a tuple with the RepeatEvery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTroubleshootingSessionSpec) GetRepeatEveryOk() (*string, bool) {
	if o == nil || o.RepeatEvery == nil {
		return nil, false
	}
	return o.RepeatEvery, true
}

// HasRepeatEvery returns a boolean if a field has been set.
func (o *MonitoringTroubleshootingSessionSpec) HasRepeatEvery() bool {
	if o != nil && o.RepeatEvery != nil {
		return true
	}

	return false
}

// SetRepeatEvery gets a reference to the given string and assigns it to the RepeatEvery field.
func (o *MonitoringTroubleshootingSessionSpec) SetRepeatEvery(v string) {
	o.RepeatEvery = &v
}

// GetTimeWindow returns the TimeWindow field value if set, zero value otherwise.
func (o *MonitoringTroubleshootingSessionSpec) GetTimeWindow() MonitoringTimeWindow {
	if o == nil || o.TimeWindow == nil {
		var ret MonitoringTimeWindow
		return ret
	}
	return *o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringTroubleshootingSessionSpec) GetTimeWindowOk() (*MonitoringTimeWindow, bool) {
	if o == nil || o.TimeWindow == nil {
		return nil, false
	}
	return o.TimeWindow, true
}

// HasTimeWindow returns a boolean if a field has been set.
func (o *MonitoringTroubleshootingSessionSpec) HasTimeWindow() bool {
	if o != nil && o.TimeWindow != nil {
		return true
	}

	return false
}

// SetTimeWindow gets a reference to the given MonitoringTimeWindow and assigns it to the TimeWindow field.
func (o *MonitoringTroubleshootingSessionSpec) SetTimeWindow(v MonitoringTimeWindow) {
	o.TimeWindow = &v
}

func (o MonitoringTroubleshootingSessionSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableMirroring != nil {
		toSerialize["enable-mirroring"] = o.EnableMirroring
	}
	if o.FlowSelector != nil {
		toSerialize["flow-selector"] = o.FlowSelector
	}
	if o.RepeatEvery != nil {
		toSerialize["repeat-every"] = o.RepeatEvery
	}
	if o.TimeWindow != nil {
		toSerialize["time-window"] = o.TimeWindow
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringTroubleshootingSessionSpec struct {
	value *MonitoringTroubleshootingSessionSpec
	isSet bool
}

func (v NullableMonitoringTroubleshootingSessionSpec) Get() *MonitoringTroubleshootingSessionSpec {
	return v.value
}

func (v *NullableMonitoringTroubleshootingSessionSpec) Set(val *MonitoringTroubleshootingSessionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringTroubleshootingSessionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringTroubleshootingSessionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringTroubleshootingSessionSpec(val *MonitoringTroubleshootingSessionSpec) *NullableMonitoringTroubleshootingSessionSpec {
	return &NullableMonitoringTroubleshootingSessionSpec{value: val, isSet: true}
}

func (v NullableMonitoringTroubleshootingSessionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringTroubleshootingSessionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


