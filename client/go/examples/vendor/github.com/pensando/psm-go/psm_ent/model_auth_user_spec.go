/*
 * Auth API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// AuthUserSpec spec part of user object.
type AuthUserSpec struct {
	// Must be a valid email.
	Email *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	// Password should contain atleast 1 digit, 1 uppercase letter and 1 special character from \"~!@#$%^&*()_+`-={}|[]\\\\:\\\"<>?,./\" Required password length by default is 9 characters. It is defined in AuthenticationPolicy.
	Password *string `json:"password,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewAuthUserSpec instantiates a new AuthUserSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthUserSpec() *AuthUserSpec {
	this := AuthUserSpec{}
	var type_ string = "local"
	this.Type = &type_
	return &this
}

// NewAuthUserSpecWithDefaults instantiates a new AuthUserSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthUserSpecWithDefaults() *AuthUserSpec {
	this := AuthUserSpec{}
	var type_ string = "local"
	this.Type = &type_
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthUserSpec) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserSpec) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthUserSpec) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthUserSpec) SetEmail(v string) {
	o.Email = &v
}

// GetFullname returns the Fullname field value if set, zero value otherwise.
func (o *AuthUserSpec) GetFullname() string {
	if o == nil || o.Fullname == nil {
		var ret string
		return ret
	}
	return *o.Fullname
}

// GetFullnameOk returns a tuple with the Fullname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserSpec) GetFullnameOk() (*string, bool) {
	if o == nil || o.Fullname == nil {
		return nil, false
	}
	return o.Fullname, true
}

// HasFullname returns a boolean if a field has been set.
func (o *AuthUserSpec) HasFullname() bool {
	if o != nil && o.Fullname != nil {
		return true
	}

	return false
}

// SetFullname gets a reference to the given string and assigns it to the Fullname field.
func (o *AuthUserSpec) SetFullname(v string) {
	o.Fullname = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AuthUserSpec) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserSpec) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AuthUserSpec) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AuthUserSpec) SetPassword(v string) {
	o.Password = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuthUserSpec) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserSpec) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuthUserSpec) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AuthUserSpec) SetType(v string) {
	o.Type = &v
}

func (o AuthUserSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Fullname != nil {
		toSerialize["fullname"] = o.Fullname
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAuthUserSpec struct {
	value *AuthUserSpec
	isSet bool
}

func (v NullableAuthUserSpec) Get() *AuthUserSpec {
	return v.value
}

func (v *NullableAuthUserSpec) Set(val *AuthUserSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthUserSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthUserSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthUserSpec(val *AuthUserSpec) *NullableAuthUserSpec {
	return &NullableAuthUserSpec{value: val, isSet: true}
}

func (v NullableAuthUserSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthUserSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


