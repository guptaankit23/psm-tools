/*
 * Routing API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// RoutingV1ApiService RoutingV1Api service
type RoutingV1ApiService service

type ApiRoutingGetHealthZRequest struct {
	ctx _context.Context
	ApiService *RoutingV1ApiService
	instance string
}


func (r ApiRoutingGetHealthZRequest) Execute() (RoutingHealth, *_nethttp.Response, error) {
	return r.ApiService.GetHealthZExecute(r)
}

/*
 * GetHealthZ Method for GetHealthZ
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instance
 * @return ApiRoutingGetHealthZRequest
 */
func (a *RoutingV1ApiService) GetHealthZ(ctx _context.Context, instance string) ApiRoutingGetHealthZRequest {
	return ApiRoutingGetHealthZRequest{
		ApiService: a,
		ctx: ctx,
		instance: instance,
	}
}

/*
 * Execute executes the request
 * @return RoutingHealth
 */
func (a *RoutingV1ApiService) GetHealthZExecute(r ApiRoutingGetHealthZRequest) (RoutingHealth, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RoutingHealth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutingV1ApiService.GetHealthZ")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routing/v1/{Instance}/health"
	localVarPath = strings.Replace(localVarPath, "{"+"Instance"+"}", _neturl.PathEscape(parameterToString(r.instance, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetHealthZExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRoutingGetListNeighborsRequest struct {
	ctx _context.Context
	ApiService *RoutingV1ApiService
	instance string
	tKind *string
	tApiVersion *string
	metaName *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	neighbor *string
}

func (r ApiRoutingGetListNeighborsRequest) TKind(tKind string) ApiRoutingGetListNeighborsRequest {
	r.tKind = &tKind
	return r
}
func (r ApiRoutingGetListNeighborsRequest) TApiVersion(tApiVersion string) ApiRoutingGetListNeighborsRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaName(metaName string) ApiRoutingGetListNeighborsRequest {
	r.metaName = &metaName
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaTenant(metaTenant string) ApiRoutingGetListNeighborsRequest {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaNamespace(metaNamespace string) ApiRoutingGetListNeighborsRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaGenerationId(metaGenerationId string) ApiRoutingGetListNeighborsRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaResourceVersion(metaResourceVersion string) ApiRoutingGetListNeighborsRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaUuid(metaUuid string) ApiRoutingGetListNeighborsRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaCreationTime(metaCreationTime time.Time) ApiRoutingGetListNeighborsRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaModTime(metaModTime time.Time) ApiRoutingGetListNeighborsRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiRoutingGetListNeighborsRequest) MetaSelfLink(metaSelfLink string) ApiRoutingGetListNeighborsRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiRoutingGetListNeighborsRequest) Neighbor(neighbor string) ApiRoutingGetListNeighborsRequest {
	r.neighbor = &neighbor
	return r
}

func (r ApiRoutingGetListNeighborsRequest) Execute() (RoutingNeighborList, *_nethttp.Response, error) {
	return r.ApiService.GetListNeighborsExecute(r)
}

/*
 * GetListNeighbors Method for GetListNeighbors
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instance
 * @return ApiRoutingGetListNeighborsRequest
 */
func (a *RoutingV1ApiService) GetListNeighbors(ctx _context.Context, instance string) ApiRoutingGetListNeighborsRequest {
	return ApiRoutingGetListNeighborsRequest{
		ApiService: a,
		ctx: ctx,
		instance: instance,
	}
}

/*
 * Execute executes the request
 * @return RoutingNeighborList
 */
func (a *RoutingV1ApiService) GetListNeighborsExecute(r ApiRoutingGetListNeighborsRequest) (RoutingNeighborList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RoutingNeighborList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutingV1ApiService.GetListNeighbors")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routing/v1/{Instance}/neighbors"
	localVarPath = strings.Replace(localVarPath, "{"+"Instance"+"}", _neturl.PathEscape(parameterToString(r.instance, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.neighbor != nil {
		localVarQueryParams.Add("neighbor", parameterToString(*r.neighbor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetListNeighborsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRoutingGetListRoutes1Request struct {
	ctx _context.Context
	ApiService *RoutingV1ApiService
	instance string
	tKind *string
	tApiVersion *string
	metaName *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	ipaddress *string
	type_ *string
	extcomm *string
	vnid *string
	rtype *string
	nhop *string
	pageNumber *int64
	allRoutes *bool
}

func (r ApiRoutingGetListRoutes1Request) TKind(tKind string) ApiRoutingGetListRoutes1Request {
	r.tKind = &tKind
	return r
}
func (r ApiRoutingGetListRoutes1Request) TApiVersion(tApiVersion string) ApiRoutingGetListRoutes1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaName(metaName string) ApiRoutingGetListRoutes1Request {
	r.metaName = &metaName
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaTenant(metaTenant string) ApiRoutingGetListRoutes1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaNamespace(metaNamespace string) ApiRoutingGetListRoutes1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaGenerationId(metaGenerationId string) ApiRoutingGetListRoutes1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaResourceVersion(metaResourceVersion string) ApiRoutingGetListRoutes1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaUuid(metaUuid string) ApiRoutingGetListRoutes1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaCreationTime(metaCreationTime time.Time) ApiRoutingGetListRoutes1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaModTime(metaModTime time.Time) ApiRoutingGetListRoutes1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiRoutingGetListRoutes1Request) MetaSelfLink(metaSelfLink string) ApiRoutingGetListRoutes1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiRoutingGetListRoutes1Request) Ipaddress(ipaddress string) ApiRoutingGetListRoutes1Request {
	r.ipaddress = &ipaddress
	return r
}
func (r ApiRoutingGetListRoutes1Request) Type_(type_ string) ApiRoutingGetListRoutes1Request {
	r.type_ = &type_
	return r
}
func (r ApiRoutingGetListRoutes1Request) Extcomm(extcomm string) ApiRoutingGetListRoutes1Request {
	r.extcomm = &extcomm
	return r
}
func (r ApiRoutingGetListRoutes1Request) Vnid(vnid string) ApiRoutingGetListRoutes1Request {
	r.vnid = &vnid
	return r
}
func (r ApiRoutingGetListRoutes1Request) Rtype(rtype string) ApiRoutingGetListRoutes1Request {
	r.rtype = &rtype
	return r
}
func (r ApiRoutingGetListRoutes1Request) Nhop(nhop string) ApiRoutingGetListRoutes1Request {
	r.nhop = &nhop
	return r
}
func (r ApiRoutingGetListRoutes1Request) PageNumber(pageNumber int64) ApiRoutingGetListRoutes1Request {
	r.pageNumber = &pageNumber
	return r
}
func (r ApiRoutingGetListRoutes1Request) AllRoutes(allRoutes bool) ApiRoutingGetListRoutes1Request {
	r.allRoutes = &allRoutes
	return r
}

func (r ApiRoutingGetListRoutes1Request) Execute() (RoutingRouteList, *_nethttp.Response, error) {
	return r.ApiService.GetListRoutes1Execute(r)
}

/*
 * GetListRoutes1 Method for GetListRoutes1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instance
 * @return ApiRoutingGetListRoutes1Request
 */
func (a *RoutingV1ApiService) GetListRoutes1(ctx _context.Context, instance string) ApiRoutingGetListRoutes1Request {
	return ApiRoutingGetListRoutes1Request{
		ApiService: a,
		ctx: ctx,
		instance: instance,
	}
}

/*
 * Execute executes the request
 * @return RoutingRouteList
 */
func (a *RoutingV1ApiService) GetListRoutes1Execute(r ApiRoutingGetListRoutes1Request) (RoutingRouteList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RoutingRouteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutingV1ApiService.GetListRoutes1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routing/v1/{Instance}/routes"
	localVarPath = strings.Replace(localVarPath, "{"+"Instance"+"}", _neturl.PathEscape(parameterToString(r.instance, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.ipaddress != nil {
		localVarQueryParams.Add("ipaddress", parameterToString(*r.ipaddress, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.extcomm != nil {
		localVarQueryParams.Add("extcomm", parameterToString(*r.extcomm, ""))
	}
	if r.vnid != nil {
		localVarQueryParams.Add("vnid", parameterToString(*r.vnid, ""))
	}
	if r.rtype != nil {
		localVarQueryParams.Add("rtype", parameterToString(*r.rtype, ""))
	}
	if r.nhop != nil {
		localVarQueryParams.Add("nhop", parameterToString(*r.nhop, ""))
	}
	if r.pageNumber != nil {
		localVarQueryParams.Add("page-number", parameterToString(*r.pageNumber, ""))
	}
	if r.allRoutes != nil {
		localVarQueryParams.Add("all-routes", parameterToString(*r.allRoutes, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetListRoutes1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRoutingPostListRoutesRequest struct {
	ctx _context.Context
	ApiService *RoutingV1ApiService
	instance string
	body *RoutingRouteFilter
}

func (r ApiRoutingPostListRoutesRequest) Body(body RoutingRouteFilter) ApiRoutingPostListRoutesRequest {
	r.body = &body
	return r
}

func (r ApiRoutingPostListRoutesRequest) Execute() (RoutingRouteList, *_nethttp.Response, error) {
	return r.ApiService.PostListRoutesExecute(r)
}

/*
 * PostListRoutes Method for PostListRoutes
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instance
 * @return ApiRoutingPostListRoutesRequest
 */
func (a *RoutingV1ApiService) PostListRoutes(ctx _context.Context, instance string) ApiRoutingPostListRoutesRequest {
	return ApiRoutingPostListRoutesRequest{
		ApiService: a,
		ctx: ctx,
		instance: instance,
	}
}

/*
 * Execute executes the request
 * @return RoutingRouteList
 */
func (a *RoutingV1ApiService) PostListRoutesExecute(r ApiRoutingPostListRoutesRequest) (RoutingRouteList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RoutingRouteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutingV1ApiService.PostListRoutes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routing/v1/{Instance}/routes"
	localVarPath = strings.Replace(localVarPath, "{"+"Instance"+"}", _neturl.PathEscape(parameterToString(r.instance, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.PostListRoutesExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
