/*
 * Search API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// SearchSearchRequest SearchRequest is the input to the search API Simple queries can be specified as URI param using \"QueryString\". For advanced queries, it is recommended to use the \"SearchQuery\" structure and specify them in BODY of the GET/POST method. Examples of search query in query-string format: 1. Find all occurrences matching text “Network” Network 2. Find all occurrences matching phrase “link down” “link down” 3. Find all occurrences matching text production OR \"staging\" production staging 4. Find all occurrences matching text “Network” AND \"link down\" Network,\"link down\" Network AND \"link down\" 5. Find all config objects with label1=foo category:config label:label1=foo 6. Find all objects created on or after certain date+time category:config field:meta.created-time>=”date-time-string” 7. Find all Network objects with type=vlan kind:Network field:spec.type=vlan 8. Find all Naples nodes with admission-phase = pending or rejected kind:DistributedServiceCard field:spec.phase in (pending, rejected) 9. Find all events with text matching “disconnected” category:events disconnected 10. Find all Critical events for Network objects category:events kind:Network field:severity=CRITICAL 11. Find all Alerts generated from Naples MAC1 category:alerts field:status.source.node=MAC1 category:alerts MAC1 12. Find all Naples nodes with metric filter : mem>90 && cpu>90 category:metrics kind:DistributedServiceCard field:metric.mem>90,metric.cpu>90 13. Find all Endpoints with label Tier=Web with counter1>=100 category:metrics kind:Endpoint label:Tier=Web field:metric.counter1 > 100 14. Find all Endpoints objects with label target=prod with crc-error-count != 0 category:metrics kind:Endpoint label:target=prod field:status.crc-error-count!=0 15. Find all occurences matching the words and phrase in a certain category & kinds with certain field and label match production \"status down\" category:Network kind:Network,Service field:spec.service-type=external label:tier=web.
type SearchSearchRequest struct {
	// Indicates whether to perform aggregation on the search results or not.
	Aggregate *bool `json:"aggregate,omitempty"`
	// From represents the start offset (zero based), used in paginated search requests The results returned would be in the range [From ... From+MaxResults-1] This can be specified as URI parameter. Default value is 0 and valid range is 0..8192. Value should be between 0 and 8192.
	From *int32 `json:"from,omitempty"`
	// MaxResults is the max-count of search results This can be specified as URI parameter. Default value is 50 and valid range is 0..8192. Value should be between 0 and 8192.
	MaxResults *int32 `json:"max-results,omitempty"`
	// Query Mode.
	Mode *string `json:"mode,omitempty"`
	Query *SearchSearchQuery `json:"query,omitempty"`
	// Simple query string This can be specified as URI parameter. For advanced query cases, Users should use specify SearchQuery and pass the SearchRequest in a GET/POST Body The max query-string length is 256 bytes. Length of string should be between 0 and 256.
	QueryString *string `json:"query-string,omitempty"`
	// SortyBy is an optional parameter and contains the field name to be sorted by, For eg: \"meta.name\" This can be specified as URI parameter. Length of string should be between 0 and 256.
	SortBy *string `json:"sort-by,omitempty"`
	// SortOrder is an optional parameter and contains whether to sort ascending or descending This can be specified as URI parameter.
	SortOrder *string `json:"sort-order,omitempty"`
	// OR of tenants within the scope of which search needs to be performed. If not specified, it will be set to tenant of the logged in user.
	Tenants *[]string `json:"tenants,omitempty"`
}

// NewSearchSearchRequest instantiates a new SearchSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchSearchRequest() *SearchSearchRequest {
	this := SearchSearchRequest{}
	var aggregate bool = true
	this.Aggregate = &aggregate
	var maxResults int32 = 50
	this.MaxResults = &maxResults
	var mode string = "full"
	this.Mode = &mode
	var sortOrder string = "ascending"
	this.SortOrder = &sortOrder
	return &this
}

// NewSearchSearchRequestWithDefaults instantiates a new SearchSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchSearchRequestWithDefaults() *SearchSearchRequest {
	this := SearchSearchRequest{}
	var aggregate bool = true
	this.Aggregate = &aggregate
	var maxResults int32 = 50
	this.MaxResults = &maxResults
	var mode string = "full"
	this.Mode = &mode
	var sortOrder string = "ascending"
	this.SortOrder = &sortOrder
	return &this
}

// GetAggregate returns the Aggregate field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetAggregate() bool {
	if o == nil || o.Aggregate == nil {
		var ret bool
		return ret
	}
	return *o.Aggregate
}

// GetAggregateOk returns a tuple with the Aggregate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetAggregateOk() (*bool, bool) {
	if o == nil || o.Aggregate == nil {
		return nil, false
	}
	return o.Aggregate, true
}

// HasAggregate returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasAggregate() bool {
	if o != nil && o.Aggregate != nil {
		return true
	}

	return false
}

// SetAggregate gets a reference to the given bool and assigns it to the Aggregate field.
func (o *SearchSearchRequest) SetAggregate(v bool) {
	o.Aggregate = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetFrom() int32 {
	if o == nil || o.From == nil {
		var ret int32
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetFromOk() (*int32, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given int32 and assigns it to the From field.
func (o *SearchSearchRequest) SetFrom(v int32) {
	o.From = &v
}

// GetMaxResults returns the MaxResults field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetMaxResults() int32 {
	if o == nil || o.MaxResults == nil {
		var ret int32
		return ret
	}
	return *o.MaxResults
}

// GetMaxResultsOk returns a tuple with the MaxResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetMaxResultsOk() (*int32, bool) {
	if o == nil || o.MaxResults == nil {
		return nil, false
	}
	return o.MaxResults, true
}

// HasMaxResults returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasMaxResults() bool {
	if o != nil && o.MaxResults != nil {
		return true
	}

	return false
}

// SetMaxResults gets a reference to the given int32 and assigns it to the MaxResults field.
func (o *SearchSearchRequest) SetMaxResults(v int32) {
	o.MaxResults = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *SearchSearchRequest) SetMode(v string) {
	o.Mode = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetQuery() SearchSearchQuery {
	if o == nil || o.Query == nil {
		var ret SearchSearchQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetQueryOk() (*SearchSearchQuery, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given SearchSearchQuery and assigns it to the Query field.
func (o *SearchSearchRequest) SetQuery(v SearchSearchQuery) {
	o.Query = &v
}

// GetQueryString returns the QueryString field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetQueryString() string {
	if o == nil || o.QueryString == nil {
		var ret string
		return ret
	}
	return *o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetQueryStringOk() (*string, bool) {
	if o == nil || o.QueryString == nil {
		return nil, false
	}
	return o.QueryString, true
}

// HasQueryString returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasQueryString() bool {
	if o != nil && o.QueryString != nil {
		return true
	}

	return false
}

// SetQueryString gets a reference to the given string and assigns it to the QueryString field.
func (o *SearchSearchRequest) SetQueryString(v string) {
	o.QueryString = &v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetSortBy() string {
	if o == nil || o.SortBy == nil {
		var ret string
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetSortByOk() (*string, bool) {
	if o == nil || o.SortBy == nil {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasSortBy() bool {
	if o != nil && o.SortBy != nil {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given string and assigns it to the SortBy field.
func (o *SearchSearchRequest) SetSortBy(v string) {
	o.SortBy = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetSortOrder() string {
	if o == nil || o.SortOrder == nil {
		var ret string
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetSortOrderOk() (*string, bool) {
	if o == nil || o.SortOrder == nil {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasSortOrder() bool {
	if o != nil && o.SortOrder != nil {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given string and assigns it to the SortOrder field.
func (o *SearchSearchRequest) SetSortOrder(v string) {
	o.SortOrder = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *SearchSearchRequest) GetTenants() []string {
	if o == nil || o.Tenants == nil {
		var ret []string
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSearchRequest) GetTenantsOk() (*[]string, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *SearchSearchRequest) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []string and assigns it to the Tenants field.
func (o *SearchSearchRequest) SetTenants(v []string) {
	o.Tenants = &v
}

func (o SearchSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregate != nil {
		toSerialize["aggregate"] = o.Aggregate
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.MaxResults != nil {
		toSerialize["max-results"] = o.MaxResults
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.QueryString != nil {
		toSerialize["query-string"] = o.QueryString
	}
	if o.SortBy != nil {
		toSerialize["sort-by"] = o.SortBy
	}
	if o.SortOrder != nil {
		toSerialize["sort-order"] = o.SortOrder
	}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	return json.Marshal(toSerialize)
}

type NullableSearchSearchRequest struct {
	value *SearchSearchRequest
	isSet bool
}

func (v NullableSearchSearchRequest) Get() *SearchSearchRequest {
	return v.value
}

func (v *NullableSearchSearchRequest) Set(val *SearchSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSearchRequest(val *SearchSearchRequest) *NullableSearchSearchRequest {
	return &NullableSearchSearchRequest{value: val, isSet: true}
}

func (v NullableSearchSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


