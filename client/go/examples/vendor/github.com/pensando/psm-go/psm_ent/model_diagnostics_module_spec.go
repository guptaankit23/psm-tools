/*
 * Diagnostics API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// DiagnosticsModuleSpec ModuleSpec contains configuration to collect diagnostics information about a process.
type DiagnosticsModuleSpec struct {
	// Args are command line arguments passed to the module.
	Args *[]string `json:"args,omitempty"`
	// EnableTrace enables traces for a module. Default is false.
	EnableTrace *bool `json:"enable-trace,omitempty"`
	// LogLevel is the logging level of this module. Default is Info.
	LogLevel *string `json:"log-level,omitempty"`
}

// NewDiagnosticsModuleSpec instantiates a new DiagnosticsModuleSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagnosticsModuleSpec() *DiagnosticsModuleSpec {
	this := DiagnosticsModuleSpec{}
	var logLevel string = "info"
	this.LogLevel = &logLevel
	return &this
}

// NewDiagnosticsModuleSpecWithDefaults instantiates a new DiagnosticsModuleSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagnosticsModuleSpecWithDefaults() *DiagnosticsModuleSpec {
	this := DiagnosticsModuleSpec{}
	var logLevel string = "info"
	this.LogLevel = &logLevel
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *DiagnosticsModuleSpec) GetArgs() []string {
	if o == nil || o.Args == nil {
		var ret []string
		return ret
	}
	return *o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticsModuleSpec) GetArgsOk() (*[]string, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *DiagnosticsModuleSpec) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *DiagnosticsModuleSpec) SetArgs(v []string) {
	o.Args = &v
}

// GetEnableTrace returns the EnableTrace field value if set, zero value otherwise.
func (o *DiagnosticsModuleSpec) GetEnableTrace() bool {
	if o == nil || o.EnableTrace == nil {
		var ret bool
		return ret
	}
	return *o.EnableTrace
}

// GetEnableTraceOk returns a tuple with the EnableTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticsModuleSpec) GetEnableTraceOk() (*bool, bool) {
	if o == nil || o.EnableTrace == nil {
		return nil, false
	}
	return o.EnableTrace, true
}

// HasEnableTrace returns a boolean if a field has been set.
func (o *DiagnosticsModuleSpec) HasEnableTrace() bool {
	if o != nil && o.EnableTrace != nil {
		return true
	}

	return false
}

// SetEnableTrace gets a reference to the given bool and assigns it to the EnableTrace field.
func (o *DiagnosticsModuleSpec) SetEnableTrace(v bool) {
	o.EnableTrace = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *DiagnosticsModuleSpec) GetLogLevel() string {
	if o == nil || o.LogLevel == nil {
		var ret string
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticsModuleSpec) GetLogLevelOk() (*string, bool) {
	if o == nil || o.LogLevel == nil {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *DiagnosticsModuleSpec) HasLogLevel() bool {
	if o != nil && o.LogLevel != nil {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given string and assigns it to the LogLevel field.
func (o *DiagnosticsModuleSpec) SetLogLevel(v string) {
	o.LogLevel = &v
}

func (o DiagnosticsModuleSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.EnableTrace != nil {
		toSerialize["enable-trace"] = o.EnableTrace
	}
	if o.LogLevel != nil {
		toSerialize["log-level"] = o.LogLevel
	}
	return json.Marshal(toSerialize)
}

type NullableDiagnosticsModuleSpec struct {
	value *DiagnosticsModuleSpec
	isSet bool
}

func (v NullableDiagnosticsModuleSpec) Get() *DiagnosticsModuleSpec {
	return v.value
}

func (v *NullableDiagnosticsModuleSpec) Set(val *DiagnosticsModuleSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosticsModuleSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosticsModuleSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosticsModuleSpec(val *DiagnosticsModuleSpec) *NullableDiagnosticsModuleSpec {
	return &NullableDiagnosticsModuleSpec{value: val, isSet: true}
}

func (v NullableDiagnosticsModuleSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosticsModuleSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


