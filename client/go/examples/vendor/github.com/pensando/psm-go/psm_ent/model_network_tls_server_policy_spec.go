/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkTLSServerPolicySpec The Service TLS configuration for inbound connections. It is used on all ports specified in the Service spec. Multiple Service objects can select the same workload and provide different server TLS configurations for disjoint sets of ports.
type NetworkTLSServerPolicySpec struct {
	// Client authentication \"None\" means that server does not request and will not validate a client certificate. \"Mandatory\" means that server requests and validates client certificate. \"Optional\" means that server requests client certificate but proceeds even if client does not present it. Default is \"Mandatory\".
	ClientAuthentication *string `json:"client-authentication,omitempty"`
	// Valid DNS names or IP addresses that must appear in the client certificate SubjAltName or Common Name (if SAN is not specified). If client auth is enabled and AllowedPeerId is not specified, server accepts any client certificate as long as it is valid  (not expired and with a valid trust chain).
	TlsServerAllowedPeerId *[]string `json:"tls-server-allowed-peer-id,omitempty"`
	// List of names of certificates to present to clients. The certificates \"usage\" field must contain \"server\". If multiple certificates names are provided, system tries to choose the correct one using SNI, otherwise it picks the first one in the list.
	TlsServerCertificates *[]string `json:"tls-server-certificates,omitempty"`
	// The list of root certificates used to validate a trust chain presented by client. If the list is empty, all roots certificates in the tenant scope are considered.
	TlsServerTrustRoots *[]string `json:"tls-server-trust-roots,omitempty"`
}

// NewNetworkTLSServerPolicySpec instantiates a new NetworkTLSServerPolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkTLSServerPolicySpec() *NetworkTLSServerPolicySpec {
	this := NetworkTLSServerPolicySpec{}
	var clientAuthentication string = "mandatory"
	this.ClientAuthentication = &clientAuthentication
	return &this
}

// NewNetworkTLSServerPolicySpecWithDefaults instantiates a new NetworkTLSServerPolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTLSServerPolicySpecWithDefaults() *NetworkTLSServerPolicySpec {
	this := NetworkTLSServerPolicySpec{}
	var clientAuthentication string = "mandatory"
	this.ClientAuthentication = &clientAuthentication
	return &this
}

// GetClientAuthentication returns the ClientAuthentication field value if set, zero value otherwise.
func (o *NetworkTLSServerPolicySpec) GetClientAuthentication() string {
	if o == nil || o.ClientAuthentication == nil {
		var ret string
		return ret
	}
	return *o.ClientAuthentication
}

// GetClientAuthenticationOk returns a tuple with the ClientAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTLSServerPolicySpec) GetClientAuthenticationOk() (*string, bool) {
	if o == nil || o.ClientAuthentication == nil {
		return nil, false
	}
	return o.ClientAuthentication, true
}

// HasClientAuthentication returns a boolean if a field has been set.
func (o *NetworkTLSServerPolicySpec) HasClientAuthentication() bool {
	if o != nil && o.ClientAuthentication != nil {
		return true
	}

	return false
}

// SetClientAuthentication gets a reference to the given string and assigns it to the ClientAuthentication field.
func (o *NetworkTLSServerPolicySpec) SetClientAuthentication(v string) {
	o.ClientAuthentication = &v
}

// GetTlsServerAllowedPeerId returns the TlsServerAllowedPeerId field value if set, zero value otherwise.
func (o *NetworkTLSServerPolicySpec) GetTlsServerAllowedPeerId() []string {
	if o == nil || o.TlsServerAllowedPeerId == nil {
		var ret []string
		return ret
	}
	return *o.TlsServerAllowedPeerId
}

// GetTlsServerAllowedPeerIdOk returns a tuple with the TlsServerAllowedPeerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTLSServerPolicySpec) GetTlsServerAllowedPeerIdOk() (*[]string, bool) {
	if o == nil || o.TlsServerAllowedPeerId == nil {
		return nil, false
	}
	return o.TlsServerAllowedPeerId, true
}

// HasTlsServerAllowedPeerId returns a boolean if a field has been set.
func (o *NetworkTLSServerPolicySpec) HasTlsServerAllowedPeerId() bool {
	if o != nil && o.TlsServerAllowedPeerId != nil {
		return true
	}

	return false
}

// SetTlsServerAllowedPeerId gets a reference to the given []string and assigns it to the TlsServerAllowedPeerId field.
func (o *NetworkTLSServerPolicySpec) SetTlsServerAllowedPeerId(v []string) {
	o.TlsServerAllowedPeerId = &v
}

// GetTlsServerCertificates returns the TlsServerCertificates field value if set, zero value otherwise.
func (o *NetworkTLSServerPolicySpec) GetTlsServerCertificates() []string {
	if o == nil || o.TlsServerCertificates == nil {
		var ret []string
		return ret
	}
	return *o.TlsServerCertificates
}

// GetTlsServerCertificatesOk returns a tuple with the TlsServerCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTLSServerPolicySpec) GetTlsServerCertificatesOk() (*[]string, bool) {
	if o == nil || o.TlsServerCertificates == nil {
		return nil, false
	}
	return o.TlsServerCertificates, true
}

// HasTlsServerCertificates returns a boolean if a field has been set.
func (o *NetworkTLSServerPolicySpec) HasTlsServerCertificates() bool {
	if o != nil && o.TlsServerCertificates != nil {
		return true
	}

	return false
}

// SetTlsServerCertificates gets a reference to the given []string and assigns it to the TlsServerCertificates field.
func (o *NetworkTLSServerPolicySpec) SetTlsServerCertificates(v []string) {
	o.TlsServerCertificates = &v
}

// GetTlsServerTrustRoots returns the TlsServerTrustRoots field value if set, zero value otherwise.
func (o *NetworkTLSServerPolicySpec) GetTlsServerTrustRoots() []string {
	if o == nil || o.TlsServerTrustRoots == nil {
		var ret []string
		return ret
	}
	return *o.TlsServerTrustRoots
}

// GetTlsServerTrustRootsOk returns a tuple with the TlsServerTrustRoots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTLSServerPolicySpec) GetTlsServerTrustRootsOk() (*[]string, bool) {
	if o == nil || o.TlsServerTrustRoots == nil {
		return nil, false
	}
	return o.TlsServerTrustRoots, true
}

// HasTlsServerTrustRoots returns a boolean if a field has been set.
func (o *NetworkTLSServerPolicySpec) HasTlsServerTrustRoots() bool {
	if o != nil && o.TlsServerTrustRoots != nil {
		return true
	}

	return false
}

// SetTlsServerTrustRoots gets a reference to the given []string and assigns it to the TlsServerTrustRoots field.
func (o *NetworkTLSServerPolicySpec) SetTlsServerTrustRoots(v []string) {
	o.TlsServerTrustRoots = &v
}

func (o NetworkTLSServerPolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientAuthentication != nil {
		toSerialize["client-authentication"] = o.ClientAuthentication
	}
	if o.TlsServerAllowedPeerId != nil {
		toSerialize["tls-server-allowed-peer-id"] = o.TlsServerAllowedPeerId
	}
	if o.TlsServerCertificates != nil {
		toSerialize["tls-server-certificates"] = o.TlsServerCertificates
	}
	if o.TlsServerTrustRoots != nil {
		toSerialize["tls-server-trust-roots"] = o.TlsServerTrustRoots
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkTLSServerPolicySpec struct {
	value *NetworkTLSServerPolicySpec
	isSet bool
}

func (v NullableNetworkTLSServerPolicySpec) Get() *NetworkTLSServerPolicySpec {
	return v.value
}

func (v *NullableNetworkTLSServerPolicySpec) Set(val *NetworkTLSServerPolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTLSServerPolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTLSServerPolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTLSServerPolicySpec(val *NetworkTLSServerPolicySpec) *NullableNetworkTLSServerPolicySpec {
	return &NullableNetworkTLSServerPolicySpec{value: val, isSet: true}
}

func (v NullableNetworkTLSServerPolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTLSServerPolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


