/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkNetworkInterfaceSpec NetworkInterfaceSpec.
type NetworkNetworkInterfaceSpec struct {
	// desired Admin state of the port.
	AdminStatus *string `json:"admin-status,omitempty"`
	// AttachNetwork associates the interface with a Network. This is only valid for HOST_PF type.
	AttachNetwork *string `json:"attach-network,omitempty"`
	AttachTenant *string `json:"attach-tenant,omitempty"`
	// ConnectionTracking enables connection tracking on the interface. This is valid only for HOST_PF type.
	ConnectionTracking *bool `json:"connection-tracking,omitempty"`
	// EnableFwLogging enables flow logging on the interface. This is valid only for HOST_PF type.
	EnableFwLogging *bool `json:"enable-fw-logging,omitempty"`
	IpAllocType *string `json:"ip-alloc-type,omitempty"`
	IpConfig *ClusterIPConfig `json:"ip-config,omitempty"`
	// Override system allocated MAC address. Should be a valid MAC address.
	MacAddress *string `json:"mac-address,omitempty"`
	// Mtu of the interface.
	Mtu *int64 `json:"mtu,omitempty"`
	Pause *NetworkPauseSpec `json:"pause,omitempty"`
	// Intefaae speed.
	Speed *string `json:"speed,omitempty"`
	TxPolicer *string `json:"tx-policer,omitempty"`
	// Type specifies the type of interface.
	Type *string `json:"type,omitempty"`
	// VNFAttached knob on the interface. This is valid only for HOST_PF type.
	VnfAttached *bool `json:"vnf-attached,omitempty"`
}

// NewNetworkNetworkInterfaceSpec instantiates a new NetworkNetworkInterfaceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkNetworkInterfaceSpec() *NetworkNetworkInterfaceSpec {
	this := NetworkNetworkInterfaceSpec{}
	var adminStatus string = "up"
	this.AdminStatus = &adminStatus
	var connectionTracking bool = false
	this.ConnectionTracking = &connectionTracking
	var ipAllocType string = "none"
	this.IpAllocType = &ipAllocType
	var type_ string = "none"
	this.Type = &type_
	return &this
}

// NewNetworkNetworkInterfaceSpecWithDefaults instantiates a new NetworkNetworkInterfaceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkNetworkInterfaceSpecWithDefaults() *NetworkNetworkInterfaceSpec {
	this := NetworkNetworkInterfaceSpec{}
	var adminStatus string = "up"
	this.AdminStatus = &adminStatus
	var connectionTracking bool = false
	this.ConnectionTracking = &connectionTracking
	var ipAllocType string = "none"
	this.IpAllocType = &ipAllocType
	var type_ string = "none"
	this.Type = &type_
	return &this
}

// GetAdminStatus returns the AdminStatus field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetAdminStatus() string {
	if o == nil || o.AdminStatus == nil {
		var ret string
		return ret
	}
	return *o.AdminStatus
}

// GetAdminStatusOk returns a tuple with the AdminStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetAdminStatusOk() (*string, bool) {
	if o == nil || o.AdminStatus == nil {
		return nil, false
	}
	return o.AdminStatus, true
}

// HasAdminStatus returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasAdminStatus() bool {
	if o != nil && o.AdminStatus != nil {
		return true
	}

	return false
}

// SetAdminStatus gets a reference to the given string and assigns it to the AdminStatus field.
func (o *NetworkNetworkInterfaceSpec) SetAdminStatus(v string) {
	o.AdminStatus = &v
}

// GetAttachNetwork returns the AttachNetwork field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetAttachNetwork() string {
	if o == nil || o.AttachNetwork == nil {
		var ret string
		return ret
	}
	return *o.AttachNetwork
}

// GetAttachNetworkOk returns a tuple with the AttachNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetAttachNetworkOk() (*string, bool) {
	if o == nil || o.AttachNetwork == nil {
		return nil, false
	}
	return o.AttachNetwork, true
}

// HasAttachNetwork returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasAttachNetwork() bool {
	if o != nil && o.AttachNetwork != nil {
		return true
	}

	return false
}

// SetAttachNetwork gets a reference to the given string and assigns it to the AttachNetwork field.
func (o *NetworkNetworkInterfaceSpec) SetAttachNetwork(v string) {
	o.AttachNetwork = &v
}

// GetAttachTenant returns the AttachTenant field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetAttachTenant() string {
	if o == nil || o.AttachTenant == nil {
		var ret string
		return ret
	}
	return *o.AttachTenant
}

// GetAttachTenantOk returns a tuple with the AttachTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetAttachTenantOk() (*string, bool) {
	if o == nil || o.AttachTenant == nil {
		return nil, false
	}
	return o.AttachTenant, true
}

// HasAttachTenant returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasAttachTenant() bool {
	if o != nil && o.AttachTenant != nil {
		return true
	}

	return false
}

// SetAttachTenant gets a reference to the given string and assigns it to the AttachTenant field.
func (o *NetworkNetworkInterfaceSpec) SetAttachTenant(v string) {
	o.AttachTenant = &v
}

// GetConnectionTracking returns the ConnectionTracking field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetConnectionTracking() bool {
	if o == nil || o.ConnectionTracking == nil {
		var ret bool
		return ret
	}
	return *o.ConnectionTracking
}

// GetConnectionTrackingOk returns a tuple with the ConnectionTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetConnectionTrackingOk() (*bool, bool) {
	if o == nil || o.ConnectionTracking == nil {
		return nil, false
	}
	return o.ConnectionTracking, true
}

// HasConnectionTracking returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasConnectionTracking() bool {
	if o != nil && o.ConnectionTracking != nil {
		return true
	}

	return false
}

// SetConnectionTracking gets a reference to the given bool and assigns it to the ConnectionTracking field.
func (o *NetworkNetworkInterfaceSpec) SetConnectionTracking(v bool) {
	o.ConnectionTracking = &v
}

// GetEnableFwLogging returns the EnableFwLogging field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetEnableFwLogging() bool {
	if o == nil || o.EnableFwLogging == nil {
		var ret bool
		return ret
	}
	return *o.EnableFwLogging
}

// GetEnableFwLoggingOk returns a tuple with the EnableFwLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetEnableFwLoggingOk() (*bool, bool) {
	if o == nil || o.EnableFwLogging == nil {
		return nil, false
	}
	return o.EnableFwLogging, true
}

// HasEnableFwLogging returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasEnableFwLogging() bool {
	if o != nil && o.EnableFwLogging != nil {
		return true
	}

	return false
}

// SetEnableFwLogging gets a reference to the given bool and assigns it to the EnableFwLogging field.
func (o *NetworkNetworkInterfaceSpec) SetEnableFwLogging(v bool) {
	o.EnableFwLogging = &v
}

// GetIpAllocType returns the IpAllocType field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetIpAllocType() string {
	if o == nil || o.IpAllocType == nil {
		var ret string
		return ret
	}
	return *o.IpAllocType
}

// GetIpAllocTypeOk returns a tuple with the IpAllocType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetIpAllocTypeOk() (*string, bool) {
	if o == nil || o.IpAllocType == nil {
		return nil, false
	}
	return o.IpAllocType, true
}

// HasIpAllocType returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasIpAllocType() bool {
	if o != nil && o.IpAllocType != nil {
		return true
	}

	return false
}

// SetIpAllocType gets a reference to the given string and assigns it to the IpAllocType field.
func (o *NetworkNetworkInterfaceSpec) SetIpAllocType(v string) {
	o.IpAllocType = &v
}

// GetIpConfig returns the IpConfig field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetIpConfig() ClusterIPConfig {
	if o == nil || o.IpConfig == nil {
		var ret ClusterIPConfig
		return ret
	}
	return *o.IpConfig
}

// GetIpConfigOk returns a tuple with the IpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetIpConfigOk() (*ClusterIPConfig, bool) {
	if o == nil || o.IpConfig == nil {
		return nil, false
	}
	return o.IpConfig, true
}

// HasIpConfig returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasIpConfig() bool {
	if o != nil && o.IpConfig != nil {
		return true
	}

	return false
}

// SetIpConfig gets a reference to the given ClusterIPConfig and assigns it to the IpConfig field.
func (o *NetworkNetworkInterfaceSpec) SetIpConfig(v ClusterIPConfig) {
	o.IpConfig = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetMacAddress() string {
	if o == nil || o.MacAddress == nil {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetMacAddressOk() (*string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *NetworkNetworkInterfaceSpec) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetMtu() int64 {
	if o == nil || o.Mtu == nil {
		var ret int64
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetMtuOk() (*int64, bool) {
	if o == nil || o.Mtu == nil {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasMtu() bool {
	if o != nil && o.Mtu != nil {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int64 and assigns it to the Mtu field.
func (o *NetworkNetworkInterfaceSpec) SetMtu(v int64) {
	o.Mtu = &v
}

// GetPause returns the Pause field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetPause() NetworkPauseSpec {
	if o == nil || o.Pause == nil {
		var ret NetworkPauseSpec
		return ret
	}
	return *o.Pause
}

// GetPauseOk returns a tuple with the Pause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetPauseOk() (*NetworkPauseSpec, bool) {
	if o == nil || o.Pause == nil {
		return nil, false
	}
	return o.Pause, true
}

// HasPause returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasPause() bool {
	if o != nil && o.Pause != nil {
		return true
	}

	return false
}

// SetPause gets a reference to the given NetworkPauseSpec and assigns it to the Pause field.
func (o *NetworkNetworkInterfaceSpec) SetPause(v NetworkPauseSpec) {
	o.Pause = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetSpeed() string {
	if o == nil || o.Speed == nil {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetSpeedOk() (*string, bool) {
	if o == nil || o.Speed == nil {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasSpeed() bool {
	if o != nil && o.Speed != nil {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *NetworkNetworkInterfaceSpec) SetSpeed(v string) {
	o.Speed = &v
}

// GetTxPolicer returns the TxPolicer field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetTxPolicer() string {
	if o == nil || o.TxPolicer == nil {
		var ret string
		return ret
	}
	return *o.TxPolicer
}

// GetTxPolicerOk returns a tuple with the TxPolicer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetTxPolicerOk() (*string, bool) {
	if o == nil || o.TxPolicer == nil {
		return nil, false
	}
	return o.TxPolicer, true
}

// HasTxPolicer returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasTxPolicer() bool {
	if o != nil && o.TxPolicer != nil {
		return true
	}

	return false
}

// SetTxPolicer gets a reference to the given string and assigns it to the TxPolicer field.
func (o *NetworkNetworkInterfaceSpec) SetTxPolicer(v string) {
	o.TxPolicer = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkNetworkInterfaceSpec) SetType(v string) {
	o.Type = &v
}

// GetVnfAttached returns the VnfAttached field value if set, zero value otherwise.
func (o *NetworkNetworkInterfaceSpec) GetVnfAttached() bool {
	if o == nil || o.VnfAttached == nil {
		var ret bool
		return ret
	}
	return *o.VnfAttached
}

// GetVnfAttachedOk returns a tuple with the VnfAttached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkInterfaceSpec) GetVnfAttachedOk() (*bool, bool) {
	if o == nil || o.VnfAttached == nil {
		return nil, false
	}
	return o.VnfAttached, true
}

// HasVnfAttached returns a boolean if a field has been set.
func (o *NetworkNetworkInterfaceSpec) HasVnfAttached() bool {
	if o != nil && o.VnfAttached != nil {
		return true
	}

	return false
}

// SetVnfAttached gets a reference to the given bool and assigns it to the VnfAttached field.
func (o *NetworkNetworkInterfaceSpec) SetVnfAttached(v bool) {
	o.VnfAttached = &v
}

func (o NetworkNetworkInterfaceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdminStatus != nil {
		toSerialize["admin-status"] = o.AdminStatus
	}
	if o.AttachNetwork != nil {
		toSerialize["attach-network"] = o.AttachNetwork
	}
	if o.AttachTenant != nil {
		toSerialize["attach-tenant"] = o.AttachTenant
	}
	if o.ConnectionTracking != nil {
		toSerialize["connection-tracking"] = o.ConnectionTracking
	}
	if o.EnableFwLogging != nil {
		toSerialize["enable-fw-logging"] = o.EnableFwLogging
	}
	if o.IpAllocType != nil {
		toSerialize["ip-alloc-type"] = o.IpAllocType
	}
	if o.IpConfig != nil {
		toSerialize["ip-config"] = o.IpConfig
	}
	if o.MacAddress != nil {
		toSerialize["mac-address"] = o.MacAddress
	}
	if o.Mtu != nil {
		toSerialize["mtu"] = o.Mtu
	}
	if o.Pause != nil {
		toSerialize["pause"] = o.Pause
	}
	if o.Speed != nil {
		toSerialize["speed"] = o.Speed
	}
	if o.TxPolicer != nil {
		toSerialize["tx-policer"] = o.TxPolicer
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.VnfAttached != nil {
		toSerialize["vnf-attached"] = o.VnfAttached
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkNetworkInterfaceSpec struct {
	value *NetworkNetworkInterfaceSpec
	isSet bool
}

func (v NullableNetworkNetworkInterfaceSpec) Get() *NetworkNetworkInterfaceSpec {
	return v.value
}

func (v *NullableNetworkNetworkInterfaceSpec) Set(val *NetworkNetworkInterfaceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkNetworkInterfaceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkNetworkInterfaceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkNetworkInterfaceSpec(val *NetworkNetworkInterfaceSpec) *NullableNetworkNetworkInterfaceSpec {
	return &NullableNetworkNetworkInterfaceSpec{value: val, isSet: true}
}

func (v NullableNetworkNetworkInterfaceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkNetworkInterfaceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


