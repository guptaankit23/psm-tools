/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// MonitoringV1ApiService MonitoringV1Api service
type MonitoringV1ApiService service

type ApiMonitoringAddAlertDestinationRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringAlertDestination
}

func (r ApiMonitoringAddAlertDestinationRequest) Body(body MonitoringAlertDestination) ApiMonitoringAddAlertDestinationRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddAlertDestinationRequest) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.AddAlertDestinationExecute(r)
}

/*
 * AddAlertDestination Create AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddAlertDestinationRequest
 */
func (a *MonitoringV1ApiService) AddAlertDestination(ctx _context.Context, oTenant string) ApiMonitoringAddAlertDestinationRequest {
	return ApiMonitoringAddAlertDestinationRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) AddAlertDestinationExecute(r ApiMonitoringAddAlertDestinationRequest) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddAlertDestination")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddAlertDestinationExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddAlertDestination1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringAlertDestination
}

func (r ApiMonitoringAddAlertDestination1Request) Body(body MonitoringAlertDestination) ApiMonitoringAddAlertDestination1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddAlertDestination1Request) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.AddAlertDestination1Execute(r)
}

/*
 * AddAlertDestination1 Create AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddAlertDestination1Request
 */
func (a *MonitoringV1ApiService) AddAlertDestination1(ctx _context.Context) ApiMonitoringAddAlertDestination1Request {
	return ApiMonitoringAddAlertDestination1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) AddAlertDestination1Execute(r ApiMonitoringAddAlertDestination1Request) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddAlertDestination1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertDestinations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddAlertDestination1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringAlertPolicy
}

func (r ApiMonitoringAddAlertPolicyRequest) Body(body MonitoringAlertPolicy) ApiMonitoringAddAlertPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddAlertPolicyRequest) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddAlertPolicyExecute(r)
}

/*
 * AddAlertPolicy Create AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) AddAlertPolicy(ctx _context.Context, oTenant string) ApiMonitoringAddAlertPolicyRequest {
	return ApiMonitoringAddAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) AddAlertPolicyExecute(r ApiMonitoringAddAlertPolicyRequest) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringAlertPolicy
}

func (r ApiMonitoringAddAlertPolicy1Request) Body(body MonitoringAlertPolicy) ApiMonitoringAddAlertPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddAlertPolicy1Request) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddAlertPolicy1Execute(r)
}

/*
 * AddAlertPolicy1 Create AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) AddAlertPolicy1(ctx _context.Context) ApiMonitoringAddAlertPolicy1Request {
	return ApiMonitoringAddAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) AddAlertPolicy1Execute(r ApiMonitoringAddAlertPolicy1Request) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddArchiveRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringArchiveRequest
}

func (r ApiMonitoringAddArchiveRequestRequest) Body(body MonitoringArchiveRequest) ApiMonitoringAddArchiveRequestRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddArchiveRequestRequest) Execute() (MonitoringArchiveRequest, *_nethttp.Response, error) {
	return r.ApiService.AddArchiveRequestExecute(r)
}

/*
 * AddArchiveRequest Create ArchiveRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddArchiveRequestRequest
 */
func (a *MonitoringV1ApiService) AddArchiveRequest(ctx _context.Context, oTenant string) ApiMonitoringAddArchiveRequestRequest {
	return ApiMonitoringAddArchiveRequestRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequest
 */
func (a *MonitoringV1ApiService) AddArchiveRequestExecute(r ApiMonitoringAddArchiveRequestRequest) (MonitoringArchiveRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddArchiveRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/archive-requests"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddArchiveRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddArchiveRequest1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringArchiveRequest
}

func (r ApiMonitoringAddArchiveRequest1Request) Body(body MonitoringArchiveRequest) ApiMonitoringAddArchiveRequest1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddArchiveRequest1Request) Execute() (MonitoringArchiveRequest, *_nethttp.Response, error) {
	return r.ApiService.AddArchiveRequest1Execute(r)
}

/*
 * AddArchiveRequest1 Create ArchiveRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddArchiveRequest1Request
 */
func (a *MonitoringV1ApiService) AddArchiveRequest1(ctx _context.Context) ApiMonitoringAddArchiveRequest1Request {
	return ApiMonitoringAddArchiveRequest1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequest
 */
func (a *MonitoringV1ApiService) AddArchiveRequest1Execute(r ApiMonitoringAddArchiveRequest1Request) (MonitoringArchiveRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddArchiveRequest1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/archive-requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddArchiveRequest1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddAuditPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringAuditPolicy
}

func (r ApiMonitoringAddAuditPolicyRequest) Body(body MonitoringAuditPolicy) ApiMonitoringAddAuditPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddAuditPolicyRequest) Execute() (MonitoringAuditPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddAuditPolicyExecute(r)
}

/*
 * AddAuditPolicy Create AuditPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddAuditPolicyRequest
 */
func (a *MonitoringV1ApiService) AddAuditPolicy(ctx _context.Context, oTenant string) ApiMonitoringAddAuditPolicyRequest {
	return ApiMonitoringAddAuditPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAuditPolicy
 */
func (a *MonitoringV1ApiService) AddAuditPolicyExecute(r ApiMonitoringAddAuditPolicyRequest) (MonitoringAuditPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAuditPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddAuditPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/audit-policy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddAuditPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddAuditPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringAuditPolicy
}

func (r ApiMonitoringAddAuditPolicy1Request) Body(body MonitoringAuditPolicy) ApiMonitoringAddAuditPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddAuditPolicy1Request) Execute() (MonitoringAuditPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddAuditPolicy1Execute(r)
}

/*
 * AddAuditPolicy1 Create AuditPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddAuditPolicy1Request
 */
func (a *MonitoringV1ApiService) AddAuditPolicy1(ctx _context.Context) ApiMonitoringAddAuditPolicy1Request {
	return ApiMonitoringAddAuditPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAuditPolicy
 */
func (a *MonitoringV1ApiService) AddAuditPolicy1Execute(r ApiMonitoringAddAuditPolicy1Request) (MonitoringAuditPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAuditPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddAuditPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/audit-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddAuditPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddEventPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringEventPolicy
}

func (r ApiMonitoringAddEventPolicyRequest) Body(body MonitoringEventPolicy) ApiMonitoringAddEventPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddEventPolicyRequest) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddEventPolicyExecute(r)
}

/*
 * AddEventPolicy Create EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddEventPolicyRequest
 */
func (a *MonitoringV1ApiService) AddEventPolicy(ctx _context.Context, oTenant string) ApiMonitoringAddEventPolicyRequest {
	return ApiMonitoringAddEventPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) AddEventPolicyExecute(r ApiMonitoringAddEventPolicyRequest) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddEventPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddEventPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddEventPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringEventPolicy
}

func (r ApiMonitoringAddEventPolicy1Request) Body(body MonitoringEventPolicy) ApiMonitoringAddEventPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddEventPolicy1Request) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddEventPolicy1Execute(r)
}

/*
 * AddEventPolicy1 Create EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddEventPolicy1Request
 */
func (a *MonitoringV1ApiService) AddEventPolicy1(ctx _context.Context) ApiMonitoringAddEventPolicy1Request {
	return ApiMonitoringAddEventPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) AddEventPolicy1Execute(r ApiMonitoringAddEventPolicy1Request) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddEventPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/event-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddEventPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddFlowExportPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringFlowExportPolicy
}

func (r ApiMonitoringAddFlowExportPolicyRequest) Body(body MonitoringFlowExportPolicy) ApiMonitoringAddFlowExportPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddFlowExportPolicyRequest) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddFlowExportPolicyExecute(r)
}

/*
 * AddFlowExportPolicy Create FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddFlowExportPolicyRequest
 */
func (a *MonitoringV1ApiService) AddFlowExportPolicy(ctx _context.Context, oTenant string) ApiMonitoringAddFlowExportPolicyRequest {
	return ApiMonitoringAddFlowExportPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) AddFlowExportPolicyExecute(r ApiMonitoringAddFlowExportPolicyRequest) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddFlowExportPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddFlowExportPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddFlowExportPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringFlowExportPolicy
}

func (r ApiMonitoringAddFlowExportPolicy1Request) Body(body MonitoringFlowExportPolicy) ApiMonitoringAddFlowExportPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddFlowExportPolicy1Request) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddFlowExportPolicy1Execute(r)
}

/*
 * AddFlowExportPolicy1 Create FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddFlowExportPolicy1Request
 */
func (a *MonitoringV1ApiService) AddFlowExportPolicy1(ctx _context.Context) ApiMonitoringAddFlowExportPolicy1Request {
	return ApiMonitoringAddFlowExportPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) AddFlowExportPolicy1Execute(r ApiMonitoringAddFlowExportPolicy1Request) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddFlowExportPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/flowExportPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddFlowExportPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddFwlogPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringFwlogPolicy
}

func (r ApiMonitoringAddFwlogPolicyRequest) Body(body MonitoringFwlogPolicy) ApiMonitoringAddFwlogPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddFwlogPolicyRequest) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddFwlogPolicyExecute(r)
}

/*
 * AddFwlogPolicy Create FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddFwlogPolicyRequest
 */
func (a *MonitoringV1ApiService) AddFwlogPolicy(ctx _context.Context, oTenant string) ApiMonitoringAddFwlogPolicyRequest {
	return ApiMonitoringAddFwlogPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) AddFwlogPolicyExecute(r ApiMonitoringAddFwlogPolicyRequest) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddFwlogPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddFwlogPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddFwlogPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringFwlogPolicy
}

func (r ApiMonitoringAddFwlogPolicy1Request) Body(body MonitoringFwlogPolicy) ApiMonitoringAddFwlogPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddFwlogPolicy1Request) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddFwlogPolicy1Execute(r)
}

/*
 * AddFwlogPolicy1 Create FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddFwlogPolicy1Request
 */
func (a *MonitoringV1ApiService) AddFwlogPolicy1(ctx _context.Context) ApiMonitoringAddFwlogPolicy1Request {
	return ApiMonitoringAddFwlogPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) AddFwlogPolicy1Execute(r ApiMonitoringAddFwlogPolicy1Request) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddFwlogPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/fwlogPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddFwlogPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddMirrorSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringMirrorSession
}

func (r ApiMonitoringAddMirrorSessionRequest) Body(body MonitoringMirrorSession) ApiMonitoringAddMirrorSessionRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddMirrorSessionRequest) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.AddMirrorSessionExecute(r)
}

/*
 * AddMirrorSession Create MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddMirrorSessionRequest
 */
func (a *MonitoringV1ApiService) AddMirrorSession(ctx _context.Context, oTenant string) ApiMonitoringAddMirrorSessionRequest {
	return ApiMonitoringAddMirrorSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) AddMirrorSessionExecute(r ApiMonitoringAddMirrorSessionRequest) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddMirrorSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddMirrorSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddMirrorSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringMirrorSession
}

func (r ApiMonitoringAddMirrorSession1Request) Body(body MonitoringMirrorSession) ApiMonitoringAddMirrorSession1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddMirrorSession1Request) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.AddMirrorSession1Execute(r)
}

/*
 * AddMirrorSession1 Create MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddMirrorSession1Request
 */
func (a *MonitoringV1ApiService) AddMirrorSession1(ctx _context.Context) ApiMonitoringAddMirrorSession1Request {
	return ApiMonitoringAddMirrorSession1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) AddMirrorSession1Execute(r ApiMonitoringAddMirrorSession1Request) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddMirrorSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/MirrorSession"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddMirrorSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddStatsAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringStatsAlertPolicy
}

func (r ApiMonitoringAddStatsAlertPolicyRequest) Body(body MonitoringStatsAlertPolicy) ApiMonitoringAddStatsAlertPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddStatsAlertPolicyRequest) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddStatsAlertPolicyExecute(r)
}

/*
 * AddStatsAlertPolicy Create StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddStatsAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) AddStatsAlertPolicy(ctx _context.Context, oTenant string) ApiMonitoringAddStatsAlertPolicyRequest {
	return ApiMonitoringAddStatsAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) AddStatsAlertPolicyExecute(r ApiMonitoringAddStatsAlertPolicyRequest) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddStatsAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddStatsAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddStatsAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringStatsAlertPolicy
}

func (r ApiMonitoringAddStatsAlertPolicy1Request) Body(body MonitoringStatsAlertPolicy) ApiMonitoringAddStatsAlertPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddStatsAlertPolicy1Request) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddStatsAlertPolicy1Execute(r)
}

/*
 * AddStatsAlertPolicy1 Create StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddStatsAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) AddStatsAlertPolicy1(ctx _context.Context) ApiMonitoringAddStatsAlertPolicy1Request {
	return ApiMonitoringAddStatsAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) AddStatsAlertPolicy1Execute(r ApiMonitoringAddStatsAlertPolicy1Request) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddStatsAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/statsAlertPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddStatsAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddTechSupportRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringTechSupportRequest
}

func (r ApiMonitoringAddTechSupportRequestRequest) Body(body MonitoringTechSupportRequest) ApiMonitoringAddTechSupportRequestRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddTechSupportRequestRequest) Execute() (MonitoringTechSupportRequest, *_nethttp.Response, error) {
	return r.ApiService.AddTechSupportRequestExecute(r)
}

/*
 * AddTechSupportRequest Create TechSupportRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddTechSupportRequestRequest
 */
func (a *MonitoringV1ApiService) AddTechSupportRequest(ctx _context.Context) ApiMonitoringAddTechSupportRequestRequest {
	return ApiMonitoringAddTechSupportRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTechSupportRequest
 */
func (a *MonitoringV1ApiService) AddTechSupportRequestExecute(r ApiMonitoringAddTechSupportRequestRequest) (MonitoringTechSupportRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTechSupportRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddTechSupportRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/techsupport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddTechSupportRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddTroubleshootingSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringTroubleshootingSession
}

func (r ApiMonitoringAddTroubleshootingSessionRequest) Body(body MonitoringTroubleshootingSession) ApiMonitoringAddTroubleshootingSessionRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringAddTroubleshootingSessionRequest) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.AddTroubleshootingSessionExecute(r)
}

/*
 * AddTroubleshootingSession Create TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringAddTroubleshootingSessionRequest
 */
func (a *MonitoringV1ApiService) AddTroubleshootingSession(ctx _context.Context, oTenant string) ApiMonitoringAddTroubleshootingSessionRequest {
	return ApiMonitoringAddTroubleshootingSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) AddTroubleshootingSessionExecute(r ApiMonitoringAddTroubleshootingSessionRequest) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddTroubleshootingSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddTroubleshootingSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringAddTroubleshootingSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringTroubleshootingSession
}

func (r ApiMonitoringAddTroubleshootingSession1Request) Body(body MonitoringTroubleshootingSession) ApiMonitoringAddTroubleshootingSession1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringAddTroubleshootingSession1Request) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.AddTroubleshootingSession1Execute(r)
}

/*
 * AddTroubleshootingSession1 Create TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringAddTroubleshootingSession1Request
 */
func (a *MonitoringV1ApiService) AddTroubleshootingSession1(ctx _context.Context) ApiMonitoringAddTroubleshootingSession1Request {
	return ApiMonitoringAddTroubleshootingSession1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) AddTroubleshootingSession1Execute(r ApiMonitoringAddTroubleshootingSession1Request) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.AddTroubleshootingSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/TroubleshootingSession"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddTroubleshootingSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringCancelRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringCancelArchiveRequest
}

func (r ApiMonitoringCancelRequest) Body(body MonitoringCancelArchiveRequest) ApiMonitoringCancelRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringCancelRequest) Execute() (MonitoringArchiveRequest, *_nethttp.Response, error) {
	return r.ApiService.CancelExecute(r)
}

/*
 * Cancel Method for Cancel
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringCancelRequest
 */
func (a *MonitoringV1ApiService) Cancel(ctx _context.Context, oTenant string, oName string) ApiMonitoringCancelRequest {
	return ApiMonitoringCancelRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequest
 */
func (a *MonitoringV1ApiService) CancelExecute(r ApiMonitoringCancelRequest) (MonitoringArchiveRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.Cancel")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/archive-requests/{O.Name}/Cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.CancelExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringCancel1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringCancelArchiveRequest
}

func (r ApiMonitoringCancel1Request) Body(body MonitoringCancelArchiveRequest) ApiMonitoringCancel1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringCancel1Request) Execute() (MonitoringArchiveRequest, *_nethttp.Response, error) {
	return r.ApiService.Cancel1Execute(r)
}

/*
 * Cancel1 Method for Cancel1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringCancel1Request
 */
func (a *MonitoringV1ApiService) Cancel1(ctx _context.Context, oName string) ApiMonitoringCancel1Request {
	return ApiMonitoringCancel1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequest
 */
func (a *MonitoringV1ApiService) Cancel1Execute(r ApiMonitoringCancel1Request) (MonitoringArchiveRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.Cancel1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/archive-requests/{O.Name}/Cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.Cancel1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteAlertDestinationRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteAlertDestinationRequest) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.DeleteAlertDestinationExecute(r)
}

/*
 * DeleteAlertDestination Delete AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteAlertDestinationRequest
 */
func (a *MonitoringV1ApiService) DeleteAlertDestination(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteAlertDestinationRequest {
	return ApiMonitoringDeleteAlertDestinationRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) DeleteAlertDestinationExecute(r ApiMonitoringDeleteAlertDestinationRequest) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteAlertDestination")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteAlertDestinationExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteAlertDestination1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteAlertDestination1Request) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.DeleteAlertDestination1Execute(r)
}

/*
 * DeleteAlertDestination1 Delete AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteAlertDestination1Request
 */
func (a *MonitoringV1ApiService) DeleteAlertDestination1(ctx _context.Context, oName string) ApiMonitoringDeleteAlertDestination1Request {
	return ApiMonitoringDeleteAlertDestination1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) DeleteAlertDestination1Execute(r ApiMonitoringDeleteAlertDestination1Request) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteAlertDestination1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertDestinations/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteAlertDestination1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteAlertPolicyRequest) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteAlertPolicyExecute(r)
}

/*
 * DeleteAlertPolicy Delete AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) DeleteAlertPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteAlertPolicyRequest {
	return ApiMonitoringDeleteAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) DeleteAlertPolicyExecute(r ApiMonitoringDeleteAlertPolicyRequest) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteAlertPolicy1Request) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteAlertPolicy1Execute(r)
}

/*
 * DeleteAlertPolicy1 Delete AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) DeleteAlertPolicy1(ctx _context.Context, oName string) ApiMonitoringDeleteAlertPolicy1Request {
	return ApiMonitoringDeleteAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) DeleteAlertPolicy1Execute(r ApiMonitoringDeleteAlertPolicy1Request) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteArchiveRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteArchiveRequestRequest) Execute() (MonitoringArchiveRequest, *_nethttp.Response, error) {
	return r.ApiService.DeleteArchiveRequestExecute(r)
}

/*
 * DeleteArchiveRequest Delete ArchiveRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteArchiveRequestRequest
 */
func (a *MonitoringV1ApiService) DeleteArchiveRequest(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteArchiveRequestRequest {
	return ApiMonitoringDeleteArchiveRequestRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequest
 */
func (a *MonitoringV1ApiService) DeleteArchiveRequestExecute(r ApiMonitoringDeleteArchiveRequestRequest) (MonitoringArchiveRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteArchiveRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/archive-requests/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteArchiveRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteArchiveRequest1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteArchiveRequest1Request) Execute() (MonitoringArchiveRequest, *_nethttp.Response, error) {
	return r.ApiService.DeleteArchiveRequest1Execute(r)
}

/*
 * DeleteArchiveRequest1 Delete ArchiveRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteArchiveRequest1Request
 */
func (a *MonitoringV1ApiService) DeleteArchiveRequest1(ctx _context.Context, oName string) ApiMonitoringDeleteArchiveRequest1Request {
	return ApiMonitoringDeleteArchiveRequest1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequest
 */
func (a *MonitoringV1ApiService) DeleteArchiveRequest1Execute(r ApiMonitoringDeleteArchiveRequest1Request) (MonitoringArchiveRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteArchiveRequest1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/archive-requests/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteArchiveRequest1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteAuditPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
}


func (r ApiMonitoringDeleteAuditPolicyRequest) Execute() (MonitoringAuditPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteAuditPolicyExecute(r)
}

/*
 * DeleteAuditPolicy Delete AuditPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringDeleteAuditPolicyRequest
 */
func (a *MonitoringV1ApiService) DeleteAuditPolicy(ctx _context.Context, oTenant string) ApiMonitoringDeleteAuditPolicyRequest {
	return ApiMonitoringDeleteAuditPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAuditPolicy
 */
func (a *MonitoringV1ApiService) DeleteAuditPolicyExecute(r ApiMonitoringDeleteAuditPolicyRequest) (MonitoringAuditPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAuditPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteAuditPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/audit-policy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteAuditPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteAuditPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
}


func (r ApiMonitoringDeleteAuditPolicy1Request) Execute() (MonitoringAuditPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteAuditPolicy1Execute(r)
}

/*
 * DeleteAuditPolicy1 Delete AuditPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringDeleteAuditPolicy1Request
 */
func (a *MonitoringV1ApiService) DeleteAuditPolicy1(ctx _context.Context) ApiMonitoringDeleteAuditPolicy1Request {
	return ApiMonitoringDeleteAuditPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAuditPolicy
 */
func (a *MonitoringV1ApiService) DeleteAuditPolicy1Execute(r ApiMonitoringDeleteAuditPolicy1Request) (MonitoringAuditPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAuditPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteAuditPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/audit-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteAuditPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteEventPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteEventPolicyRequest) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteEventPolicyExecute(r)
}

/*
 * DeleteEventPolicy Delete EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteEventPolicyRequest
 */
func (a *MonitoringV1ApiService) DeleteEventPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteEventPolicyRequest {
	return ApiMonitoringDeleteEventPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) DeleteEventPolicyExecute(r ApiMonitoringDeleteEventPolicyRequest) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteEventPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteEventPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteEventPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteEventPolicy1Request) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteEventPolicy1Execute(r)
}

/*
 * DeleteEventPolicy1 Delete EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteEventPolicy1Request
 */
func (a *MonitoringV1ApiService) DeleteEventPolicy1(ctx _context.Context, oName string) ApiMonitoringDeleteEventPolicy1Request {
	return ApiMonitoringDeleteEventPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) DeleteEventPolicy1Execute(r ApiMonitoringDeleteEventPolicy1Request) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteEventPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/event-policy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteEventPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteFlowExportPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteFlowExportPolicyRequest) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteFlowExportPolicyExecute(r)
}

/*
 * DeleteFlowExportPolicy Delete FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteFlowExportPolicyRequest
 */
func (a *MonitoringV1ApiService) DeleteFlowExportPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteFlowExportPolicyRequest {
	return ApiMonitoringDeleteFlowExportPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) DeleteFlowExportPolicyExecute(r ApiMonitoringDeleteFlowExportPolicyRequest) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteFlowExportPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteFlowExportPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteFlowExportPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteFlowExportPolicy1Request) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteFlowExportPolicy1Execute(r)
}

/*
 * DeleteFlowExportPolicy1 Delete FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteFlowExportPolicy1Request
 */
func (a *MonitoringV1ApiService) DeleteFlowExportPolicy1(ctx _context.Context, oName string) ApiMonitoringDeleteFlowExportPolicy1Request {
	return ApiMonitoringDeleteFlowExportPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) DeleteFlowExportPolicy1Execute(r ApiMonitoringDeleteFlowExportPolicy1Request) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteFlowExportPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/flowExportPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteFlowExportPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteFwlogPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteFwlogPolicyRequest) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteFwlogPolicyExecute(r)
}

/*
 * DeleteFwlogPolicy Delete FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteFwlogPolicyRequest
 */
func (a *MonitoringV1ApiService) DeleteFwlogPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteFwlogPolicyRequest {
	return ApiMonitoringDeleteFwlogPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) DeleteFwlogPolicyExecute(r ApiMonitoringDeleteFwlogPolicyRequest) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteFwlogPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteFwlogPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteFwlogPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteFwlogPolicy1Request) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteFwlogPolicy1Execute(r)
}

/*
 * DeleteFwlogPolicy1 Delete FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteFwlogPolicy1Request
 */
func (a *MonitoringV1ApiService) DeleteFwlogPolicy1(ctx _context.Context, oName string) ApiMonitoringDeleteFwlogPolicy1Request {
	return ApiMonitoringDeleteFwlogPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) DeleteFwlogPolicy1Execute(r ApiMonitoringDeleteFwlogPolicy1Request) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteFwlogPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/fwlogPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteFwlogPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteMirrorSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteMirrorSessionRequest) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.DeleteMirrorSessionExecute(r)
}

/*
 * DeleteMirrorSession Delete MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteMirrorSessionRequest
 */
func (a *MonitoringV1ApiService) DeleteMirrorSession(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteMirrorSessionRequest {
	return ApiMonitoringDeleteMirrorSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) DeleteMirrorSessionExecute(r ApiMonitoringDeleteMirrorSessionRequest) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteMirrorSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteMirrorSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteMirrorSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteMirrorSession1Request) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.DeleteMirrorSession1Execute(r)
}

/*
 * DeleteMirrorSession1 Delete MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteMirrorSession1Request
 */
func (a *MonitoringV1ApiService) DeleteMirrorSession1(ctx _context.Context, oName string) ApiMonitoringDeleteMirrorSession1Request {
	return ApiMonitoringDeleteMirrorSession1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) DeleteMirrorSession1Execute(r ApiMonitoringDeleteMirrorSession1Request) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteMirrorSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/MirrorSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteMirrorSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteStatsAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteStatsAlertPolicyRequest) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteStatsAlertPolicyExecute(r)
}

/*
 * DeleteStatsAlertPolicy Delete StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteStatsAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) DeleteStatsAlertPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteStatsAlertPolicyRequest {
	return ApiMonitoringDeleteStatsAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) DeleteStatsAlertPolicyExecute(r ApiMonitoringDeleteStatsAlertPolicyRequest) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteStatsAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteStatsAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteStatsAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteStatsAlertPolicy1Request) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteStatsAlertPolicy1Execute(r)
}

/*
 * DeleteStatsAlertPolicy1 Delete StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteStatsAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) DeleteStatsAlertPolicy1(ctx _context.Context, oName string) ApiMonitoringDeleteStatsAlertPolicy1Request {
	return ApiMonitoringDeleteStatsAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) DeleteStatsAlertPolicy1Execute(r ApiMonitoringDeleteStatsAlertPolicy1Request) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteStatsAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/statsAlertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteStatsAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteTechSupportRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteTechSupportRequestRequest) Execute() (MonitoringTechSupportRequest, *_nethttp.Response, error) {
	return r.ApiService.DeleteTechSupportRequestExecute(r)
}

/*
 * DeleteTechSupportRequest Delete TechSupportRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteTechSupportRequestRequest
 */
func (a *MonitoringV1ApiService) DeleteTechSupportRequest(ctx _context.Context, oName string) ApiMonitoringDeleteTechSupportRequestRequest {
	return ApiMonitoringDeleteTechSupportRequestRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTechSupportRequest
 */
func (a *MonitoringV1ApiService) DeleteTechSupportRequestExecute(r ApiMonitoringDeleteTechSupportRequestRequest) (MonitoringTechSupportRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTechSupportRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteTechSupportRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/techsupport/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteTechSupportRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteTroubleshootingSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
}


func (r ApiMonitoringDeleteTroubleshootingSessionRequest) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.DeleteTroubleshootingSessionExecute(r)
}

/*
 * DeleteTroubleshootingSession Delete TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringDeleteTroubleshootingSessionRequest
 */
func (a *MonitoringV1ApiService) DeleteTroubleshootingSession(ctx _context.Context, oTenant string, oName string) ApiMonitoringDeleteTroubleshootingSessionRequest {
	return ApiMonitoringDeleteTroubleshootingSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) DeleteTroubleshootingSessionExecute(r ApiMonitoringDeleteTroubleshootingSessionRequest) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteTroubleshootingSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteTroubleshootingSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteTroubleshootingSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
}


func (r ApiMonitoringDeleteTroubleshootingSession1Request) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.DeleteTroubleshootingSession1Execute(r)
}

/*
 * DeleteTroubleshootingSession1 Delete TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringDeleteTroubleshootingSession1Request
 */
func (a *MonitoringV1ApiService) DeleteTroubleshootingSession1(ctx _context.Context, oName string) ApiMonitoringDeleteTroubleshootingSession1Request {
	return ApiMonitoringDeleteTroubleshootingSession1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) DeleteTroubleshootingSession1Execute(r ApiMonitoringDeleteTroubleshootingSession1Request) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.DeleteTroubleshootingSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/TroubleshootingSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteTroubleshootingSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetAlertRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specState *string
	statusSeverity *string
	sourceComponent *string
	sourceNodeName *string
	statusEventUri *string
	objectRefTenant *string
	objectRefNamespace *string
	objectRefKind *string
	objectRefName *string
	objectRefUri *string
	statusMessage *string
	reasonAlertPolicyId *string
	acknowledgedUser *string
	acknowledgedTime *time.Time
	resolvedUser *string
	resolvedTime *time.Time
	statusTotalHits *int32
}

func (r ApiMonitoringGetAlertRequest) TKind(tKind string) ApiMonitoringGetAlertRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetAlertRequest) TApiVersion(tApiVersion string) ApiMonitoringGetAlertRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetAlertRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetAlertRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetAlertRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetAlertRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetAlertRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetAlertRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetAlertRequest) MetaUuid(metaUuid string) ApiMonitoringGetAlertRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetAlertRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetAlertRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetAlertRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetAlertRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetAlertRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetAlertRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetAlertRequest) SpecState(specState string) ApiMonitoringGetAlertRequest {
	r.specState = &specState
	return r
}
func (r ApiMonitoringGetAlertRequest) StatusSeverity(statusSeverity string) ApiMonitoringGetAlertRequest {
	r.statusSeverity = &statusSeverity
	return r
}
func (r ApiMonitoringGetAlertRequest) SourceComponent(sourceComponent string) ApiMonitoringGetAlertRequest {
	r.sourceComponent = &sourceComponent
	return r
}
func (r ApiMonitoringGetAlertRequest) SourceNodeName(sourceNodeName string) ApiMonitoringGetAlertRequest {
	r.sourceNodeName = &sourceNodeName
	return r
}
func (r ApiMonitoringGetAlertRequest) StatusEventUri(statusEventUri string) ApiMonitoringGetAlertRequest {
	r.statusEventUri = &statusEventUri
	return r
}
func (r ApiMonitoringGetAlertRequest) ObjectRefTenant(objectRefTenant string) ApiMonitoringGetAlertRequest {
	r.objectRefTenant = &objectRefTenant
	return r
}
func (r ApiMonitoringGetAlertRequest) ObjectRefNamespace(objectRefNamespace string) ApiMonitoringGetAlertRequest {
	r.objectRefNamespace = &objectRefNamespace
	return r
}
func (r ApiMonitoringGetAlertRequest) ObjectRefKind(objectRefKind string) ApiMonitoringGetAlertRequest {
	r.objectRefKind = &objectRefKind
	return r
}
func (r ApiMonitoringGetAlertRequest) ObjectRefName(objectRefName string) ApiMonitoringGetAlertRequest {
	r.objectRefName = &objectRefName
	return r
}
func (r ApiMonitoringGetAlertRequest) ObjectRefUri(objectRefUri string) ApiMonitoringGetAlertRequest {
	r.objectRefUri = &objectRefUri
	return r
}
func (r ApiMonitoringGetAlertRequest) StatusMessage(statusMessage string) ApiMonitoringGetAlertRequest {
	r.statusMessage = &statusMessage
	return r
}
func (r ApiMonitoringGetAlertRequest) ReasonAlertPolicyId(reasonAlertPolicyId string) ApiMonitoringGetAlertRequest {
	r.reasonAlertPolicyId = &reasonAlertPolicyId
	return r
}
func (r ApiMonitoringGetAlertRequest) AcknowledgedUser(acknowledgedUser string) ApiMonitoringGetAlertRequest {
	r.acknowledgedUser = &acknowledgedUser
	return r
}
func (r ApiMonitoringGetAlertRequest) AcknowledgedTime(acknowledgedTime time.Time) ApiMonitoringGetAlertRequest {
	r.acknowledgedTime = &acknowledgedTime
	return r
}
func (r ApiMonitoringGetAlertRequest) ResolvedUser(resolvedUser string) ApiMonitoringGetAlertRequest {
	r.resolvedUser = &resolvedUser
	return r
}
func (r ApiMonitoringGetAlertRequest) ResolvedTime(resolvedTime time.Time) ApiMonitoringGetAlertRequest {
	r.resolvedTime = &resolvedTime
	return r
}
func (r ApiMonitoringGetAlertRequest) StatusTotalHits(statusTotalHits int32) ApiMonitoringGetAlertRequest {
	r.statusTotalHits = &statusTotalHits
	return r
}

func (r ApiMonitoringGetAlertRequest) Execute() (MonitoringAlert, *_nethttp.Response, error) {
	return r.ApiService.GetAlertExecute(r)
}

/*
 * GetAlert Get Alert object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetAlertRequest
 */
func (a *MonitoringV1ApiService) GetAlert(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetAlertRequest {
	return ApiMonitoringGetAlertRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlert
 */
func (a *MonitoringV1ApiService) GetAlertExecute(r ApiMonitoringGetAlertRequest) (MonitoringAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetAlert")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alerts/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specState != nil {
		localVarQueryParams.Add("spec.state", parameterToString(*r.specState, ""))
	}
	if r.statusSeverity != nil {
		localVarQueryParams.Add("status.severity", parameterToString(*r.statusSeverity, ""))
	}
	if r.sourceComponent != nil {
		localVarQueryParams.Add("source.component", parameterToString(*r.sourceComponent, ""))
	}
	if r.sourceNodeName != nil {
		localVarQueryParams.Add("source.node-name", parameterToString(*r.sourceNodeName, ""))
	}
	if r.statusEventUri != nil {
		localVarQueryParams.Add("status.event-uri", parameterToString(*r.statusEventUri, ""))
	}
	if r.objectRefTenant != nil {
		localVarQueryParams.Add("object-ref.tenant", parameterToString(*r.objectRefTenant, ""))
	}
	if r.objectRefNamespace != nil {
		localVarQueryParams.Add("object-ref.namespace", parameterToString(*r.objectRefNamespace, ""))
	}
	if r.objectRefKind != nil {
		localVarQueryParams.Add("object-ref.kind", parameterToString(*r.objectRefKind, ""))
	}
	if r.objectRefName != nil {
		localVarQueryParams.Add("object-ref.name", parameterToString(*r.objectRefName, ""))
	}
	if r.objectRefUri != nil {
		localVarQueryParams.Add("object-ref.uri", parameterToString(*r.objectRefUri, ""))
	}
	if r.statusMessage != nil {
		localVarQueryParams.Add("status.message", parameterToString(*r.statusMessage, ""))
	}
	if r.reasonAlertPolicyId != nil {
		localVarQueryParams.Add("reason.alert-policy-id", parameterToString(*r.reasonAlertPolicyId, ""))
	}
	if r.acknowledgedUser != nil {
		localVarQueryParams.Add("acknowledged.user", parameterToString(*r.acknowledgedUser, ""))
	}
	if r.acknowledgedTime != nil {
		localVarQueryParams.Add("acknowledged.time", parameterToString(*r.acknowledgedTime, ""))
	}
	if r.resolvedUser != nil {
		localVarQueryParams.Add("resolved.user", parameterToString(*r.resolvedUser, ""))
	}
	if r.resolvedTime != nil {
		localVarQueryParams.Add("resolved.time", parameterToString(*r.resolvedTime, ""))
	}
	if r.statusTotalHits != nil {
		localVarQueryParams.Add("status.total-hits", parameterToString(*r.statusTotalHits, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetAlertExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetAlert1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specState *string
	statusSeverity *string
	sourceComponent *string
	sourceNodeName *string
	statusEventUri *string
	objectRefTenant *string
	objectRefNamespace *string
	objectRefKind *string
	objectRefName *string
	objectRefUri *string
	statusMessage *string
	reasonAlertPolicyId *string
	acknowledgedUser *string
	acknowledgedTime *time.Time
	resolvedUser *string
	resolvedTime *time.Time
	statusTotalHits *int32
}

func (r ApiMonitoringGetAlert1Request) TKind(tKind string) ApiMonitoringGetAlert1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetAlert1Request) TApiVersion(tApiVersion string) ApiMonitoringGetAlert1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetAlert1Request) MetaTenant(metaTenant string) ApiMonitoringGetAlert1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetAlert1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetAlert1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetAlert1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetAlert1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetAlert1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetAlert1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetAlert1Request) MetaUuid(metaUuid string) ApiMonitoringGetAlert1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetAlert1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetAlert1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetAlert1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetAlert1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetAlert1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetAlert1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetAlert1Request) SpecState(specState string) ApiMonitoringGetAlert1Request {
	r.specState = &specState
	return r
}
func (r ApiMonitoringGetAlert1Request) StatusSeverity(statusSeverity string) ApiMonitoringGetAlert1Request {
	r.statusSeverity = &statusSeverity
	return r
}
func (r ApiMonitoringGetAlert1Request) SourceComponent(sourceComponent string) ApiMonitoringGetAlert1Request {
	r.sourceComponent = &sourceComponent
	return r
}
func (r ApiMonitoringGetAlert1Request) SourceNodeName(sourceNodeName string) ApiMonitoringGetAlert1Request {
	r.sourceNodeName = &sourceNodeName
	return r
}
func (r ApiMonitoringGetAlert1Request) StatusEventUri(statusEventUri string) ApiMonitoringGetAlert1Request {
	r.statusEventUri = &statusEventUri
	return r
}
func (r ApiMonitoringGetAlert1Request) ObjectRefTenant(objectRefTenant string) ApiMonitoringGetAlert1Request {
	r.objectRefTenant = &objectRefTenant
	return r
}
func (r ApiMonitoringGetAlert1Request) ObjectRefNamespace(objectRefNamespace string) ApiMonitoringGetAlert1Request {
	r.objectRefNamespace = &objectRefNamespace
	return r
}
func (r ApiMonitoringGetAlert1Request) ObjectRefKind(objectRefKind string) ApiMonitoringGetAlert1Request {
	r.objectRefKind = &objectRefKind
	return r
}
func (r ApiMonitoringGetAlert1Request) ObjectRefName(objectRefName string) ApiMonitoringGetAlert1Request {
	r.objectRefName = &objectRefName
	return r
}
func (r ApiMonitoringGetAlert1Request) ObjectRefUri(objectRefUri string) ApiMonitoringGetAlert1Request {
	r.objectRefUri = &objectRefUri
	return r
}
func (r ApiMonitoringGetAlert1Request) StatusMessage(statusMessage string) ApiMonitoringGetAlert1Request {
	r.statusMessage = &statusMessage
	return r
}
func (r ApiMonitoringGetAlert1Request) ReasonAlertPolicyId(reasonAlertPolicyId string) ApiMonitoringGetAlert1Request {
	r.reasonAlertPolicyId = &reasonAlertPolicyId
	return r
}
func (r ApiMonitoringGetAlert1Request) AcknowledgedUser(acknowledgedUser string) ApiMonitoringGetAlert1Request {
	r.acknowledgedUser = &acknowledgedUser
	return r
}
func (r ApiMonitoringGetAlert1Request) AcknowledgedTime(acknowledgedTime time.Time) ApiMonitoringGetAlert1Request {
	r.acknowledgedTime = &acknowledgedTime
	return r
}
func (r ApiMonitoringGetAlert1Request) ResolvedUser(resolvedUser string) ApiMonitoringGetAlert1Request {
	r.resolvedUser = &resolvedUser
	return r
}
func (r ApiMonitoringGetAlert1Request) ResolvedTime(resolvedTime time.Time) ApiMonitoringGetAlert1Request {
	r.resolvedTime = &resolvedTime
	return r
}
func (r ApiMonitoringGetAlert1Request) StatusTotalHits(statusTotalHits int32) ApiMonitoringGetAlert1Request {
	r.statusTotalHits = &statusTotalHits
	return r
}

func (r ApiMonitoringGetAlert1Request) Execute() (MonitoringAlert, *_nethttp.Response, error) {
	return r.ApiService.GetAlert1Execute(r)
}

/*
 * GetAlert1 Get Alert object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetAlert1Request
 */
func (a *MonitoringV1ApiService) GetAlert1(ctx _context.Context, oName string) ApiMonitoringGetAlert1Request {
	return ApiMonitoringGetAlert1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlert
 */
func (a *MonitoringV1ApiService) GetAlert1Execute(r ApiMonitoringGetAlert1Request) (MonitoringAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetAlert1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alerts/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specState != nil {
		localVarQueryParams.Add("spec.state", parameterToString(*r.specState, ""))
	}
	if r.statusSeverity != nil {
		localVarQueryParams.Add("status.severity", parameterToString(*r.statusSeverity, ""))
	}
	if r.sourceComponent != nil {
		localVarQueryParams.Add("source.component", parameterToString(*r.sourceComponent, ""))
	}
	if r.sourceNodeName != nil {
		localVarQueryParams.Add("source.node-name", parameterToString(*r.sourceNodeName, ""))
	}
	if r.statusEventUri != nil {
		localVarQueryParams.Add("status.event-uri", parameterToString(*r.statusEventUri, ""))
	}
	if r.objectRefTenant != nil {
		localVarQueryParams.Add("object-ref.tenant", parameterToString(*r.objectRefTenant, ""))
	}
	if r.objectRefNamespace != nil {
		localVarQueryParams.Add("object-ref.namespace", parameterToString(*r.objectRefNamespace, ""))
	}
	if r.objectRefKind != nil {
		localVarQueryParams.Add("object-ref.kind", parameterToString(*r.objectRefKind, ""))
	}
	if r.objectRefName != nil {
		localVarQueryParams.Add("object-ref.name", parameterToString(*r.objectRefName, ""))
	}
	if r.objectRefUri != nil {
		localVarQueryParams.Add("object-ref.uri", parameterToString(*r.objectRefUri, ""))
	}
	if r.statusMessage != nil {
		localVarQueryParams.Add("status.message", parameterToString(*r.statusMessage, ""))
	}
	if r.reasonAlertPolicyId != nil {
		localVarQueryParams.Add("reason.alert-policy-id", parameterToString(*r.reasonAlertPolicyId, ""))
	}
	if r.acknowledgedUser != nil {
		localVarQueryParams.Add("acknowledged.user", parameterToString(*r.acknowledgedUser, ""))
	}
	if r.acknowledgedTime != nil {
		localVarQueryParams.Add("acknowledged.time", parameterToString(*r.acknowledgedTime, ""))
	}
	if r.resolvedUser != nil {
		localVarQueryParams.Add("resolved.user", parameterToString(*r.resolvedUser, ""))
	}
	if r.resolvedTime != nil {
		localVarQueryParams.Add("resolved.time", parameterToString(*r.resolvedTime, ""))
	}
	if r.statusTotalHits != nil {
		localVarQueryParams.Add("status.total-hits", parameterToString(*r.statusTotalHits, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetAlert1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetAlertDestinationRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	emailExportEmailList *[]string
	syslogExportFormat *string
	configFacilityOverride *string
	configPrefix *string
	statusTotalNotificationsSent *int32
}

func (r ApiMonitoringGetAlertDestinationRequest) TKind(tKind string) ApiMonitoringGetAlertDestinationRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) TApiVersion(tApiVersion string) ApiMonitoringGetAlertDestinationRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetAlertDestinationRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetAlertDestinationRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetAlertDestinationRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) MetaUuid(metaUuid string) ApiMonitoringGetAlertDestinationRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetAlertDestinationRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetAlertDestinationRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetAlertDestinationRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) EmailExportEmailList(emailExportEmailList []string) ApiMonitoringGetAlertDestinationRequest {
	r.emailExportEmailList = &emailExportEmailList
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) SyslogExportFormat(syslogExportFormat string) ApiMonitoringGetAlertDestinationRequest {
	r.syslogExportFormat = &syslogExportFormat
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) ConfigFacilityOverride(configFacilityOverride string) ApiMonitoringGetAlertDestinationRequest {
	r.configFacilityOverride = &configFacilityOverride
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) ConfigPrefix(configPrefix string) ApiMonitoringGetAlertDestinationRequest {
	r.configPrefix = &configPrefix
	return r
}
func (r ApiMonitoringGetAlertDestinationRequest) StatusTotalNotificationsSent(statusTotalNotificationsSent int32) ApiMonitoringGetAlertDestinationRequest {
	r.statusTotalNotificationsSent = &statusTotalNotificationsSent
	return r
}

func (r ApiMonitoringGetAlertDestinationRequest) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.GetAlertDestinationExecute(r)
}

/*
 * GetAlertDestination Get AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetAlertDestinationRequest
 */
func (a *MonitoringV1ApiService) GetAlertDestination(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetAlertDestinationRequest {
	return ApiMonitoringGetAlertDestinationRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) GetAlertDestinationExecute(r ApiMonitoringGetAlertDestinationRequest) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetAlertDestination")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.emailExportEmailList != nil {
		localVarQueryParams.Add("email-export.email-list", parameterToString(*r.emailExportEmailList, "csv"))
	}
	if r.syslogExportFormat != nil {
		localVarQueryParams.Add("syslog-export.format", parameterToString(*r.syslogExportFormat, ""))
	}
	if r.configFacilityOverride != nil {
		localVarQueryParams.Add("config.facility-override", parameterToString(*r.configFacilityOverride, ""))
	}
	if r.configPrefix != nil {
		localVarQueryParams.Add("config.prefix", parameterToString(*r.configPrefix, ""))
	}
	if r.statusTotalNotificationsSent != nil {
		localVarQueryParams.Add("status.total-notifications-sent", parameterToString(*r.statusTotalNotificationsSent, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetAlertDestinationExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetAlertDestination1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	emailExportEmailList *[]string
	syslogExportFormat *string
	configFacilityOverride *string
	configPrefix *string
	statusTotalNotificationsSent *int32
}

func (r ApiMonitoringGetAlertDestination1Request) TKind(tKind string) ApiMonitoringGetAlertDestination1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) TApiVersion(tApiVersion string) ApiMonitoringGetAlertDestination1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) MetaTenant(metaTenant string) ApiMonitoringGetAlertDestination1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetAlertDestination1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetAlertDestination1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetAlertDestination1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) MetaUuid(metaUuid string) ApiMonitoringGetAlertDestination1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetAlertDestination1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetAlertDestination1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetAlertDestination1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) EmailExportEmailList(emailExportEmailList []string) ApiMonitoringGetAlertDestination1Request {
	r.emailExportEmailList = &emailExportEmailList
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) SyslogExportFormat(syslogExportFormat string) ApiMonitoringGetAlertDestination1Request {
	r.syslogExportFormat = &syslogExportFormat
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) ConfigFacilityOverride(configFacilityOverride string) ApiMonitoringGetAlertDestination1Request {
	r.configFacilityOverride = &configFacilityOverride
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) ConfigPrefix(configPrefix string) ApiMonitoringGetAlertDestination1Request {
	r.configPrefix = &configPrefix
	return r
}
func (r ApiMonitoringGetAlertDestination1Request) StatusTotalNotificationsSent(statusTotalNotificationsSent int32) ApiMonitoringGetAlertDestination1Request {
	r.statusTotalNotificationsSent = &statusTotalNotificationsSent
	return r
}

func (r ApiMonitoringGetAlertDestination1Request) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.GetAlertDestination1Execute(r)
}

/*
 * GetAlertDestination1 Get AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetAlertDestination1Request
 */
func (a *MonitoringV1ApiService) GetAlertDestination1(ctx _context.Context, oName string) ApiMonitoringGetAlertDestination1Request {
	return ApiMonitoringGetAlertDestination1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) GetAlertDestination1Execute(r ApiMonitoringGetAlertDestination1Request) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetAlertDestination1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertDestinations/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.emailExportEmailList != nil {
		localVarQueryParams.Add("email-export.email-list", parameterToString(*r.emailExportEmailList, "csv"))
	}
	if r.syslogExportFormat != nil {
		localVarQueryParams.Add("syslog-export.format", parameterToString(*r.syslogExportFormat, ""))
	}
	if r.configFacilityOverride != nil {
		localVarQueryParams.Add("config.facility-override", parameterToString(*r.configFacilityOverride, ""))
	}
	if r.configPrefix != nil {
		localVarQueryParams.Add("config.prefix", parameterToString(*r.configPrefix, ""))
	}
	if r.statusTotalNotificationsSent != nil {
		localVarQueryParams.Add("status.total-notifications-sent", parameterToString(*r.statusTotalNotificationsSent, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetAlertDestination1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specResource *string
	specSeverity *string
	specMessage *string
	specEnable *bool
	specDestinations *[]string
	statusTotalHits *int32
	statusOpenAlerts *int32
	statusAcknowledgedAlerts *int32
}

func (r ApiMonitoringGetAlertPolicyRequest) TKind(tKind string) ApiMonitoringGetAlertPolicyRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) TApiVersion(tApiVersion string) ApiMonitoringGetAlertPolicyRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetAlertPolicyRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetAlertPolicyRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetAlertPolicyRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) MetaUuid(metaUuid string) ApiMonitoringGetAlertPolicyRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetAlertPolicyRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetAlertPolicyRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetAlertPolicyRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) SpecResource(specResource string) ApiMonitoringGetAlertPolicyRequest {
	r.specResource = &specResource
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) SpecSeverity(specSeverity string) ApiMonitoringGetAlertPolicyRequest {
	r.specSeverity = &specSeverity
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) SpecMessage(specMessage string) ApiMonitoringGetAlertPolicyRequest {
	r.specMessage = &specMessage
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) SpecEnable(specEnable bool) ApiMonitoringGetAlertPolicyRequest {
	r.specEnable = &specEnable
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) SpecDestinations(specDestinations []string) ApiMonitoringGetAlertPolicyRequest {
	r.specDestinations = &specDestinations
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) StatusTotalHits(statusTotalHits int32) ApiMonitoringGetAlertPolicyRequest {
	r.statusTotalHits = &statusTotalHits
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) StatusOpenAlerts(statusOpenAlerts int32) ApiMonitoringGetAlertPolicyRequest {
	r.statusOpenAlerts = &statusOpenAlerts
	return r
}
func (r ApiMonitoringGetAlertPolicyRequest) StatusAcknowledgedAlerts(statusAcknowledgedAlerts int32) ApiMonitoringGetAlertPolicyRequest {
	r.statusAcknowledgedAlerts = &statusAcknowledgedAlerts
	return r
}

func (r ApiMonitoringGetAlertPolicyRequest) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetAlertPolicyExecute(r)
}

/*
 * GetAlertPolicy Get AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) GetAlertPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetAlertPolicyRequest {
	return ApiMonitoringGetAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) GetAlertPolicyExecute(r ApiMonitoringGetAlertPolicyRequest) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specResource != nil {
		localVarQueryParams.Add("spec.resource", parameterToString(*r.specResource, ""))
	}
	if r.specSeverity != nil {
		localVarQueryParams.Add("spec.severity", parameterToString(*r.specSeverity, ""))
	}
	if r.specMessage != nil {
		localVarQueryParams.Add("spec.message", parameterToString(*r.specMessage, ""))
	}
	if r.specEnable != nil {
		localVarQueryParams.Add("spec.enable", parameterToString(*r.specEnable, ""))
	}
	if r.specDestinations != nil {
		localVarQueryParams.Add("spec.destinations", parameterToString(*r.specDestinations, "csv"))
	}
	if r.statusTotalHits != nil {
		localVarQueryParams.Add("status.total-hits", parameterToString(*r.statusTotalHits, ""))
	}
	if r.statusOpenAlerts != nil {
		localVarQueryParams.Add("status.open-alerts", parameterToString(*r.statusOpenAlerts, ""))
	}
	if r.statusAcknowledgedAlerts != nil {
		localVarQueryParams.Add("status.acknowledged-alerts", parameterToString(*r.statusAcknowledgedAlerts, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specResource *string
	specSeverity *string
	specMessage *string
	specEnable *bool
	specDestinations *[]string
	statusTotalHits *int32
	statusOpenAlerts *int32
	statusAcknowledgedAlerts *int32
}

func (r ApiMonitoringGetAlertPolicy1Request) TKind(tKind string) ApiMonitoringGetAlertPolicy1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) TApiVersion(tApiVersion string) ApiMonitoringGetAlertPolicy1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) MetaTenant(metaTenant string) ApiMonitoringGetAlertPolicy1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetAlertPolicy1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetAlertPolicy1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetAlertPolicy1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) MetaUuid(metaUuid string) ApiMonitoringGetAlertPolicy1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetAlertPolicy1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetAlertPolicy1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetAlertPolicy1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) SpecResource(specResource string) ApiMonitoringGetAlertPolicy1Request {
	r.specResource = &specResource
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) SpecSeverity(specSeverity string) ApiMonitoringGetAlertPolicy1Request {
	r.specSeverity = &specSeverity
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) SpecMessage(specMessage string) ApiMonitoringGetAlertPolicy1Request {
	r.specMessage = &specMessage
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) SpecEnable(specEnable bool) ApiMonitoringGetAlertPolicy1Request {
	r.specEnable = &specEnable
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) SpecDestinations(specDestinations []string) ApiMonitoringGetAlertPolicy1Request {
	r.specDestinations = &specDestinations
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) StatusTotalHits(statusTotalHits int32) ApiMonitoringGetAlertPolicy1Request {
	r.statusTotalHits = &statusTotalHits
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) StatusOpenAlerts(statusOpenAlerts int32) ApiMonitoringGetAlertPolicy1Request {
	r.statusOpenAlerts = &statusOpenAlerts
	return r
}
func (r ApiMonitoringGetAlertPolicy1Request) StatusAcknowledgedAlerts(statusAcknowledgedAlerts int32) ApiMonitoringGetAlertPolicy1Request {
	r.statusAcknowledgedAlerts = &statusAcknowledgedAlerts
	return r
}

func (r ApiMonitoringGetAlertPolicy1Request) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetAlertPolicy1Execute(r)
}

/*
 * GetAlertPolicy1 Get AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) GetAlertPolicy1(ctx _context.Context, oName string) ApiMonitoringGetAlertPolicy1Request {
	return ApiMonitoringGetAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) GetAlertPolicy1Execute(r ApiMonitoringGetAlertPolicy1Request) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specResource != nil {
		localVarQueryParams.Add("spec.resource", parameterToString(*r.specResource, ""))
	}
	if r.specSeverity != nil {
		localVarQueryParams.Add("spec.severity", parameterToString(*r.specSeverity, ""))
	}
	if r.specMessage != nil {
		localVarQueryParams.Add("spec.message", parameterToString(*r.specMessage, ""))
	}
	if r.specEnable != nil {
		localVarQueryParams.Add("spec.enable", parameterToString(*r.specEnable, ""))
	}
	if r.specDestinations != nil {
		localVarQueryParams.Add("spec.destinations", parameterToString(*r.specDestinations, "csv"))
	}
	if r.statusTotalHits != nil {
		localVarQueryParams.Add("status.total-hits", parameterToString(*r.statusTotalHits, ""))
	}
	if r.statusOpenAlerts != nil {
		localVarQueryParams.Add("status.open-alerts", parameterToString(*r.statusOpenAlerts, ""))
	}
	if r.statusAcknowledgedAlerts != nil {
		localVarQueryParams.Add("status.acknowledged-alerts", parameterToString(*r.statusAcknowledgedAlerts, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetArchiveRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	queryStartTime *time.Time
	queryEndTime *time.Time
	queryTenants *[]string
	statusStatus *string
	statusReason *string
	statusUri *string
}

func (r ApiMonitoringGetArchiveRequestRequest) TKind(tKind string) ApiMonitoringGetArchiveRequestRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) TApiVersion(tApiVersion string) ApiMonitoringGetArchiveRequestRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetArchiveRequestRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetArchiveRequestRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetArchiveRequestRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) MetaUuid(metaUuid string) ApiMonitoringGetArchiveRequestRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetArchiveRequestRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetArchiveRequestRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetArchiveRequestRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) SpecType(specType string) ApiMonitoringGetArchiveRequestRequest {
	r.specType = &specType
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) QueryStartTime(queryStartTime time.Time) ApiMonitoringGetArchiveRequestRequest {
	r.queryStartTime = &queryStartTime
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) QueryEndTime(queryEndTime time.Time) ApiMonitoringGetArchiveRequestRequest {
	r.queryEndTime = &queryEndTime
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) QueryTenants(queryTenants []string) ApiMonitoringGetArchiveRequestRequest {
	r.queryTenants = &queryTenants
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) StatusStatus(statusStatus string) ApiMonitoringGetArchiveRequestRequest {
	r.statusStatus = &statusStatus
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) StatusReason(statusReason string) ApiMonitoringGetArchiveRequestRequest {
	r.statusReason = &statusReason
	return r
}
func (r ApiMonitoringGetArchiveRequestRequest) StatusUri(statusUri string) ApiMonitoringGetArchiveRequestRequest {
	r.statusUri = &statusUri
	return r
}

func (r ApiMonitoringGetArchiveRequestRequest) Execute() (MonitoringArchiveRequest, *_nethttp.Response, error) {
	return r.ApiService.GetArchiveRequestExecute(r)
}

/*
 * GetArchiveRequest Get ArchiveRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetArchiveRequestRequest
 */
func (a *MonitoringV1ApiService) GetArchiveRequest(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetArchiveRequestRequest {
	return ApiMonitoringGetArchiveRequestRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequest
 */
func (a *MonitoringV1ApiService) GetArchiveRequestExecute(r ApiMonitoringGetArchiveRequestRequest) (MonitoringArchiveRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetArchiveRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/archive-requests/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.queryStartTime != nil {
		localVarQueryParams.Add("query.start-time", parameterToString(*r.queryStartTime, ""))
	}
	if r.queryEndTime != nil {
		localVarQueryParams.Add("query.end-time", parameterToString(*r.queryEndTime, ""))
	}
	if r.queryTenants != nil {
		localVarQueryParams.Add("query.tenants", parameterToString(*r.queryTenants, "csv"))
	}
	if r.statusStatus != nil {
		localVarQueryParams.Add("status.status", parameterToString(*r.statusStatus, ""))
	}
	if r.statusReason != nil {
		localVarQueryParams.Add("status.reason", parameterToString(*r.statusReason, ""))
	}
	if r.statusUri != nil {
		localVarQueryParams.Add("status.uri", parameterToString(*r.statusUri, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetArchiveRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetArchiveRequest1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	queryStartTime *time.Time
	queryEndTime *time.Time
	queryTenants *[]string
	statusStatus *string
	statusReason *string
	statusUri *string
}

func (r ApiMonitoringGetArchiveRequest1Request) TKind(tKind string) ApiMonitoringGetArchiveRequest1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) TApiVersion(tApiVersion string) ApiMonitoringGetArchiveRequest1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) MetaTenant(metaTenant string) ApiMonitoringGetArchiveRequest1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetArchiveRequest1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetArchiveRequest1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetArchiveRequest1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) MetaUuid(metaUuid string) ApiMonitoringGetArchiveRequest1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetArchiveRequest1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetArchiveRequest1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetArchiveRequest1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) SpecType(specType string) ApiMonitoringGetArchiveRequest1Request {
	r.specType = &specType
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) QueryStartTime(queryStartTime time.Time) ApiMonitoringGetArchiveRequest1Request {
	r.queryStartTime = &queryStartTime
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) QueryEndTime(queryEndTime time.Time) ApiMonitoringGetArchiveRequest1Request {
	r.queryEndTime = &queryEndTime
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) QueryTenants(queryTenants []string) ApiMonitoringGetArchiveRequest1Request {
	r.queryTenants = &queryTenants
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) StatusStatus(statusStatus string) ApiMonitoringGetArchiveRequest1Request {
	r.statusStatus = &statusStatus
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) StatusReason(statusReason string) ApiMonitoringGetArchiveRequest1Request {
	r.statusReason = &statusReason
	return r
}
func (r ApiMonitoringGetArchiveRequest1Request) StatusUri(statusUri string) ApiMonitoringGetArchiveRequest1Request {
	r.statusUri = &statusUri
	return r
}

func (r ApiMonitoringGetArchiveRequest1Request) Execute() (MonitoringArchiveRequest, *_nethttp.Response, error) {
	return r.ApiService.GetArchiveRequest1Execute(r)
}

/*
 * GetArchiveRequest1 Get ArchiveRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetArchiveRequest1Request
 */
func (a *MonitoringV1ApiService) GetArchiveRequest1(ctx _context.Context, oName string) ApiMonitoringGetArchiveRequest1Request {
	return ApiMonitoringGetArchiveRequest1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequest
 */
func (a *MonitoringV1ApiService) GetArchiveRequest1Execute(r ApiMonitoringGetArchiveRequest1Request) (MonitoringArchiveRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetArchiveRequest1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/archive-requests/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.queryStartTime != nil {
		localVarQueryParams.Add("query.start-time", parameterToString(*r.queryStartTime, ""))
	}
	if r.queryEndTime != nil {
		localVarQueryParams.Add("query.end-time", parameterToString(*r.queryEndTime, ""))
	}
	if r.queryTenants != nil {
		localVarQueryParams.Add("query.tenants", parameterToString(*r.queryTenants, "csv"))
	}
	if r.statusStatus != nil {
		localVarQueryParams.Add("status.status", parameterToString(*r.statusStatus, ""))
	}
	if r.statusReason != nil {
		localVarQueryParams.Add("status.reason", parameterToString(*r.statusReason, ""))
	}
	if r.statusUri != nil {
		localVarQueryParams.Add("status.uri", parameterToString(*r.statusUri, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetArchiveRequest1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetAuditPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	tKind *string
	tApiVersion *string
	metaName *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	syslogAuditorEnabled *bool
	syslogAuditorFormat *string
	configFacilityOverride *string
	configPrefix *string
}

func (r ApiMonitoringGetAuditPolicyRequest) TKind(tKind string) ApiMonitoringGetAuditPolicyRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) TApiVersion(tApiVersion string) ApiMonitoringGetAuditPolicyRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) MetaName(metaName string) ApiMonitoringGetAuditPolicyRequest {
	r.metaName = &metaName
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetAuditPolicyRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetAuditPolicyRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetAuditPolicyRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) MetaUuid(metaUuid string) ApiMonitoringGetAuditPolicyRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetAuditPolicyRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetAuditPolicyRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetAuditPolicyRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) SyslogAuditorEnabled(syslogAuditorEnabled bool) ApiMonitoringGetAuditPolicyRequest {
	r.syslogAuditorEnabled = &syslogAuditorEnabled
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) SyslogAuditorFormat(syslogAuditorFormat string) ApiMonitoringGetAuditPolicyRequest {
	r.syslogAuditorFormat = &syslogAuditorFormat
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) ConfigFacilityOverride(configFacilityOverride string) ApiMonitoringGetAuditPolicyRequest {
	r.configFacilityOverride = &configFacilityOverride
	return r
}
func (r ApiMonitoringGetAuditPolicyRequest) ConfigPrefix(configPrefix string) ApiMonitoringGetAuditPolicyRequest {
	r.configPrefix = &configPrefix
	return r
}

func (r ApiMonitoringGetAuditPolicyRequest) Execute() (MonitoringAuditPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetAuditPolicyExecute(r)
}

/*
 * GetAuditPolicy Get AuditPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringGetAuditPolicyRequest
 */
func (a *MonitoringV1ApiService) GetAuditPolicy(ctx _context.Context, oTenant string) ApiMonitoringGetAuditPolicyRequest {
	return ApiMonitoringGetAuditPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAuditPolicy
 */
func (a *MonitoringV1ApiService) GetAuditPolicyExecute(r ApiMonitoringGetAuditPolicyRequest) (MonitoringAuditPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAuditPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetAuditPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/audit-policy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.syslogAuditorEnabled != nil {
		localVarQueryParams.Add("syslog-auditor.enabled", parameterToString(*r.syslogAuditorEnabled, ""))
	}
	if r.syslogAuditorFormat != nil {
		localVarQueryParams.Add("syslog-auditor.format", parameterToString(*r.syslogAuditorFormat, ""))
	}
	if r.configFacilityOverride != nil {
		localVarQueryParams.Add("config.facility-override", parameterToString(*r.configFacilityOverride, ""))
	}
	if r.configPrefix != nil {
		localVarQueryParams.Add("config.prefix", parameterToString(*r.configPrefix, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetAuditPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetAuditPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	tKind *string
	tApiVersion *string
	metaName *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	syslogAuditorEnabled *bool
	syslogAuditorFormat *string
	configFacilityOverride *string
	configPrefix *string
}

func (r ApiMonitoringGetAuditPolicy1Request) TKind(tKind string) ApiMonitoringGetAuditPolicy1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) TApiVersion(tApiVersion string) ApiMonitoringGetAuditPolicy1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaName(metaName string) ApiMonitoringGetAuditPolicy1Request {
	r.metaName = &metaName
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaTenant(metaTenant string) ApiMonitoringGetAuditPolicy1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetAuditPolicy1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetAuditPolicy1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetAuditPolicy1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaUuid(metaUuid string) ApiMonitoringGetAuditPolicy1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetAuditPolicy1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetAuditPolicy1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetAuditPolicy1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) SyslogAuditorEnabled(syslogAuditorEnabled bool) ApiMonitoringGetAuditPolicy1Request {
	r.syslogAuditorEnabled = &syslogAuditorEnabled
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) SyslogAuditorFormat(syslogAuditorFormat string) ApiMonitoringGetAuditPolicy1Request {
	r.syslogAuditorFormat = &syslogAuditorFormat
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) ConfigFacilityOverride(configFacilityOverride string) ApiMonitoringGetAuditPolicy1Request {
	r.configFacilityOverride = &configFacilityOverride
	return r
}
func (r ApiMonitoringGetAuditPolicy1Request) ConfigPrefix(configPrefix string) ApiMonitoringGetAuditPolicy1Request {
	r.configPrefix = &configPrefix
	return r
}

func (r ApiMonitoringGetAuditPolicy1Request) Execute() (MonitoringAuditPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetAuditPolicy1Execute(r)
}

/*
 * GetAuditPolicy1 Get AuditPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringGetAuditPolicy1Request
 */
func (a *MonitoringV1ApiService) GetAuditPolicy1(ctx _context.Context) ApiMonitoringGetAuditPolicy1Request {
	return ApiMonitoringGetAuditPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAuditPolicy
 */
func (a *MonitoringV1ApiService) GetAuditPolicy1Execute(r ApiMonitoringGetAuditPolicy1Request) (MonitoringAuditPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAuditPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetAuditPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/audit-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaName != nil {
		localVarQueryParams.Add("meta.name", parameterToString(*r.metaName, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.syslogAuditorEnabled != nil {
		localVarQueryParams.Add("syslog-auditor.enabled", parameterToString(*r.syslogAuditorEnabled, ""))
	}
	if r.syslogAuditorFormat != nil {
		localVarQueryParams.Add("syslog-auditor.format", parameterToString(*r.syslogAuditorFormat, ""))
	}
	if r.configFacilityOverride != nil {
		localVarQueryParams.Add("config.facility-override", parameterToString(*r.configFacilityOverride, ""))
	}
	if r.configPrefix != nil {
		localVarQueryParams.Add("config.prefix", parameterToString(*r.configPrefix, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetAuditPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetEventPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specFormat *string
	configFacilityOverride *string
	configPrefix *string
}

func (r ApiMonitoringGetEventPolicyRequest) TKind(tKind string) ApiMonitoringGetEventPolicyRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) TApiVersion(tApiVersion string) ApiMonitoringGetEventPolicyRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetEventPolicyRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetEventPolicyRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetEventPolicyRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) MetaUuid(metaUuid string) ApiMonitoringGetEventPolicyRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetEventPolicyRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetEventPolicyRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetEventPolicyRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) SpecFormat(specFormat string) ApiMonitoringGetEventPolicyRequest {
	r.specFormat = &specFormat
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) ConfigFacilityOverride(configFacilityOverride string) ApiMonitoringGetEventPolicyRequest {
	r.configFacilityOverride = &configFacilityOverride
	return r
}
func (r ApiMonitoringGetEventPolicyRequest) ConfigPrefix(configPrefix string) ApiMonitoringGetEventPolicyRequest {
	r.configPrefix = &configPrefix
	return r
}

func (r ApiMonitoringGetEventPolicyRequest) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetEventPolicyExecute(r)
}

/*
 * GetEventPolicy Get EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetEventPolicyRequest
 */
func (a *MonitoringV1ApiService) GetEventPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetEventPolicyRequest {
	return ApiMonitoringGetEventPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) GetEventPolicyExecute(r ApiMonitoringGetEventPolicyRequest) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetEventPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specFormat != nil {
		localVarQueryParams.Add("spec.format", parameterToString(*r.specFormat, ""))
	}
	if r.configFacilityOverride != nil {
		localVarQueryParams.Add("config.facility-override", parameterToString(*r.configFacilityOverride, ""))
	}
	if r.configPrefix != nil {
		localVarQueryParams.Add("config.prefix", parameterToString(*r.configPrefix, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetEventPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetEventPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specFormat *string
	configFacilityOverride *string
	configPrefix *string
}

func (r ApiMonitoringGetEventPolicy1Request) TKind(tKind string) ApiMonitoringGetEventPolicy1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) TApiVersion(tApiVersion string) ApiMonitoringGetEventPolicy1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) MetaTenant(metaTenant string) ApiMonitoringGetEventPolicy1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetEventPolicy1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetEventPolicy1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetEventPolicy1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) MetaUuid(metaUuid string) ApiMonitoringGetEventPolicy1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetEventPolicy1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetEventPolicy1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetEventPolicy1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) SpecFormat(specFormat string) ApiMonitoringGetEventPolicy1Request {
	r.specFormat = &specFormat
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) ConfigFacilityOverride(configFacilityOverride string) ApiMonitoringGetEventPolicy1Request {
	r.configFacilityOverride = &configFacilityOverride
	return r
}
func (r ApiMonitoringGetEventPolicy1Request) ConfigPrefix(configPrefix string) ApiMonitoringGetEventPolicy1Request {
	r.configPrefix = &configPrefix
	return r
}

func (r ApiMonitoringGetEventPolicy1Request) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetEventPolicy1Execute(r)
}

/*
 * GetEventPolicy1 Get EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetEventPolicy1Request
 */
func (a *MonitoringV1ApiService) GetEventPolicy1(ctx _context.Context, oName string) ApiMonitoringGetEventPolicy1Request {
	return ApiMonitoringGetEventPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) GetEventPolicy1Execute(r ApiMonitoringGetEventPolicy1Request) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetEventPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/event-policy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specFormat != nil {
		localVarQueryParams.Add("spec.format", parameterToString(*r.specFormat, ""))
	}
	if r.configFacilityOverride != nil {
		localVarQueryParams.Add("config.facility-override", parameterToString(*r.configFacilityOverride, ""))
	}
	if r.configPrefix != nil {
		localVarQueryParams.Add("config.prefix", parameterToString(*r.configPrefix, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetEventPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetFlowExportPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specVrfName *string
	specInterval *string
	specTemplateInterval *string
	specFormat *string
	specDisabled *bool
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
	statusState *string
}

func (r ApiMonitoringGetFlowExportPolicyRequest) TKind(tKind string) ApiMonitoringGetFlowExportPolicyRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) TApiVersion(tApiVersion string) ApiMonitoringGetFlowExportPolicyRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetFlowExportPolicyRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetFlowExportPolicyRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetFlowExportPolicyRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) MetaUuid(metaUuid string) ApiMonitoringGetFlowExportPolicyRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetFlowExportPolicyRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetFlowExportPolicyRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetFlowExportPolicyRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) SpecVrfName(specVrfName string) ApiMonitoringGetFlowExportPolicyRequest {
	r.specVrfName = &specVrfName
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) SpecInterval(specInterval string) ApiMonitoringGetFlowExportPolicyRequest {
	r.specInterval = &specInterval
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) SpecTemplateInterval(specTemplateInterval string) ApiMonitoringGetFlowExportPolicyRequest {
	r.specTemplateInterval = &specTemplateInterval
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) SpecFormat(specFormat string) ApiMonitoringGetFlowExportPolicyRequest {
	r.specFormat = &specFormat
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) SpecDisabled(specDisabled bool) ApiMonitoringGetFlowExportPolicyRequest {
	r.specDisabled = &specDisabled
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiMonitoringGetFlowExportPolicyRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiMonitoringGetFlowExportPolicyRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) PropagationStatusPending(propagationStatusPending int32) ApiMonitoringGetFlowExportPolicyRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiMonitoringGetFlowExportPolicyRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) PropagationStatusStatus(propagationStatusStatus string) ApiMonitoringGetFlowExportPolicyRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiMonitoringGetFlowExportPolicyRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}
func (r ApiMonitoringGetFlowExportPolicyRequest) StatusState(statusState string) ApiMonitoringGetFlowExportPolicyRequest {
	r.statusState = &statusState
	return r
}

func (r ApiMonitoringGetFlowExportPolicyRequest) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetFlowExportPolicyExecute(r)
}

/*
 * GetFlowExportPolicy Get FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetFlowExportPolicyRequest
 */
func (a *MonitoringV1ApiService) GetFlowExportPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetFlowExportPolicyRequest {
	return ApiMonitoringGetFlowExportPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) GetFlowExportPolicyExecute(r ApiMonitoringGetFlowExportPolicyRequest) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetFlowExportPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specVrfName != nil {
		localVarQueryParams.Add("spec.vrf-name", parameterToString(*r.specVrfName, ""))
	}
	if r.specInterval != nil {
		localVarQueryParams.Add("spec.interval", parameterToString(*r.specInterval, ""))
	}
	if r.specTemplateInterval != nil {
		localVarQueryParams.Add("spec.template-interval", parameterToString(*r.specTemplateInterval, ""))
	}
	if r.specFormat != nil {
		localVarQueryParams.Add("spec.format", parameterToString(*r.specFormat, ""))
	}
	if r.specDisabled != nil {
		localVarQueryParams.Add("spec.disabled", parameterToString(*r.specDisabled, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	if r.statusState != nil {
		localVarQueryParams.Add("status.state", parameterToString(*r.statusState, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetFlowExportPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetFlowExportPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specVrfName *string
	specInterval *string
	specTemplateInterval *string
	specFormat *string
	specDisabled *bool
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
	statusState *string
}

func (r ApiMonitoringGetFlowExportPolicy1Request) TKind(tKind string) ApiMonitoringGetFlowExportPolicy1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) TApiVersion(tApiVersion string) ApiMonitoringGetFlowExportPolicy1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) MetaTenant(metaTenant string) ApiMonitoringGetFlowExportPolicy1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetFlowExportPolicy1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetFlowExportPolicy1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetFlowExportPolicy1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) MetaUuid(metaUuid string) ApiMonitoringGetFlowExportPolicy1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetFlowExportPolicy1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetFlowExportPolicy1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetFlowExportPolicy1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) SpecVrfName(specVrfName string) ApiMonitoringGetFlowExportPolicy1Request {
	r.specVrfName = &specVrfName
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) SpecInterval(specInterval string) ApiMonitoringGetFlowExportPolicy1Request {
	r.specInterval = &specInterval
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) SpecTemplateInterval(specTemplateInterval string) ApiMonitoringGetFlowExportPolicy1Request {
	r.specTemplateInterval = &specTemplateInterval
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) SpecFormat(specFormat string) ApiMonitoringGetFlowExportPolicy1Request {
	r.specFormat = &specFormat
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) SpecDisabled(specDisabled bool) ApiMonitoringGetFlowExportPolicy1Request {
	r.specDisabled = &specDisabled
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiMonitoringGetFlowExportPolicy1Request {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) PropagationStatusUpdated(propagationStatusUpdated int32) ApiMonitoringGetFlowExportPolicy1Request {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) PropagationStatusPending(propagationStatusPending int32) ApiMonitoringGetFlowExportPolicy1Request {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiMonitoringGetFlowExportPolicy1Request {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) PropagationStatusStatus(propagationStatusStatus string) ApiMonitoringGetFlowExportPolicy1Request {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiMonitoringGetFlowExportPolicy1Request {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}
func (r ApiMonitoringGetFlowExportPolicy1Request) StatusState(statusState string) ApiMonitoringGetFlowExportPolicy1Request {
	r.statusState = &statusState
	return r
}

func (r ApiMonitoringGetFlowExportPolicy1Request) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetFlowExportPolicy1Execute(r)
}

/*
 * GetFlowExportPolicy1 Get FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetFlowExportPolicy1Request
 */
func (a *MonitoringV1ApiService) GetFlowExportPolicy1(ctx _context.Context, oName string) ApiMonitoringGetFlowExportPolicy1Request {
	return ApiMonitoringGetFlowExportPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) GetFlowExportPolicy1Execute(r ApiMonitoringGetFlowExportPolicy1Request) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetFlowExportPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/flowExportPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specVrfName != nil {
		localVarQueryParams.Add("spec.vrf-name", parameterToString(*r.specVrfName, ""))
	}
	if r.specInterval != nil {
		localVarQueryParams.Add("spec.interval", parameterToString(*r.specInterval, ""))
	}
	if r.specTemplateInterval != nil {
		localVarQueryParams.Add("spec.template-interval", parameterToString(*r.specTemplateInterval, ""))
	}
	if r.specFormat != nil {
		localVarQueryParams.Add("spec.format", parameterToString(*r.specFormat, ""))
	}
	if r.specDisabled != nil {
		localVarQueryParams.Add("spec.disabled", parameterToString(*r.specDisabled, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	if r.statusState != nil {
		localVarQueryParams.Add("status.state", parameterToString(*r.statusState, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetFlowExportPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetFwlogPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specVrfName *string
	specFormat *string
	specFilter *[]string
	configFacilityOverride *string
	configPrefix *string
	psmTargetEnable *bool
}

func (r ApiMonitoringGetFwlogPolicyRequest) TKind(tKind string) ApiMonitoringGetFwlogPolicyRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) TApiVersion(tApiVersion string) ApiMonitoringGetFwlogPolicyRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetFwlogPolicyRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetFwlogPolicyRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetFwlogPolicyRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) MetaUuid(metaUuid string) ApiMonitoringGetFwlogPolicyRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetFwlogPolicyRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetFwlogPolicyRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetFwlogPolicyRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) SpecVrfName(specVrfName string) ApiMonitoringGetFwlogPolicyRequest {
	r.specVrfName = &specVrfName
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) SpecFormat(specFormat string) ApiMonitoringGetFwlogPolicyRequest {
	r.specFormat = &specFormat
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) SpecFilter(specFilter []string) ApiMonitoringGetFwlogPolicyRequest {
	r.specFilter = &specFilter
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) ConfigFacilityOverride(configFacilityOverride string) ApiMonitoringGetFwlogPolicyRequest {
	r.configFacilityOverride = &configFacilityOverride
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) ConfigPrefix(configPrefix string) ApiMonitoringGetFwlogPolicyRequest {
	r.configPrefix = &configPrefix
	return r
}
func (r ApiMonitoringGetFwlogPolicyRequest) PsmTargetEnable(psmTargetEnable bool) ApiMonitoringGetFwlogPolicyRequest {
	r.psmTargetEnable = &psmTargetEnable
	return r
}

func (r ApiMonitoringGetFwlogPolicyRequest) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetFwlogPolicyExecute(r)
}

/*
 * GetFwlogPolicy Get FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetFwlogPolicyRequest
 */
func (a *MonitoringV1ApiService) GetFwlogPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetFwlogPolicyRequest {
	return ApiMonitoringGetFwlogPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) GetFwlogPolicyExecute(r ApiMonitoringGetFwlogPolicyRequest) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetFwlogPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specVrfName != nil {
		localVarQueryParams.Add("spec.vrf-name", parameterToString(*r.specVrfName, ""))
	}
	if r.specFormat != nil {
		localVarQueryParams.Add("spec.format", parameterToString(*r.specFormat, ""))
	}
	if r.specFilter != nil {
		localVarQueryParams.Add("spec.filter", parameterToString(*r.specFilter, "csv"))
	}
	if r.configFacilityOverride != nil {
		localVarQueryParams.Add("config.facility-override", parameterToString(*r.configFacilityOverride, ""))
	}
	if r.configPrefix != nil {
		localVarQueryParams.Add("config.prefix", parameterToString(*r.configPrefix, ""))
	}
	if r.psmTargetEnable != nil {
		localVarQueryParams.Add("psm-target.enable", parameterToString(*r.psmTargetEnable, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetFwlogPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetFwlogPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specVrfName *string
	specFormat *string
	specFilter *[]string
	configFacilityOverride *string
	configPrefix *string
	psmTargetEnable *bool
}

func (r ApiMonitoringGetFwlogPolicy1Request) TKind(tKind string) ApiMonitoringGetFwlogPolicy1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) TApiVersion(tApiVersion string) ApiMonitoringGetFwlogPolicy1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) MetaTenant(metaTenant string) ApiMonitoringGetFwlogPolicy1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetFwlogPolicy1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetFwlogPolicy1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetFwlogPolicy1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) MetaUuid(metaUuid string) ApiMonitoringGetFwlogPolicy1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetFwlogPolicy1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetFwlogPolicy1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetFwlogPolicy1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) SpecVrfName(specVrfName string) ApiMonitoringGetFwlogPolicy1Request {
	r.specVrfName = &specVrfName
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) SpecFormat(specFormat string) ApiMonitoringGetFwlogPolicy1Request {
	r.specFormat = &specFormat
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) SpecFilter(specFilter []string) ApiMonitoringGetFwlogPolicy1Request {
	r.specFilter = &specFilter
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) ConfigFacilityOverride(configFacilityOverride string) ApiMonitoringGetFwlogPolicy1Request {
	r.configFacilityOverride = &configFacilityOverride
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) ConfigPrefix(configPrefix string) ApiMonitoringGetFwlogPolicy1Request {
	r.configPrefix = &configPrefix
	return r
}
func (r ApiMonitoringGetFwlogPolicy1Request) PsmTargetEnable(psmTargetEnable bool) ApiMonitoringGetFwlogPolicy1Request {
	r.psmTargetEnable = &psmTargetEnable
	return r
}

func (r ApiMonitoringGetFwlogPolicy1Request) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetFwlogPolicy1Execute(r)
}

/*
 * GetFwlogPolicy1 Get FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetFwlogPolicy1Request
 */
func (a *MonitoringV1ApiService) GetFwlogPolicy1(ctx _context.Context, oName string) ApiMonitoringGetFwlogPolicy1Request {
	return ApiMonitoringGetFwlogPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) GetFwlogPolicy1Execute(r ApiMonitoringGetFwlogPolicy1Request) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetFwlogPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/fwlogPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specVrfName != nil {
		localVarQueryParams.Add("spec.vrf-name", parameterToString(*r.specVrfName, ""))
	}
	if r.specFormat != nil {
		localVarQueryParams.Add("spec.format", parameterToString(*r.specFormat, ""))
	}
	if r.specFilter != nil {
		localVarQueryParams.Add("spec.filter", parameterToString(*r.specFilter, "csv"))
	}
	if r.configFacilityOverride != nil {
		localVarQueryParams.Add("config.facility-override", parameterToString(*r.configFacilityOverride, ""))
	}
	if r.configPrefix != nil {
		localVarQueryParams.Add("config.prefix", parameterToString(*r.configPrefix, ""))
	}
	if r.psmTargetEnable != nil {
		localVarQueryParams.Add("psm-target.enable", parameterToString(*r.psmTargetEnable, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetFwlogPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetMirrorSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specPacketSize *int64
	startConditionScheduleTime *time.Time
	specPacketFilters *[]string
	interfacesDirection *string
	specSpanId *int64
	workloadsDirection *string
	sourceTargetType *string
	sourceDirection *string
	specDisabled *bool
	statusScheduleState *string
	statusStartedAt *time.Time
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiMonitoringGetMirrorSessionRequest) TKind(tKind string) ApiMonitoringGetMirrorSessionRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) TApiVersion(tApiVersion string) ApiMonitoringGetMirrorSessionRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetMirrorSessionRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetMirrorSessionRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetMirrorSessionRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) MetaUuid(metaUuid string) ApiMonitoringGetMirrorSessionRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetMirrorSessionRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetMirrorSessionRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetMirrorSessionRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) SpecPacketSize(specPacketSize int64) ApiMonitoringGetMirrorSessionRequest {
	r.specPacketSize = &specPacketSize
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) StartConditionScheduleTime(startConditionScheduleTime time.Time) ApiMonitoringGetMirrorSessionRequest {
	r.startConditionScheduleTime = &startConditionScheduleTime
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) SpecPacketFilters(specPacketFilters []string) ApiMonitoringGetMirrorSessionRequest {
	r.specPacketFilters = &specPacketFilters
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) InterfacesDirection(interfacesDirection string) ApiMonitoringGetMirrorSessionRequest {
	r.interfacesDirection = &interfacesDirection
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) SpecSpanId(specSpanId int64) ApiMonitoringGetMirrorSessionRequest {
	r.specSpanId = &specSpanId
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) WorkloadsDirection(workloadsDirection string) ApiMonitoringGetMirrorSessionRequest {
	r.workloadsDirection = &workloadsDirection
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) SourceTargetType(sourceTargetType string) ApiMonitoringGetMirrorSessionRequest {
	r.sourceTargetType = &sourceTargetType
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) SourceDirection(sourceDirection string) ApiMonitoringGetMirrorSessionRequest {
	r.sourceDirection = &sourceDirection
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) SpecDisabled(specDisabled bool) ApiMonitoringGetMirrorSessionRequest {
	r.specDisabled = &specDisabled
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) StatusScheduleState(statusScheduleState string) ApiMonitoringGetMirrorSessionRequest {
	r.statusScheduleState = &statusScheduleState
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) StatusStartedAt(statusStartedAt time.Time) ApiMonitoringGetMirrorSessionRequest {
	r.statusStartedAt = &statusStartedAt
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiMonitoringGetMirrorSessionRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiMonitoringGetMirrorSessionRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) PropagationStatusPending(propagationStatusPending int32) ApiMonitoringGetMirrorSessionRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiMonitoringGetMirrorSessionRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) PropagationStatusStatus(propagationStatusStatus string) ApiMonitoringGetMirrorSessionRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiMonitoringGetMirrorSessionRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiMonitoringGetMirrorSessionRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiMonitoringGetMirrorSessionRequest) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.GetMirrorSessionExecute(r)
}

/*
 * GetMirrorSession Get MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetMirrorSessionRequest
 */
func (a *MonitoringV1ApiService) GetMirrorSession(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetMirrorSessionRequest {
	return ApiMonitoringGetMirrorSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) GetMirrorSessionExecute(r ApiMonitoringGetMirrorSessionRequest) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetMirrorSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specPacketSize != nil {
		localVarQueryParams.Add("spec.packet-size", parameterToString(*r.specPacketSize, ""))
	}
	if r.startConditionScheduleTime != nil {
		localVarQueryParams.Add("start-condition.schedule-time", parameterToString(*r.startConditionScheduleTime, ""))
	}
	if r.specPacketFilters != nil {
		localVarQueryParams.Add("spec.packet-filters", parameterToString(*r.specPacketFilters, "csv"))
	}
	if r.interfacesDirection != nil {
		localVarQueryParams.Add("interfaces.direction", parameterToString(*r.interfacesDirection, ""))
	}
	if r.specSpanId != nil {
		localVarQueryParams.Add("spec.span-id", parameterToString(*r.specSpanId, ""))
	}
	if r.workloadsDirection != nil {
		localVarQueryParams.Add("workloads.direction", parameterToString(*r.workloadsDirection, ""))
	}
	if r.sourceTargetType != nil {
		localVarQueryParams.Add("source.target-type", parameterToString(*r.sourceTargetType, ""))
	}
	if r.sourceDirection != nil {
		localVarQueryParams.Add("source.direction", parameterToString(*r.sourceDirection, ""))
	}
	if r.specDisabled != nil {
		localVarQueryParams.Add("spec.disabled", parameterToString(*r.specDisabled, ""))
	}
	if r.statusScheduleState != nil {
		localVarQueryParams.Add("status.schedule-state", parameterToString(*r.statusScheduleState, ""))
	}
	if r.statusStartedAt != nil {
		localVarQueryParams.Add("status.started-at", parameterToString(*r.statusStartedAt, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetMirrorSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetMirrorSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specPacketSize *int64
	startConditionScheduleTime *time.Time
	specPacketFilters *[]string
	interfacesDirection *string
	specSpanId *int64
	workloadsDirection *string
	sourceTargetType *string
	sourceDirection *string
	specDisabled *bool
	statusScheduleState *string
	statusStartedAt *time.Time
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiMonitoringGetMirrorSession1Request) TKind(tKind string) ApiMonitoringGetMirrorSession1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) TApiVersion(tApiVersion string) ApiMonitoringGetMirrorSession1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) MetaTenant(metaTenant string) ApiMonitoringGetMirrorSession1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetMirrorSession1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetMirrorSession1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetMirrorSession1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) MetaUuid(metaUuid string) ApiMonitoringGetMirrorSession1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetMirrorSession1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetMirrorSession1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetMirrorSession1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) SpecPacketSize(specPacketSize int64) ApiMonitoringGetMirrorSession1Request {
	r.specPacketSize = &specPacketSize
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) StartConditionScheduleTime(startConditionScheduleTime time.Time) ApiMonitoringGetMirrorSession1Request {
	r.startConditionScheduleTime = &startConditionScheduleTime
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) SpecPacketFilters(specPacketFilters []string) ApiMonitoringGetMirrorSession1Request {
	r.specPacketFilters = &specPacketFilters
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) InterfacesDirection(interfacesDirection string) ApiMonitoringGetMirrorSession1Request {
	r.interfacesDirection = &interfacesDirection
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) SpecSpanId(specSpanId int64) ApiMonitoringGetMirrorSession1Request {
	r.specSpanId = &specSpanId
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) WorkloadsDirection(workloadsDirection string) ApiMonitoringGetMirrorSession1Request {
	r.workloadsDirection = &workloadsDirection
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) SourceTargetType(sourceTargetType string) ApiMonitoringGetMirrorSession1Request {
	r.sourceTargetType = &sourceTargetType
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) SourceDirection(sourceDirection string) ApiMonitoringGetMirrorSession1Request {
	r.sourceDirection = &sourceDirection
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) SpecDisabled(specDisabled bool) ApiMonitoringGetMirrorSession1Request {
	r.specDisabled = &specDisabled
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) StatusScheduleState(statusScheduleState string) ApiMonitoringGetMirrorSession1Request {
	r.statusScheduleState = &statusScheduleState
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) StatusStartedAt(statusStartedAt time.Time) ApiMonitoringGetMirrorSession1Request {
	r.statusStartedAt = &statusStartedAt
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiMonitoringGetMirrorSession1Request {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) PropagationStatusUpdated(propagationStatusUpdated int32) ApiMonitoringGetMirrorSession1Request {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) PropagationStatusPending(propagationStatusPending int32) ApiMonitoringGetMirrorSession1Request {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiMonitoringGetMirrorSession1Request {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) PropagationStatusStatus(propagationStatusStatus string) ApiMonitoringGetMirrorSession1Request {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiMonitoringGetMirrorSession1Request) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiMonitoringGetMirrorSession1Request {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiMonitoringGetMirrorSession1Request) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.GetMirrorSession1Execute(r)
}

/*
 * GetMirrorSession1 Get MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetMirrorSession1Request
 */
func (a *MonitoringV1ApiService) GetMirrorSession1(ctx _context.Context, oName string) ApiMonitoringGetMirrorSession1Request {
	return ApiMonitoringGetMirrorSession1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) GetMirrorSession1Execute(r ApiMonitoringGetMirrorSession1Request) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetMirrorSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/MirrorSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specPacketSize != nil {
		localVarQueryParams.Add("spec.packet-size", parameterToString(*r.specPacketSize, ""))
	}
	if r.startConditionScheduleTime != nil {
		localVarQueryParams.Add("start-condition.schedule-time", parameterToString(*r.startConditionScheduleTime, ""))
	}
	if r.specPacketFilters != nil {
		localVarQueryParams.Add("spec.packet-filters", parameterToString(*r.specPacketFilters, "csv"))
	}
	if r.interfacesDirection != nil {
		localVarQueryParams.Add("interfaces.direction", parameterToString(*r.interfacesDirection, ""))
	}
	if r.specSpanId != nil {
		localVarQueryParams.Add("spec.span-id", parameterToString(*r.specSpanId, ""))
	}
	if r.workloadsDirection != nil {
		localVarQueryParams.Add("workloads.direction", parameterToString(*r.workloadsDirection, ""))
	}
	if r.sourceTargetType != nil {
		localVarQueryParams.Add("source.target-type", parameterToString(*r.sourceTargetType, ""))
	}
	if r.sourceDirection != nil {
		localVarQueryParams.Add("source.direction", parameterToString(*r.sourceDirection, ""))
	}
	if r.specDisabled != nil {
		localVarQueryParams.Add("spec.disabled", parameterToString(*r.specDisabled, ""))
	}
	if r.statusScheduleState != nil {
		localVarQueryParams.Add("status.schedule-state", parameterToString(*r.statusScheduleState, ""))
	}
	if r.statusStartedAt != nil {
		localVarQueryParams.Add("status.started-at", parameterToString(*r.statusStartedAt, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetMirrorSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetStatsAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	metricGroup *string
	metricKind *string
	metricFieldName *string
	measurementCriteriaWindow *string
	measurementCriteriaFunction *string
	thresholdsOperator *string
	specEnable *bool
	specDestinations *[]string
	instanceSelectorKind *string
	instanceSelectorNames *[]string
	statusTotalHits *int32
	statusOpenAlerts *int32
	statusAcknowledgedAlerts *int32
}

func (r ApiMonitoringGetStatsAlertPolicyRequest) TKind(tKind string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) TApiVersion(tApiVersion string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetaUuid(metaUuid string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetricGroup(metricGroup string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metricGroup = &metricGroup
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetricKind(metricKind string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metricKind = &metricKind
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MetricFieldName(metricFieldName string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.metricFieldName = &metricFieldName
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MeasurementCriteriaWindow(measurementCriteriaWindow string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.measurementCriteriaWindow = &measurementCriteriaWindow
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) MeasurementCriteriaFunction(measurementCriteriaFunction string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.measurementCriteriaFunction = &measurementCriteriaFunction
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) ThresholdsOperator(thresholdsOperator string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.thresholdsOperator = &thresholdsOperator
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) SpecEnable(specEnable bool) ApiMonitoringGetStatsAlertPolicyRequest {
	r.specEnable = &specEnable
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) SpecDestinations(specDestinations []string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.specDestinations = &specDestinations
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) InstanceSelectorKind(instanceSelectorKind string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.instanceSelectorKind = &instanceSelectorKind
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) InstanceSelectorNames(instanceSelectorNames []string) ApiMonitoringGetStatsAlertPolicyRequest {
	r.instanceSelectorNames = &instanceSelectorNames
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) StatusTotalHits(statusTotalHits int32) ApiMonitoringGetStatsAlertPolicyRequest {
	r.statusTotalHits = &statusTotalHits
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) StatusOpenAlerts(statusOpenAlerts int32) ApiMonitoringGetStatsAlertPolicyRequest {
	r.statusOpenAlerts = &statusOpenAlerts
	return r
}
func (r ApiMonitoringGetStatsAlertPolicyRequest) StatusAcknowledgedAlerts(statusAcknowledgedAlerts int32) ApiMonitoringGetStatsAlertPolicyRequest {
	r.statusAcknowledgedAlerts = &statusAcknowledgedAlerts
	return r
}

func (r ApiMonitoringGetStatsAlertPolicyRequest) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetStatsAlertPolicyExecute(r)
}

/*
 * GetStatsAlertPolicy Get StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetStatsAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) GetStatsAlertPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetStatsAlertPolicyRequest {
	return ApiMonitoringGetStatsAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) GetStatsAlertPolicyExecute(r ApiMonitoringGetStatsAlertPolicyRequest) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetStatsAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.metricGroup != nil {
		localVarQueryParams.Add("metric.group", parameterToString(*r.metricGroup, ""))
	}
	if r.metricKind != nil {
		localVarQueryParams.Add("metric.kind", parameterToString(*r.metricKind, ""))
	}
	if r.metricFieldName != nil {
		localVarQueryParams.Add("metric.field-name", parameterToString(*r.metricFieldName, ""))
	}
	if r.measurementCriteriaWindow != nil {
		localVarQueryParams.Add("measurement-criteria.window", parameterToString(*r.measurementCriteriaWindow, ""))
	}
	if r.measurementCriteriaFunction != nil {
		localVarQueryParams.Add("measurement-criteria.function", parameterToString(*r.measurementCriteriaFunction, ""))
	}
	if r.thresholdsOperator != nil {
		localVarQueryParams.Add("thresholds.operator", parameterToString(*r.thresholdsOperator, ""))
	}
	if r.specEnable != nil {
		localVarQueryParams.Add("spec.enable", parameterToString(*r.specEnable, ""))
	}
	if r.specDestinations != nil {
		localVarQueryParams.Add("spec.destinations", parameterToString(*r.specDestinations, "csv"))
	}
	if r.instanceSelectorKind != nil {
		localVarQueryParams.Add("instance-selector.kind", parameterToString(*r.instanceSelectorKind, ""))
	}
	if r.instanceSelectorNames != nil {
		localVarQueryParams.Add("instance-selector.names", parameterToString(*r.instanceSelectorNames, "csv"))
	}
	if r.statusTotalHits != nil {
		localVarQueryParams.Add("status.total-hits", parameterToString(*r.statusTotalHits, ""))
	}
	if r.statusOpenAlerts != nil {
		localVarQueryParams.Add("status.open-alerts", parameterToString(*r.statusOpenAlerts, ""))
	}
	if r.statusAcknowledgedAlerts != nil {
		localVarQueryParams.Add("status.acknowledged-alerts", parameterToString(*r.statusAcknowledgedAlerts, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetStatsAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetStatsAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	metricGroup *string
	metricKind *string
	metricFieldName *string
	measurementCriteriaWindow *string
	measurementCriteriaFunction *string
	thresholdsOperator *string
	specEnable *bool
	specDestinations *[]string
	instanceSelectorKind *string
	instanceSelectorNames *[]string
	statusTotalHits *int32
	statusOpenAlerts *int32
	statusAcknowledgedAlerts *int32
}

func (r ApiMonitoringGetStatsAlertPolicy1Request) TKind(tKind string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) TApiVersion(tApiVersion string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetaTenant(metaTenant string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetaUuid(metaUuid string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetricGroup(metricGroup string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metricGroup = &metricGroup
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetricKind(metricKind string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metricKind = &metricKind
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MetricFieldName(metricFieldName string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.metricFieldName = &metricFieldName
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MeasurementCriteriaWindow(measurementCriteriaWindow string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.measurementCriteriaWindow = &measurementCriteriaWindow
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) MeasurementCriteriaFunction(measurementCriteriaFunction string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.measurementCriteriaFunction = &measurementCriteriaFunction
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) ThresholdsOperator(thresholdsOperator string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.thresholdsOperator = &thresholdsOperator
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) SpecEnable(specEnable bool) ApiMonitoringGetStatsAlertPolicy1Request {
	r.specEnable = &specEnable
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) SpecDestinations(specDestinations []string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.specDestinations = &specDestinations
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) InstanceSelectorKind(instanceSelectorKind string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.instanceSelectorKind = &instanceSelectorKind
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) InstanceSelectorNames(instanceSelectorNames []string) ApiMonitoringGetStatsAlertPolicy1Request {
	r.instanceSelectorNames = &instanceSelectorNames
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) StatusTotalHits(statusTotalHits int32) ApiMonitoringGetStatsAlertPolicy1Request {
	r.statusTotalHits = &statusTotalHits
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) StatusOpenAlerts(statusOpenAlerts int32) ApiMonitoringGetStatsAlertPolicy1Request {
	r.statusOpenAlerts = &statusOpenAlerts
	return r
}
func (r ApiMonitoringGetStatsAlertPolicy1Request) StatusAcknowledgedAlerts(statusAcknowledgedAlerts int32) ApiMonitoringGetStatsAlertPolicy1Request {
	r.statusAcknowledgedAlerts = &statusAcknowledgedAlerts
	return r
}

func (r ApiMonitoringGetStatsAlertPolicy1Request) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetStatsAlertPolicy1Execute(r)
}

/*
 * GetStatsAlertPolicy1 Get StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetStatsAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) GetStatsAlertPolicy1(ctx _context.Context, oName string) ApiMonitoringGetStatsAlertPolicy1Request {
	return ApiMonitoringGetStatsAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) GetStatsAlertPolicy1Execute(r ApiMonitoringGetStatsAlertPolicy1Request) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetStatsAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/statsAlertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.metricGroup != nil {
		localVarQueryParams.Add("metric.group", parameterToString(*r.metricGroup, ""))
	}
	if r.metricKind != nil {
		localVarQueryParams.Add("metric.kind", parameterToString(*r.metricKind, ""))
	}
	if r.metricFieldName != nil {
		localVarQueryParams.Add("metric.field-name", parameterToString(*r.metricFieldName, ""))
	}
	if r.measurementCriteriaWindow != nil {
		localVarQueryParams.Add("measurement-criteria.window", parameterToString(*r.measurementCriteriaWindow, ""))
	}
	if r.measurementCriteriaFunction != nil {
		localVarQueryParams.Add("measurement-criteria.function", parameterToString(*r.measurementCriteriaFunction, ""))
	}
	if r.thresholdsOperator != nil {
		localVarQueryParams.Add("thresholds.operator", parameterToString(*r.thresholdsOperator, ""))
	}
	if r.specEnable != nil {
		localVarQueryParams.Add("spec.enable", parameterToString(*r.specEnable, ""))
	}
	if r.specDestinations != nil {
		localVarQueryParams.Add("spec.destinations", parameterToString(*r.specDestinations, "csv"))
	}
	if r.instanceSelectorKind != nil {
		localVarQueryParams.Add("instance-selector.kind", parameterToString(*r.instanceSelectorKind, ""))
	}
	if r.instanceSelectorNames != nil {
		localVarQueryParams.Add("instance-selector.names", parameterToString(*r.instanceSelectorNames, "csv"))
	}
	if r.statusTotalHits != nil {
		localVarQueryParams.Add("status.total-hits", parameterToString(*r.statusTotalHits, ""))
	}
	if r.statusOpenAlerts != nil {
		localVarQueryParams.Add("status.open-alerts", parameterToString(*r.statusOpenAlerts, ""))
	}
	if r.statusAcknowledgedAlerts != nil {
		localVarQueryParams.Add("status.acknowledged-alerts", parameterToString(*r.statusAcknowledgedAlerts, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetStatsAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetTechSupportRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	nodeSelectorNames *[]string
	specVerbosity *int32
	specSkipCores *bool
	statusInstanceId *string
	statusStatus *string
	statusReason *string
}

func (r ApiMonitoringGetTechSupportRequestRequest) TKind(tKind string) ApiMonitoringGetTechSupportRequestRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) TApiVersion(tApiVersion string) ApiMonitoringGetTechSupportRequestRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) MetaTenant(metaTenant string) ApiMonitoringGetTechSupportRequestRequest {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetTechSupportRequestRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetTechSupportRequestRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetTechSupportRequestRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) MetaUuid(metaUuid string) ApiMonitoringGetTechSupportRequestRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetTechSupportRequestRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetTechSupportRequestRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetTechSupportRequestRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) NodeSelectorNames(nodeSelectorNames []string) ApiMonitoringGetTechSupportRequestRequest {
	r.nodeSelectorNames = &nodeSelectorNames
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) SpecVerbosity(specVerbosity int32) ApiMonitoringGetTechSupportRequestRequest {
	r.specVerbosity = &specVerbosity
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) SpecSkipCores(specSkipCores bool) ApiMonitoringGetTechSupportRequestRequest {
	r.specSkipCores = &specSkipCores
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) StatusInstanceId(statusInstanceId string) ApiMonitoringGetTechSupportRequestRequest {
	r.statusInstanceId = &statusInstanceId
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) StatusStatus(statusStatus string) ApiMonitoringGetTechSupportRequestRequest {
	r.statusStatus = &statusStatus
	return r
}
func (r ApiMonitoringGetTechSupportRequestRequest) StatusReason(statusReason string) ApiMonitoringGetTechSupportRequestRequest {
	r.statusReason = &statusReason
	return r
}

func (r ApiMonitoringGetTechSupportRequestRequest) Execute() (MonitoringTechSupportRequest, *_nethttp.Response, error) {
	return r.ApiService.GetTechSupportRequestExecute(r)
}

/*
 * GetTechSupportRequest Get TechSupportRequest object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetTechSupportRequestRequest
 */
func (a *MonitoringV1ApiService) GetTechSupportRequest(ctx _context.Context, oName string) ApiMonitoringGetTechSupportRequestRequest {
	return ApiMonitoringGetTechSupportRequestRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTechSupportRequest
 */
func (a *MonitoringV1ApiService) GetTechSupportRequestExecute(r ApiMonitoringGetTechSupportRequestRequest) (MonitoringTechSupportRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTechSupportRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetTechSupportRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/techsupport/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.nodeSelectorNames != nil {
		localVarQueryParams.Add("node-selector.names", parameterToString(*r.nodeSelectorNames, "csv"))
	}
	if r.specVerbosity != nil {
		localVarQueryParams.Add("spec.verbosity", parameterToString(*r.specVerbosity, ""))
	}
	if r.specSkipCores != nil {
		localVarQueryParams.Add("spec.skip-cores", parameterToString(*r.specSkipCores, ""))
	}
	if r.statusInstanceId != nil {
		localVarQueryParams.Add("status.instance-id", parameterToString(*r.statusInstanceId, ""))
	}
	if r.statusStatus != nil {
		localVarQueryParams.Add("status.status", parameterToString(*r.statusStatus, ""))
	}
	if r.statusReason != nil {
		localVarQueryParams.Add("status.reason", parameterToString(*r.statusReason, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetTechSupportRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetTroubleshootingSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	sourceIpAddresses *[]string
	sourceMacAddresses *[]string
	destinationIpAddresses *[]string
	destinationMacAddresses *[]string
	appProtocolSelectorsProtoPorts *[]string
	appProtocolSelectorsApplications *[]string
	timeWindowStartTime *time.Time
	timeWindowStopTime *time.Time
	specRepeatEvery *string
	specEnableMirroring *bool
	statusState *string
}

func (r ApiMonitoringGetTroubleshootingSessionRequest) TKind(tKind string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) TApiVersion(tApiVersion string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) MetaNamespace(metaNamespace string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) MetaGenerationId(metaGenerationId string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) MetaUuid(metaUuid string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetTroubleshootingSessionRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) MetaModTime(metaModTime time.Time) ApiMonitoringGetTroubleshootingSessionRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) MetaSelfLink(metaSelfLink string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) SourceIpAddresses(sourceIpAddresses []string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.sourceIpAddresses = &sourceIpAddresses
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) SourceMacAddresses(sourceMacAddresses []string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.sourceMacAddresses = &sourceMacAddresses
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) DestinationIpAddresses(destinationIpAddresses []string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.destinationIpAddresses = &destinationIpAddresses
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) DestinationMacAddresses(destinationMacAddresses []string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.destinationMacAddresses = &destinationMacAddresses
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) AppProtocolSelectorsProtoPorts(appProtocolSelectorsProtoPorts []string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.appProtocolSelectorsProtoPorts = &appProtocolSelectorsProtoPorts
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) AppProtocolSelectorsApplications(appProtocolSelectorsApplications []string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.appProtocolSelectorsApplications = &appProtocolSelectorsApplications
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) TimeWindowStartTime(timeWindowStartTime time.Time) ApiMonitoringGetTroubleshootingSessionRequest {
	r.timeWindowStartTime = &timeWindowStartTime
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) TimeWindowStopTime(timeWindowStopTime time.Time) ApiMonitoringGetTroubleshootingSessionRequest {
	r.timeWindowStopTime = &timeWindowStopTime
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) SpecRepeatEvery(specRepeatEvery string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.specRepeatEvery = &specRepeatEvery
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) SpecEnableMirroring(specEnableMirroring bool) ApiMonitoringGetTroubleshootingSessionRequest {
	r.specEnableMirroring = &specEnableMirroring
	return r
}
func (r ApiMonitoringGetTroubleshootingSessionRequest) StatusState(statusState string) ApiMonitoringGetTroubleshootingSessionRequest {
	r.statusState = &statusState
	return r
}

func (r ApiMonitoringGetTroubleshootingSessionRequest) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.GetTroubleshootingSessionExecute(r)
}

/*
 * GetTroubleshootingSession Get TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringGetTroubleshootingSessionRequest
 */
func (a *MonitoringV1ApiService) GetTroubleshootingSession(ctx _context.Context, oTenant string, oName string) ApiMonitoringGetTroubleshootingSessionRequest {
	return ApiMonitoringGetTroubleshootingSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) GetTroubleshootingSessionExecute(r ApiMonitoringGetTroubleshootingSessionRequest) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetTroubleshootingSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.sourceIpAddresses != nil {
		localVarQueryParams.Add("source.ip-addresses", parameterToString(*r.sourceIpAddresses, "csv"))
	}
	if r.sourceMacAddresses != nil {
		localVarQueryParams.Add("source.mac-addresses", parameterToString(*r.sourceMacAddresses, "csv"))
	}
	if r.destinationIpAddresses != nil {
		localVarQueryParams.Add("destination.ip-addresses", parameterToString(*r.destinationIpAddresses, "csv"))
	}
	if r.destinationMacAddresses != nil {
		localVarQueryParams.Add("destination.mac-addresses", parameterToString(*r.destinationMacAddresses, "csv"))
	}
	if r.appProtocolSelectorsProtoPorts != nil {
		localVarQueryParams.Add("app-protocol-selectors.proto-ports", parameterToString(*r.appProtocolSelectorsProtoPorts, "csv"))
	}
	if r.appProtocolSelectorsApplications != nil {
		localVarQueryParams.Add("app-protocol-selectors.applications", parameterToString(*r.appProtocolSelectorsApplications, "csv"))
	}
	if r.timeWindowStartTime != nil {
		localVarQueryParams.Add("time-window.start-time", parameterToString(*r.timeWindowStartTime, ""))
	}
	if r.timeWindowStopTime != nil {
		localVarQueryParams.Add("time-window.stop-time", parameterToString(*r.timeWindowStopTime, ""))
	}
	if r.specRepeatEvery != nil {
		localVarQueryParams.Add("spec.repeat-every", parameterToString(*r.specRepeatEvery, ""))
	}
	if r.specEnableMirroring != nil {
		localVarQueryParams.Add("spec.enable-mirroring", parameterToString(*r.specEnableMirroring, ""))
	}
	if r.statusState != nil {
		localVarQueryParams.Add("status.state", parameterToString(*r.statusState, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetTroubleshootingSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetTroubleshootingSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	sourceIpAddresses *[]string
	sourceMacAddresses *[]string
	destinationIpAddresses *[]string
	destinationMacAddresses *[]string
	appProtocolSelectorsProtoPorts *[]string
	appProtocolSelectorsApplications *[]string
	timeWindowStartTime *time.Time
	timeWindowStopTime *time.Time
	specRepeatEvery *string
	specEnableMirroring *bool
	statusState *string
}

func (r ApiMonitoringGetTroubleshootingSession1Request) TKind(tKind string) ApiMonitoringGetTroubleshootingSession1Request {
	r.tKind = &tKind
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) TApiVersion(tApiVersion string) ApiMonitoringGetTroubleshootingSession1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) MetaTenant(metaTenant string) ApiMonitoringGetTroubleshootingSession1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) MetaNamespace(metaNamespace string) ApiMonitoringGetTroubleshootingSession1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) MetaGenerationId(metaGenerationId string) ApiMonitoringGetTroubleshootingSession1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) MetaResourceVersion(metaResourceVersion string) ApiMonitoringGetTroubleshootingSession1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) MetaUuid(metaUuid string) ApiMonitoringGetTroubleshootingSession1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) MetaCreationTime(metaCreationTime time.Time) ApiMonitoringGetTroubleshootingSession1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) MetaModTime(metaModTime time.Time) ApiMonitoringGetTroubleshootingSession1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) MetaSelfLink(metaSelfLink string) ApiMonitoringGetTroubleshootingSession1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) SourceIpAddresses(sourceIpAddresses []string) ApiMonitoringGetTroubleshootingSession1Request {
	r.sourceIpAddresses = &sourceIpAddresses
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) SourceMacAddresses(sourceMacAddresses []string) ApiMonitoringGetTroubleshootingSession1Request {
	r.sourceMacAddresses = &sourceMacAddresses
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) DestinationIpAddresses(destinationIpAddresses []string) ApiMonitoringGetTroubleshootingSession1Request {
	r.destinationIpAddresses = &destinationIpAddresses
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) DestinationMacAddresses(destinationMacAddresses []string) ApiMonitoringGetTroubleshootingSession1Request {
	r.destinationMacAddresses = &destinationMacAddresses
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) AppProtocolSelectorsProtoPorts(appProtocolSelectorsProtoPorts []string) ApiMonitoringGetTroubleshootingSession1Request {
	r.appProtocolSelectorsProtoPorts = &appProtocolSelectorsProtoPorts
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) AppProtocolSelectorsApplications(appProtocolSelectorsApplications []string) ApiMonitoringGetTroubleshootingSession1Request {
	r.appProtocolSelectorsApplications = &appProtocolSelectorsApplications
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) TimeWindowStartTime(timeWindowStartTime time.Time) ApiMonitoringGetTroubleshootingSession1Request {
	r.timeWindowStartTime = &timeWindowStartTime
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) TimeWindowStopTime(timeWindowStopTime time.Time) ApiMonitoringGetTroubleshootingSession1Request {
	r.timeWindowStopTime = &timeWindowStopTime
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) SpecRepeatEvery(specRepeatEvery string) ApiMonitoringGetTroubleshootingSession1Request {
	r.specRepeatEvery = &specRepeatEvery
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) SpecEnableMirroring(specEnableMirroring bool) ApiMonitoringGetTroubleshootingSession1Request {
	r.specEnableMirroring = &specEnableMirroring
	return r
}
func (r ApiMonitoringGetTroubleshootingSession1Request) StatusState(statusState string) ApiMonitoringGetTroubleshootingSession1Request {
	r.statusState = &statusState
	return r
}

func (r ApiMonitoringGetTroubleshootingSession1Request) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.GetTroubleshootingSession1Execute(r)
}

/*
 * GetTroubleshootingSession1 Get TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringGetTroubleshootingSession1Request
 */
func (a *MonitoringV1ApiService) GetTroubleshootingSession1(ctx _context.Context, oName string) ApiMonitoringGetTroubleshootingSession1Request {
	return ApiMonitoringGetTroubleshootingSession1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) GetTroubleshootingSession1Execute(r ApiMonitoringGetTroubleshootingSession1Request) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.GetTroubleshootingSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/TroubleshootingSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.sourceIpAddresses != nil {
		localVarQueryParams.Add("source.ip-addresses", parameterToString(*r.sourceIpAddresses, "csv"))
	}
	if r.sourceMacAddresses != nil {
		localVarQueryParams.Add("source.mac-addresses", parameterToString(*r.sourceMacAddresses, "csv"))
	}
	if r.destinationIpAddresses != nil {
		localVarQueryParams.Add("destination.ip-addresses", parameterToString(*r.destinationIpAddresses, "csv"))
	}
	if r.destinationMacAddresses != nil {
		localVarQueryParams.Add("destination.mac-addresses", parameterToString(*r.destinationMacAddresses, "csv"))
	}
	if r.appProtocolSelectorsProtoPorts != nil {
		localVarQueryParams.Add("app-protocol-selectors.proto-ports", parameterToString(*r.appProtocolSelectorsProtoPorts, "csv"))
	}
	if r.appProtocolSelectorsApplications != nil {
		localVarQueryParams.Add("app-protocol-selectors.applications", parameterToString(*r.appProtocolSelectorsApplications, "csv"))
	}
	if r.timeWindowStartTime != nil {
		localVarQueryParams.Add("time-window.start-time", parameterToString(*r.timeWindowStartTime, ""))
	}
	if r.timeWindowStopTime != nil {
		localVarQueryParams.Add("time-window.stop-time", parameterToString(*r.timeWindowStopTime, ""))
	}
	if r.specRepeatEvery != nil {
		localVarQueryParams.Add("spec.repeat-every", parameterToString(*r.specRepeatEvery, ""))
	}
	if r.specEnableMirroring != nil {
		localVarQueryParams.Add("spec.enable-mirroring", parameterToString(*r.specEnableMirroring, ""))
	}
	if r.statusState != nil {
		localVarQueryParams.Add("status.state", parameterToString(*r.statusState, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetTroubleshootingSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelAlertRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelAlertRequest) Body(body ApiLabel) ApiMonitoringLabelAlertRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelAlertRequest) Execute() (MonitoringAlert, *_nethttp.Response, error) {
	return r.ApiService.LabelAlertExecute(r)
}

/*
 * LabelAlert Label Alert object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelAlertRequest
 */
func (a *MonitoringV1ApiService) LabelAlert(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelAlertRequest {
	return ApiMonitoringLabelAlertRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlert
 */
func (a *MonitoringV1ApiService) LabelAlertExecute(r ApiMonitoringLabelAlertRequest) (MonitoringAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelAlert")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alerts/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelAlertExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelAlert1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelAlert1Request) Body(body ApiLabel) ApiMonitoringLabelAlert1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelAlert1Request) Execute() (MonitoringAlert, *_nethttp.Response, error) {
	return r.ApiService.LabelAlert1Execute(r)
}

/*
 * LabelAlert1 Label Alert object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelAlert1Request
 */
func (a *MonitoringV1ApiService) LabelAlert1(ctx _context.Context, oName string) ApiMonitoringLabelAlert1Request {
	return ApiMonitoringLabelAlert1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlert
 */
func (a *MonitoringV1ApiService) LabelAlert1Execute(r ApiMonitoringLabelAlert1Request) (MonitoringAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelAlert1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alerts/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelAlert1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelAlertDestinationRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelAlertDestinationRequest) Body(body ApiLabel) ApiMonitoringLabelAlertDestinationRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelAlertDestinationRequest) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.LabelAlertDestinationExecute(r)
}

/*
 * LabelAlertDestination Label AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelAlertDestinationRequest
 */
func (a *MonitoringV1ApiService) LabelAlertDestination(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelAlertDestinationRequest {
	return ApiMonitoringLabelAlertDestinationRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) LabelAlertDestinationExecute(r ApiMonitoringLabelAlertDestinationRequest) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelAlertDestination")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelAlertDestinationExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelAlertDestination1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelAlertDestination1Request) Body(body ApiLabel) ApiMonitoringLabelAlertDestination1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelAlertDestination1Request) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.LabelAlertDestination1Execute(r)
}

/*
 * LabelAlertDestination1 Label AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelAlertDestination1Request
 */
func (a *MonitoringV1ApiService) LabelAlertDestination1(ctx _context.Context, oName string) ApiMonitoringLabelAlertDestination1Request {
	return ApiMonitoringLabelAlertDestination1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) LabelAlertDestination1Execute(r ApiMonitoringLabelAlertDestination1Request) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelAlertDestination1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertDestinations/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelAlertDestination1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelAlertPolicyRequest) Body(body ApiLabel) ApiMonitoringLabelAlertPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelAlertPolicyRequest) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelAlertPolicyExecute(r)
}

/*
 * LabelAlertPolicy Label AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) LabelAlertPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelAlertPolicyRequest {
	return ApiMonitoringLabelAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) LabelAlertPolicyExecute(r ApiMonitoringLabelAlertPolicyRequest) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelAlertPolicy1Request) Body(body ApiLabel) ApiMonitoringLabelAlertPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelAlertPolicy1Request) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelAlertPolicy1Execute(r)
}

/*
 * LabelAlertPolicy1 Label AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) LabelAlertPolicy1(ctx _context.Context, oName string) ApiMonitoringLabelAlertPolicy1Request {
	return ApiMonitoringLabelAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) LabelAlertPolicy1Execute(r ApiMonitoringLabelAlertPolicy1Request) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertPolicies/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelEventPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelEventPolicyRequest) Body(body ApiLabel) ApiMonitoringLabelEventPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelEventPolicyRequest) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelEventPolicyExecute(r)
}

/*
 * LabelEventPolicy Label EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelEventPolicyRequest
 */
func (a *MonitoringV1ApiService) LabelEventPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelEventPolicyRequest {
	return ApiMonitoringLabelEventPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) LabelEventPolicyExecute(r ApiMonitoringLabelEventPolicyRequest) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelEventPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelEventPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelEventPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelEventPolicy1Request) Body(body ApiLabel) ApiMonitoringLabelEventPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelEventPolicy1Request) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelEventPolicy1Execute(r)
}

/*
 * LabelEventPolicy1 Label EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelEventPolicy1Request
 */
func (a *MonitoringV1ApiService) LabelEventPolicy1(ctx _context.Context, oName string) ApiMonitoringLabelEventPolicy1Request {
	return ApiMonitoringLabelEventPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) LabelEventPolicy1Execute(r ApiMonitoringLabelEventPolicy1Request) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelEventPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/event-policy/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelEventPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelFlowExportPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelFlowExportPolicyRequest) Body(body ApiLabel) ApiMonitoringLabelFlowExportPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelFlowExportPolicyRequest) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelFlowExportPolicyExecute(r)
}

/*
 * LabelFlowExportPolicy Label FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelFlowExportPolicyRequest
 */
func (a *MonitoringV1ApiService) LabelFlowExportPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelFlowExportPolicyRequest {
	return ApiMonitoringLabelFlowExportPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) LabelFlowExportPolicyExecute(r ApiMonitoringLabelFlowExportPolicyRequest) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelFlowExportPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelFlowExportPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelFlowExportPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelFlowExportPolicy1Request) Body(body ApiLabel) ApiMonitoringLabelFlowExportPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelFlowExportPolicy1Request) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelFlowExportPolicy1Execute(r)
}

/*
 * LabelFlowExportPolicy1 Label FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelFlowExportPolicy1Request
 */
func (a *MonitoringV1ApiService) LabelFlowExportPolicy1(ctx _context.Context, oName string) ApiMonitoringLabelFlowExportPolicy1Request {
	return ApiMonitoringLabelFlowExportPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) LabelFlowExportPolicy1Execute(r ApiMonitoringLabelFlowExportPolicy1Request) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelFlowExportPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/flowExportPolicy/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelFlowExportPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelFwlogPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelFwlogPolicyRequest) Body(body ApiLabel) ApiMonitoringLabelFwlogPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelFwlogPolicyRequest) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelFwlogPolicyExecute(r)
}

/*
 * LabelFwlogPolicy Label FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelFwlogPolicyRequest
 */
func (a *MonitoringV1ApiService) LabelFwlogPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelFwlogPolicyRequest {
	return ApiMonitoringLabelFwlogPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) LabelFwlogPolicyExecute(r ApiMonitoringLabelFwlogPolicyRequest) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelFwlogPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelFwlogPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelFwlogPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelFwlogPolicy1Request) Body(body ApiLabel) ApiMonitoringLabelFwlogPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelFwlogPolicy1Request) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelFwlogPolicy1Execute(r)
}

/*
 * LabelFwlogPolicy1 Label FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelFwlogPolicy1Request
 */
func (a *MonitoringV1ApiService) LabelFwlogPolicy1(ctx _context.Context, oName string) ApiMonitoringLabelFwlogPolicy1Request {
	return ApiMonitoringLabelFwlogPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) LabelFwlogPolicy1Execute(r ApiMonitoringLabelFwlogPolicy1Request) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelFwlogPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/fwlogPolicy/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelFwlogPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelMirrorSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelMirrorSessionRequest) Body(body ApiLabel) ApiMonitoringLabelMirrorSessionRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelMirrorSessionRequest) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.LabelMirrorSessionExecute(r)
}

/*
 * LabelMirrorSession Label MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelMirrorSessionRequest
 */
func (a *MonitoringV1ApiService) LabelMirrorSession(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelMirrorSessionRequest {
	return ApiMonitoringLabelMirrorSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) LabelMirrorSessionExecute(r ApiMonitoringLabelMirrorSessionRequest) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelMirrorSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelMirrorSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelMirrorSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelMirrorSession1Request) Body(body ApiLabel) ApiMonitoringLabelMirrorSession1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelMirrorSession1Request) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.LabelMirrorSession1Execute(r)
}

/*
 * LabelMirrorSession1 Label MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelMirrorSession1Request
 */
func (a *MonitoringV1ApiService) LabelMirrorSession1(ctx _context.Context, oName string) ApiMonitoringLabelMirrorSession1Request {
	return ApiMonitoringLabelMirrorSession1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) LabelMirrorSession1Execute(r ApiMonitoringLabelMirrorSession1Request) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelMirrorSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/MirrorSession/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelMirrorSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelStatsAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelStatsAlertPolicyRequest) Body(body ApiLabel) ApiMonitoringLabelStatsAlertPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelStatsAlertPolicyRequest) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelStatsAlertPolicyExecute(r)
}

/*
 * LabelStatsAlertPolicy Label StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelStatsAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) LabelStatsAlertPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelStatsAlertPolicyRequest {
	return ApiMonitoringLabelStatsAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) LabelStatsAlertPolicyExecute(r ApiMonitoringLabelStatsAlertPolicyRequest) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelStatsAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelStatsAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelStatsAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelStatsAlertPolicy1Request) Body(body ApiLabel) ApiMonitoringLabelStatsAlertPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelStatsAlertPolicy1Request) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelStatsAlertPolicy1Execute(r)
}

/*
 * LabelStatsAlertPolicy1 Label StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelStatsAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) LabelStatsAlertPolicy1(ctx _context.Context, oName string) ApiMonitoringLabelStatsAlertPolicy1Request {
	return ApiMonitoringLabelStatsAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) LabelStatsAlertPolicy1Execute(r ApiMonitoringLabelStatsAlertPolicy1Request) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelStatsAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/statsAlertPolicies/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelStatsAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelTroubleshootingSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelTroubleshootingSessionRequest) Body(body ApiLabel) ApiMonitoringLabelTroubleshootingSessionRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelTroubleshootingSessionRequest) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.LabelTroubleshootingSessionExecute(r)
}

/*
 * LabelTroubleshootingSession Label TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringLabelTroubleshootingSessionRequest
 */
func (a *MonitoringV1ApiService) LabelTroubleshootingSession(ctx _context.Context, oTenant string, oName string) ApiMonitoringLabelTroubleshootingSessionRequest {
	return ApiMonitoringLabelTroubleshootingSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) LabelTroubleshootingSessionExecute(r ApiMonitoringLabelTroubleshootingSessionRequest) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelTroubleshootingSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelTroubleshootingSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringLabelTroubleshootingSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiMonitoringLabelTroubleshootingSession1Request) Body(body ApiLabel) ApiMonitoringLabelTroubleshootingSession1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringLabelTroubleshootingSession1Request) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.LabelTroubleshootingSession1Execute(r)
}

/*
 * LabelTroubleshootingSession1 Label TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringLabelTroubleshootingSession1Request
 */
func (a *MonitoringV1ApiService) LabelTroubleshootingSession1(ctx _context.Context, oName string) ApiMonitoringLabelTroubleshootingSession1Request {
	return ApiMonitoringLabelTroubleshootingSession1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) LabelTroubleshootingSession1Execute(r ApiMonitoringLabelTroubleshootingSession1Request) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.LabelTroubleshootingSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/TroubleshootingSession/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelTroubleshootingSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListAlertRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListAlertRequest) OName(oName string) ApiMonitoringListAlertRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListAlertRequest) ONamespace(oNamespace string) ApiMonitoringListAlertRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListAlertRequest) OGenerationId(oGenerationId string) ApiMonitoringListAlertRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListAlertRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListAlertRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListAlertRequest) OUuid(oUuid string) ApiMonitoringListAlertRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListAlertRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListAlertRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListAlertRequest) OModTime(oModTime time.Time) ApiMonitoringListAlertRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListAlertRequest) OSelfLink(oSelfLink string) ApiMonitoringListAlertRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListAlertRequest) LabelSelector(labelSelector string) ApiMonitoringListAlertRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListAlertRequest) FieldSelector(fieldSelector string) ApiMonitoringListAlertRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListAlertRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListAlertRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListAlertRequest) From(from int32) ApiMonitoringListAlertRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListAlertRequest) MaxResults(maxResults int32) ApiMonitoringListAlertRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListAlertRequest) SortOrder(sortOrder string) ApiMonitoringListAlertRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListAlertRequest) MetaOnly(metaOnly bool) ApiMonitoringListAlertRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListAlertRequest) Execute() (MonitoringAlertList, *_nethttp.Response, error) {
	return r.ApiService.ListAlertExecute(r)
}

/*
 * ListAlert List Alert objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListAlertRequest
 */
func (a *MonitoringV1ApiService) ListAlert(ctx _context.Context, oTenant string) ApiMonitoringListAlertRequest {
	return ApiMonitoringListAlertRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertList
 */
func (a *MonitoringV1ApiService) ListAlertExecute(r ApiMonitoringListAlertRequest) (MonitoringAlertList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListAlert")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListAlertExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListAlert1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListAlert1Request) OName(oName string) ApiMonitoringListAlert1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListAlert1Request) OTenant(oTenant string) ApiMonitoringListAlert1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListAlert1Request) ONamespace(oNamespace string) ApiMonitoringListAlert1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListAlert1Request) OGenerationId(oGenerationId string) ApiMonitoringListAlert1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListAlert1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListAlert1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListAlert1Request) OUuid(oUuid string) ApiMonitoringListAlert1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListAlert1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListAlert1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListAlert1Request) OModTime(oModTime time.Time) ApiMonitoringListAlert1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListAlert1Request) OSelfLink(oSelfLink string) ApiMonitoringListAlert1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListAlert1Request) LabelSelector(labelSelector string) ApiMonitoringListAlert1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListAlert1Request) FieldSelector(fieldSelector string) ApiMonitoringListAlert1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListAlert1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListAlert1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListAlert1Request) From(from int32) ApiMonitoringListAlert1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListAlert1Request) MaxResults(maxResults int32) ApiMonitoringListAlert1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListAlert1Request) SortOrder(sortOrder string) ApiMonitoringListAlert1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListAlert1Request) MetaOnly(metaOnly bool) ApiMonitoringListAlert1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListAlert1Request) Execute() (MonitoringAlertList, *_nethttp.Response, error) {
	return r.ApiService.ListAlert1Execute(r)
}

/*
 * ListAlert1 List Alert objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListAlert1Request
 */
func (a *MonitoringV1ApiService) ListAlert1(ctx _context.Context) ApiMonitoringListAlert1Request {
	return ApiMonitoringListAlert1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertList
 */
func (a *MonitoringV1ApiService) ListAlert1Execute(r ApiMonitoringListAlert1Request) (MonitoringAlertList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListAlert1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alerts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListAlert1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListAlertDestinationRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListAlertDestinationRequest) OName(oName string) ApiMonitoringListAlertDestinationRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) ONamespace(oNamespace string) ApiMonitoringListAlertDestinationRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) OGenerationId(oGenerationId string) ApiMonitoringListAlertDestinationRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListAlertDestinationRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) OUuid(oUuid string) ApiMonitoringListAlertDestinationRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListAlertDestinationRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) OModTime(oModTime time.Time) ApiMonitoringListAlertDestinationRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) OSelfLink(oSelfLink string) ApiMonitoringListAlertDestinationRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) LabelSelector(labelSelector string) ApiMonitoringListAlertDestinationRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) FieldSelector(fieldSelector string) ApiMonitoringListAlertDestinationRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListAlertDestinationRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) From(from int32) ApiMonitoringListAlertDestinationRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) MaxResults(maxResults int32) ApiMonitoringListAlertDestinationRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) SortOrder(sortOrder string) ApiMonitoringListAlertDestinationRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListAlertDestinationRequest) MetaOnly(metaOnly bool) ApiMonitoringListAlertDestinationRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListAlertDestinationRequest) Execute() (MonitoringAlertDestinationList, *_nethttp.Response, error) {
	return r.ApiService.ListAlertDestinationExecute(r)
}

/*
 * ListAlertDestination List AlertDestination objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListAlertDestinationRequest
 */
func (a *MonitoringV1ApiService) ListAlertDestination(ctx _context.Context, oTenant string) ApiMonitoringListAlertDestinationRequest {
	return ApiMonitoringListAlertDestinationRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestinationList
 */
func (a *MonitoringV1ApiService) ListAlertDestinationExecute(r ApiMonitoringListAlertDestinationRequest) (MonitoringAlertDestinationList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestinationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListAlertDestination")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListAlertDestinationExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListAlertDestination1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListAlertDestination1Request) OName(oName string) ApiMonitoringListAlertDestination1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListAlertDestination1Request) OTenant(oTenant string) ApiMonitoringListAlertDestination1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListAlertDestination1Request) ONamespace(oNamespace string) ApiMonitoringListAlertDestination1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListAlertDestination1Request) OGenerationId(oGenerationId string) ApiMonitoringListAlertDestination1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListAlertDestination1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListAlertDestination1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListAlertDestination1Request) OUuid(oUuid string) ApiMonitoringListAlertDestination1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListAlertDestination1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListAlertDestination1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListAlertDestination1Request) OModTime(oModTime time.Time) ApiMonitoringListAlertDestination1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListAlertDestination1Request) OSelfLink(oSelfLink string) ApiMonitoringListAlertDestination1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListAlertDestination1Request) LabelSelector(labelSelector string) ApiMonitoringListAlertDestination1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListAlertDestination1Request) FieldSelector(fieldSelector string) ApiMonitoringListAlertDestination1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListAlertDestination1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListAlertDestination1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListAlertDestination1Request) From(from int32) ApiMonitoringListAlertDestination1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListAlertDestination1Request) MaxResults(maxResults int32) ApiMonitoringListAlertDestination1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListAlertDestination1Request) SortOrder(sortOrder string) ApiMonitoringListAlertDestination1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListAlertDestination1Request) MetaOnly(metaOnly bool) ApiMonitoringListAlertDestination1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListAlertDestination1Request) Execute() (MonitoringAlertDestinationList, *_nethttp.Response, error) {
	return r.ApiService.ListAlertDestination1Execute(r)
}

/*
 * ListAlertDestination1 List AlertDestination objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListAlertDestination1Request
 */
func (a *MonitoringV1ApiService) ListAlertDestination1(ctx _context.Context) ApiMonitoringListAlertDestination1Request {
	return ApiMonitoringListAlertDestination1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestinationList
 */
func (a *MonitoringV1ApiService) ListAlertDestination1Execute(r ApiMonitoringListAlertDestination1Request) (MonitoringAlertDestinationList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestinationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListAlertDestination1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertDestinations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListAlertDestination1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListAlertPolicyRequest) OName(oName string) ApiMonitoringListAlertPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) ONamespace(oNamespace string) ApiMonitoringListAlertPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringListAlertPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListAlertPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) OUuid(oUuid string) ApiMonitoringListAlertPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListAlertPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringListAlertPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringListAlertPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringListAlertPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringListAlertPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListAlertPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) From(from int32) ApiMonitoringListAlertPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) MaxResults(maxResults int32) ApiMonitoringListAlertPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) SortOrder(sortOrder string) ApiMonitoringListAlertPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListAlertPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringListAlertPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListAlertPolicyRequest) Execute() (MonitoringAlertPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListAlertPolicyExecute(r)
}

/*
 * ListAlertPolicy List AlertPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) ListAlertPolicy(ctx _context.Context, oTenant string) ApiMonitoringListAlertPolicyRequest {
	return ApiMonitoringListAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicyList
 */
func (a *MonitoringV1ApiService) ListAlertPolicyExecute(r ApiMonitoringListAlertPolicyRequest) (MonitoringAlertPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListAlertPolicy1Request) OName(oName string) ApiMonitoringListAlertPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) OTenant(oTenant string) ApiMonitoringListAlertPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) ONamespace(oNamespace string) ApiMonitoringListAlertPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringListAlertPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListAlertPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) OUuid(oUuid string) ApiMonitoringListAlertPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListAlertPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringListAlertPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringListAlertPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringListAlertPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringListAlertPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListAlertPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) From(from int32) ApiMonitoringListAlertPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) MaxResults(maxResults int32) ApiMonitoringListAlertPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) SortOrder(sortOrder string) ApiMonitoringListAlertPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListAlertPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringListAlertPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListAlertPolicy1Request) Execute() (MonitoringAlertPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListAlertPolicy1Execute(r)
}

/*
 * ListAlertPolicy1 List AlertPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) ListAlertPolicy1(ctx _context.Context) ApiMonitoringListAlertPolicy1Request {
	return ApiMonitoringListAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicyList
 */
func (a *MonitoringV1ApiService) ListAlertPolicy1Execute(r ApiMonitoringListAlertPolicy1Request) (MonitoringAlertPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListArchiveRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListArchiveRequestRequest) OName(oName string) ApiMonitoringListArchiveRequestRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) ONamespace(oNamespace string) ApiMonitoringListArchiveRequestRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) OGenerationId(oGenerationId string) ApiMonitoringListArchiveRequestRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListArchiveRequestRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) OUuid(oUuid string) ApiMonitoringListArchiveRequestRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListArchiveRequestRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) OModTime(oModTime time.Time) ApiMonitoringListArchiveRequestRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) OSelfLink(oSelfLink string) ApiMonitoringListArchiveRequestRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) LabelSelector(labelSelector string) ApiMonitoringListArchiveRequestRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) FieldSelector(fieldSelector string) ApiMonitoringListArchiveRequestRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListArchiveRequestRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) From(from int32) ApiMonitoringListArchiveRequestRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) MaxResults(maxResults int32) ApiMonitoringListArchiveRequestRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) SortOrder(sortOrder string) ApiMonitoringListArchiveRequestRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListArchiveRequestRequest) MetaOnly(metaOnly bool) ApiMonitoringListArchiveRequestRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListArchiveRequestRequest) Execute() (MonitoringArchiveRequestList, *_nethttp.Response, error) {
	return r.ApiService.ListArchiveRequestExecute(r)
}

/*
 * ListArchiveRequest List ArchiveRequest objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListArchiveRequestRequest
 */
func (a *MonitoringV1ApiService) ListArchiveRequest(ctx _context.Context, oTenant string) ApiMonitoringListArchiveRequestRequest {
	return ApiMonitoringListArchiveRequestRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequestList
 */
func (a *MonitoringV1ApiService) ListArchiveRequestExecute(r ApiMonitoringListArchiveRequestRequest) (MonitoringArchiveRequestList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequestList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListArchiveRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/archive-requests"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListArchiveRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListArchiveRequest1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListArchiveRequest1Request) OName(oName string) ApiMonitoringListArchiveRequest1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) OTenant(oTenant string) ApiMonitoringListArchiveRequest1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) ONamespace(oNamespace string) ApiMonitoringListArchiveRequest1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) OGenerationId(oGenerationId string) ApiMonitoringListArchiveRequest1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListArchiveRequest1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) OUuid(oUuid string) ApiMonitoringListArchiveRequest1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListArchiveRequest1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) OModTime(oModTime time.Time) ApiMonitoringListArchiveRequest1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) OSelfLink(oSelfLink string) ApiMonitoringListArchiveRequest1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) LabelSelector(labelSelector string) ApiMonitoringListArchiveRequest1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) FieldSelector(fieldSelector string) ApiMonitoringListArchiveRequest1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListArchiveRequest1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) From(from int32) ApiMonitoringListArchiveRequest1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) MaxResults(maxResults int32) ApiMonitoringListArchiveRequest1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) SortOrder(sortOrder string) ApiMonitoringListArchiveRequest1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListArchiveRequest1Request) MetaOnly(metaOnly bool) ApiMonitoringListArchiveRequest1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListArchiveRequest1Request) Execute() (MonitoringArchiveRequestList, *_nethttp.Response, error) {
	return r.ApiService.ListArchiveRequest1Execute(r)
}

/*
 * ListArchiveRequest1 List ArchiveRequest objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListArchiveRequest1Request
 */
func (a *MonitoringV1ApiService) ListArchiveRequest1(ctx _context.Context) ApiMonitoringListArchiveRequest1Request {
	return ApiMonitoringListArchiveRequest1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringArchiveRequestList
 */
func (a *MonitoringV1ApiService) ListArchiveRequest1Execute(r ApiMonitoringListArchiveRequest1Request) (MonitoringArchiveRequestList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringArchiveRequestList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListArchiveRequest1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/archive-requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListArchiveRequest1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListEventPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListEventPolicyRequest) OName(oName string) ApiMonitoringListEventPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListEventPolicyRequest) ONamespace(oNamespace string) ApiMonitoringListEventPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListEventPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringListEventPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListEventPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListEventPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListEventPolicyRequest) OUuid(oUuid string) ApiMonitoringListEventPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListEventPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListEventPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListEventPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringListEventPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListEventPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringListEventPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListEventPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringListEventPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListEventPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringListEventPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListEventPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListEventPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListEventPolicyRequest) From(from int32) ApiMonitoringListEventPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListEventPolicyRequest) MaxResults(maxResults int32) ApiMonitoringListEventPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListEventPolicyRequest) SortOrder(sortOrder string) ApiMonitoringListEventPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListEventPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringListEventPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListEventPolicyRequest) Execute() (MonitoringEventPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListEventPolicyExecute(r)
}

/*
 * ListEventPolicy List EventPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListEventPolicyRequest
 */
func (a *MonitoringV1ApiService) ListEventPolicy(ctx _context.Context, oTenant string) ApiMonitoringListEventPolicyRequest {
	return ApiMonitoringListEventPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicyList
 */
func (a *MonitoringV1ApiService) ListEventPolicyExecute(r ApiMonitoringListEventPolicyRequest) (MonitoringEventPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListEventPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListEventPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListEventPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListEventPolicy1Request) OName(oName string) ApiMonitoringListEventPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListEventPolicy1Request) OTenant(oTenant string) ApiMonitoringListEventPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListEventPolicy1Request) ONamespace(oNamespace string) ApiMonitoringListEventPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListEventPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringListEventPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListEventPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListEventPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListEventPolicy1Request) OUuid(oUuid string) ApiMonitoringListEventPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListEventPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListEventPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListEventPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringListEventPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListEventPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringListEventPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListEventPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringListEventPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListEventPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringListEventPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListEventPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListEventPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListEventPolicy1Request) From(from int32) ApiMonitoringListEventPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListEventPolicy1Request) MaxResults(maxResults int32) ApiMonitoringListEventPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListEventPolicy1Request) SortOrder(sortOrder string) ApiMonitoringListEventPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListEventPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringListEventPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListEventPolicy1Request) Execute() (MonitoringEventPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListEventPolicy1Execute(r)
}

/*
 * ListEventPolicy1 List EventPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListEventPolicy1Request
 */
func (a *MonitoringV1ApiService) ListEventPolicy1(ctx _context.Context) ApiMonitoringListEventPolicy1Request {
	return ApiMonitoringListEventPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicyList
 */
func (a *MonitoringV1ApiService) ListEventPolicy1Execute(r ApiMonitoringListEventPolicy1Request) (MonitoringEventPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListEventPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/event-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListEventPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListFlowExportPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListFlowExportPolicyRequest) OName(oName string) ApiMonitoringListFlowExportPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) ONamespace(oNamespace string) ApiMonitoringListFlowExportPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringListFlowExportPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListFlowExportPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) OUuid(oUuid string) ApiMonitoringListFlowExportPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListFlowExportPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringListFlowExportPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringListFlowExportPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringListFlowExportPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringListFlowExportPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListFlowExportPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) From(from int32) ApiMonitoringListFlowExportPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) MaxResults(maxResults int32) ApiMonitoringListFlowExportPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) SortOrder(sortOrder string) ApiMonitoringListFlowExportPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListFlowExportPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringListFlowExportPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListFlowExportPolicyRequest) Execute() (MonitoringFlowExportPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListFlowExportPolicyExecute(r)
}

/*
 * ListFlowExportPolicy List FlowExportPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListFlowExportPolicyRequest
 */
func (a *MonitoringV1ApiService) ListFlowExportPolicy(ctx _context.Context, oTenant string) ApiMonitoringListFlowExportPolicyRequest {
	return ApiMonitoringListFlowExportPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicyList
 */
func (a *MonitoringV1ApiService) ListFlowExportPolicyExecute(r ApiMonitoringListFlowExportPolicyRequest) (MonitoringFlowExportPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListFlowExportPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListFlowExportPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListFlowExportPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListFlowExportPolicy1Request) OName(oName string) ApiMonitoringListFlowExportPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) OTenant(oTenant string) ApiMonitoringListFlowExportPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) ONamespace(oNamespace string) ApiMonitoringListFlowExportPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringListFlowExportPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListFlowExportPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) OUuid(oUuid string) ApiMonitoringListFlowExportPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListFlowExportPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringListFlowExportPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringListFlowExportPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringListFlowExportPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringListFlowExportPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListFlowExportPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) From(from int32) ApiMonitoringListFlowExportPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) MaxResults(maxResults int32) ApiMonitoringListFlowExportPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) SortOrder(sortOrder string) ApiMonitoringListFlowExportPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListFlowExportPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringListFlowExportPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListFlowExportPolicy1Request) Execute() (MonitoringFlowExportPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListFlowExportPolicy1Execute(r)
}

/*
 * ListFlowExportPolicy1 List FlowExportPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListFlowExportPolicy1Request
 */
func (a *MonitoringV1ApiService) ListFlowExportPolicy1(ctx _context.Context) ApiMonitoringListFlowExportPolicy1Request {
	return ApiMonitoringListFlowExportPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicyList
 */
func (a *MonitoringV1ApiService) ListFlowExportPolicy1Execute(r ApiMonitoringListFlowExportPolicy1Request) (MonitoringFlowExportPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListFlowExportPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/flowExportPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListFlowExportPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListFwlogPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListFwlogPolicyRequest) OName(oName string) ApiMonitoringListFwlogPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) ONamespace(oNamespace string) ApiMonitoringListFwlogPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringListFwlogPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListFwlogPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) OUuid(oUuid string) ApiMonitoringListFwlogPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListFwlogPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringListFwlogPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringListFwlogPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringListFwlogPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringListFwlogPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListFwlogPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) From(from int32) ApiMonitoringListFwlogPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) MaxResults(maxResults int32) ApiMonitoringListFwlogPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) SortOrder(sortOrder string) ApiMonitoringListFwlogPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListFwlogPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringListFwlogPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListFwlogPolicyRequest) Execute() (MonitoringFwlogPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListFwlogPolicyExecute(r)
}

/*
 * ListFwlogPolicy List FwlogPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListFwlogPolicyRequest
 */
func (a *MonitoringV1ApiService) ListFwlogPolicy(ctx _context.Context, oTenant string) ApiMonitoringListFwlogPolicyRequest {
	return ApiMonitoringListFwlogPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicyList
 */
func (a *MonitoringV1ApiService) ListFwlogPolicyExecute(r ApiMonitoringListFwlogPolicyRequest) (MonitoringFwlogPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListFwlogPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListFwlogPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListFwlogPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListFwlogPolicy1Request) OName(oName string) ApiMonitoringListFwlogPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) OTenant(oTenant string) ApiMonitoringListFwlogPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) ONamespace(oNamespace string) ApiMonitoringListFwlogPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringListFwlogPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListFwlogPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) OUuid(oUuid string) ApiMonitoringListFwlogPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListFwlogPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringListFwlogPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringListFwlogPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringListFwlogPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringListFwlogPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListFwlogPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) From(from int32) ApiMonitoringListFwlogPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) MaxResults(maxResults int32) ApiMonitoringListFwlogPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) SortOrder(sortOrder string) ApiMonitoringListFwlogPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListFwlogPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringListFwlogPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListFwlogPolicy1Request) Execute() (MonitoringFwlogPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListFwlogPolicy1Execute(r)
}

/*
 * ListFwlogPolicy1 List FwlogPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListFwlogPolicy1Request
 */
func (a *MonitoringV1ApiService) ListFwlogPolicy1(ctx _context.Context) ApiMonitoringListFwlogPolicy1Request {
	return ApiMonitoringListFwlogPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicyList
 */
func (a *MonitoringV1ApiService) ListFwlogPolicy1Execute(r ApiMonitoringListFwlogPolicy1Request) (MonitoringFwlogPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListFwlogPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/fwlogPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListFwlogPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListMirrorSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListMirrorSessionRequest) OName(oName string) ApiMonitoringListMirrorSessionRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) ONamespace(oNamespace string) ApiMonitoringListMirrorSessionRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) OGenerationId(oGenerationId string) ApiMonitoringListMirrorSessionRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListMirrorSessionRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) OUuid(oUuid string) ApiMonitoringListMirrorSessionRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListMirrorSessionRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) OModTime(oModTime time.Time) ApiMonitoringListMirrorSessionRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) OSelfLink(oSelfLink string) ApiMonitoringListMirrorSessionRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) LabelSelector(labelSelector string) ApiMonitoringListMirrorSessionRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) FieldSelector(fieldSelector string) ApiMonitoringListMirrorSessionRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListMirrorSessionRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) From(from int32) ApiMonitoringListMirrorSessionRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) MaxResults(maxResults int32) ApiMonitoringListMirrorSessionRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) SortOrder(sortOrder string) ApiMonitoringListMirrorSessionRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListMirrorSessionRequest) MetaOnly(metaOnly bool) ApiMonitoringListMirrorSessionRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListMirrorSessionRequest) Execute() (MonitoringMirrorSessionList, *_nethttp.Response, error) {
	return r.ApiService.ListMirrorSessionExecute(r)
}

/*
 * ListMirrorSession List MirrorSession objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListMirrorSessionRequest
 */
func (a *MonitoringV1ApiService) ListMirrorSession(ctx _context.Context, oTenant string) ApiMonitoringListMirrorSessionRequest {
	return ApiMonitoringListMirrorSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSessionList
 */
func (a *MonitoringV1ApiService) ListMirrorSessionExecute(r ApiMonitoringListMirrorSessionRequest) (MonitoringMirrorSessionList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSessionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListMirrorSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListMirrorSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListMirrorSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListMirrorSession1Request) OName(oName string) ApiMonitoringListMirrorSession1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListMirrorSession1Request) OTenant(oTenant string) ApiMonitoringListMirrorSession1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListMirrorSession1Request) ONamespace(oNamespace string) ApiMonitoringListMirrorSession1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListMirrorSession1Request) OGenerationId(oGenerationId string) ApiMonitoringListMirrorSession1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListMirrorSession1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListMirrorSession1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListMirrorSession1Request) OUuid(oUuid string) ApiMonitoringListMirrorSession1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListMirrorSession1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListMirrorSession1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListMirrorSession1Request) OModTime(oModTime time.Time) ApiMonitoringListMirrorSession1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListMirrorSession1Request) OSelfLink(oSelfLink string) ApiMonitoringListMirrorSession1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListMirrorSession1Request) LabelSelector(labelSelector string) ApiMonitoringListMirrorSession1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListMirrorSession1Request) FieldSelector(fieldSelector string) ApiMonitoringListMirrorSession1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListMirrorSession1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListMirrorSession1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListMirrorSession1Request) From(from int32) ApiMonitoringListMirrorSession1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListMirrorSession1Request) MaxResults(maxResults int32) ApiMonitoringListMirrorSession1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListMirrorSession1Request) SortOrder(sortOrder string) ApiMonitoringListMirrorSession1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListMirrorSession1Request) MetaOnly(metaOnly bool) ApiMonitoringListMirrorSession1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListMirrorSession1Request) Execute() (MonitoringMirrorSessionList, *_nethttp.Response, error) {
	return r.ApiService.ListMirrorSession1Execute(r)
}

/*
 * ListMirrorSession1 List MirrorSession objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListMirrorSession1Request
 */
func (a *MonitoringV1ApiService) ListMirrorSession1(ctx _context.Context) ApiMonitoringListMirrorSession1Request {
	return ApiMonitoringListMirrorSession1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSessionList
 */
func (a *MonitoringV1ApiService) ListMirrorSession1Execute(r ApiMonitoringListMirrorSession1Request) (MonitoringMirrorSessionList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSessionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListMirrorSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/MirrorSession"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListMirrorSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListStatsAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListStatsAlertPolicyRequest) OName(oName string) ApiMonitoringListStatsAlertPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) ONamespace(oNamespace string) ApiMonitoringListStatsAlertPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringListStatsAlertPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListStatsAlertPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) OUuid(oUuid string) ApiMonitoringListStatsAlertPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListStatsAlertPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringListStatsAlertPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringListStatsAlertPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringListStatsAlertPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringListStatsAlertPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListStatsAlertPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) From(from int32) ApiMonitoringListStatsAlertPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) MaxResults(maxResults int32) ApiMonitoringListStatsAlertPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) SortOrder(sortOrder string) ApiMonitoringListStatsAlertPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListStatsAlertPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringListStatsAlertPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListStatsAlertPolicyRequest) Execute() (MonitoringStatsAlertPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListStatsAlertPolicyExecute(r)
}

/*
 * ListStatsAlertPolicy List StatsAlertPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListStatsAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) ListStatsAlertPolicy(ctx _context.Context, oTenant string) ApiMonitoringListStatsAlertPolicyRequest {
	return ApiMonitoringListStatsAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicyList
 */
func (a *MonitoringV1ApiService) ListStatsAlertPolicyExecute(r ApiMonitoringListStatsAlertPolicyRequest) (MonitoringStatsAlertPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListStatsAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListStatsAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListStatsAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListStatsAlertPolicy1Request) OName(oName string) ApiMonitoringListStatsAlertPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) OTenant(oTenant string) ApiMonitoringListStatsAlertPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) ONamespace(oNamespace string) ApiMonitoringListStatsAlertPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringListStatsAlertPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListStatsAlertPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) OUuid(oUuid string) ApiMonitoringListStatsAlertPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListStatsAlertPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringListStatsAlertPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringListStatsAlertPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringListStatsAlertPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringListStatsAlertPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListStatsAlertPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) From(from int32) ApiMonitoringListStatsAlertPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) MaxResults(maxResults int32) ApiMonitoringListStatsAlertPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) SortOrder(sortOrder string) ApiMonitoringListStatsAlertPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListStatsAlertPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringListStatsAlertPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListStatsAlertPolicy1Request) Execute() (MonitoringStatsAlertPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListStatsAlertPolicy1Execute(r)
}

/*
 * ListStatsAlertPolicy1 List StatsAlertPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListStatsAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) ListStatsAlertPolicy1(ctx _context.Context) ApiMonitoringListStatsAlertPolicy1Request {
	return ApiMonitoringListStatsAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicyList
 */
func (a *MonitoringV1ApiService) ListStatsAlertPolicy1Execute(r ApiMonitoringListStatsAlertPolicy1Request) (MonitoringStatsAlertPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListStatsAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/statsAlertPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListStatsAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListTechSupportRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListTechSupportRequestRequest) OName(oName string) ApiMonitoringListTechSupportRequestRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) OTenant(oTenant string) ApiMonitoringListTechSupportRequestRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) ONamespace(oNamespace string) ApiMonitoringListTechSupportRequestRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) OGenerationId(oGenerationId string) ApiMonitoringListTechSupportRequestRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListTechSupportRequestRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) OUuid(oUuid string) ApiMonitoringListTechSupportRequestRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListTechSupportRequestRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) OModTime(oModTime time.Time) ApiMonitoringListTechSupportRequestRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) OSelfLink(oSelfLink string) ApiMonitoringListTechSupportRequestRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) LabelSelector(labelSelector string) ApiMonitoringListTechSupportRequestRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) FieldSelector(fieldSelector string) ApiMonitoringListTechSupportRequestRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListTechSupportRequestRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) From(from int32) ApiMonitoringListTechSupportRequestRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) MaxResults(maxResults int32) ApiMonitoringListTechSupportRequestRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) SortOrder(sortOrder string) ApiMonitoringListTechSupportRequestRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListTechSupportRequestRequest) MetaOnly(metaOnly bool) ApiMonitoringListTechSupportRequestRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListTechSupportRequestRequest) Execute() (MonitoringTechSupportRequestList, *_nethttp.Response, error) {
	return r.ApiService.ListTechSupportRequestExecute(r)
}

/*
 * ListTechSupportRequest List TechSupportRequest objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListTechSupportRequestRequest
 */
func (a *MonitoringV1ApiService) ListTechSupportRequest(ctx _context.Context) ApiMonitoringListTechSupportRequestRequest {
	return ApiMonitoringListTechSupportRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTechSupportRequestList
 */
func (a *MonitoringV1ApiService) ListTechSupportRequestExecute(r ApiMonitoringListTechSupportRequestRequest) (MonitoringTechSupportRequestList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTechSupportRequestList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListTechSupportRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/techsupport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListTechSupportRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListTroubleshootingSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListTroubleshootingSessionRequest) OName(oName string) ApiMonitoringListTroubleshootingSessionRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) ONamespace(oNamespace string) ApiMonitoringListTroubleshootingSessionRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) OGenerationId(oGenerationId string) ApiMonitoringListTroubleshootingSessionRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) OResourceVersion(oResourceVersion string) ApiMonitoringListTroubleshootingSessionRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) OUuid(oUuid string) ApiMonitoringListTroubleshootingSessionRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringListTroubleshootingSessionRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) OModTime(oModTime time.Time) ApiMonitoringListTroubleshootingSessionRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) OSelfLink(oSelfLink string) ApiMonitoringListTroubleshootingSessionRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) LabelSelector(labelSelector string) ApiMonitoringListTroubleshootingSessionRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) FieldSelector(fieldSelector string) ApiMonitoringListTroubleshootingSessionRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListTroubleshootingSessionRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) From(from int32) ApiMonitoringListTroubleshootingSessionRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) MaxResults(maxResults int32) ApiMonitoringListTroubleshootingSessionRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) SortOrder(sortOrder string) ApiMonitoringListTroubleshootingSessionRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListTroubleshootingSessionRequest) MetaOnly(metaOnly bool) ApiMonitoringListTroubleshootingSessionRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListTroubleshootingSessionRequest) Execute() (MonitoringTroubleshootingSessionList, *_nethttp.Response, error) {
	return r.ApiService.ListTroubleshootingSessionExecute(r)
}

/*
 * ListTroubleshootingSession List TroubleshootingSession objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringListTroubleshootingSessionRequest
 */
func (a *MonitoringV1ApiService) ListTroubleshootingSession(ctx _context.Context, oTenant string) ApiMonitoringListTroubleshootingSessionRequest {
	return ApiMonitoringListTroubleshootingSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSessionList
 */
func (a *MonitoringV1ApiService) ListTroubleshootingSessionExecute(r ApiMonitoringListTroubleshootingSessionRequest) (MonitoringTroubleshootingSessionList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSessionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListTroubleshootingSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListTroubleshootingSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringListTroubleshootingSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringListTroubleshootingSession1Request) OName(oName string) ApiMonitoringListTroubleshootingSession1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) OTenant(oTenant string) ApiMonitoringListTroubleshootingSession1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) ONamespace(oNamespace string) ApiMonitoringListTroubleshootingSession1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) OGenerationId(oGenerationId string) ApiMonitoringListTroubleshootingSession1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) OResourceVersion(oResourceVersion string) ApiMonitoringListTroubleshootingSession1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) OUuid(oUuid string) ApiMonitoringListTroubleshootingSession1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringListTroubleshootingSession1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) OModTime(oModTime time.Time) ApiMonitoringListTroubleshootingSession1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) OSelfLink(oSelfLink string) ApiMonitoringListTroubleshootingSession1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) LabelSelector(labelSelector string) ApiMonitoringListTroubleshootingSession1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) FieldSelector(fieldSelector string) ApiMonitoringListTroubleshootingSession1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringListTroubleshootingSession1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) From(from int32) ApiMonitoringListTroubleshootingSession1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) MaxResults(maxResults int32) ApiMonitoringListTroubleshootingSession1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) SortOrder(sortOrder string) ApiMonitoringListTroubleshootingSession1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringListTroubleshootingSession1Request) MetaOnly(metaOnly bool) ApiMonitoringListTroubleshootingSession1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringListTroubleshootingSession1Request) Execute() (MonitoringTroubleshootingSessionList, *_nethttp.Response, error) {
	return r.ApiService.ListTroubleshootingSession1Execute(r)
}

/*
 * ListTroubleshootingSession1 List TroubleshootingSession objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringListTroubleshootingSession1Request
 */
func (a *MonitoringV1ApiService) ListTroubleshootingSession1(ctx _context.Context) ApiMonitoringListTroubleshootingSession1Request {
	return ApiMonitoringListTroubleshootingSession1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSessionList
 */
func (a *MonitoringV1ApiService) ListTroubleshootingSession1Execute(r ApiMonitoringListTroubleshootingSession1Request) (MonitoringTroubleshootingSessionList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSessionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.ListTroubleshootingSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/TroubleshootingSession"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListTroubleshootingSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateAlertRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringAlert
}

func (r ApiMonitoringUpdateAlertRequest) Body(body MonitoringAlert) ApiMonitoringUpdateAlertRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateAlertRequest) Execute() (MonitoringAlert, *_nethttp.Response, error) {
	return r.ApiService.UpdateAlertExecute(r)
}

/*
 * UpdateAlert Update Alert object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateAlertRequest
 */
func (a *MonitoringV1ApiService) UpdateAlert(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateAlertRequest {
	return ApiMonitoringUpdateAlertRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlert
 */
func (a *MonitoringV1ApiService) UpdateAlertExecute(r ApiMonitoringUpdateAlertRequest) (MonitoringAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateAlert")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alerts/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateAlertExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateAlert1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringAlert
}

func (r ApiMonitoringUpdateAlert1Request) Body(body MonitoringAlert) ApiMonitoringUpdateAlert1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateAlert1Request) Execute() (MonitoringAlert, *_nethttp.Response, error) {
	return r.ApiService.UpdateAlert1Execute(r)
}

/*
 * UpdateAlert1 Update Alert object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateAlert1Request
 */
func (a *MonitoringV1ApiService) UpdateAlert1(ctx _context.Context, oName string) ApiMonitoringUpdateAlert1Request {
	return ApiMonitoringUpdateAlert1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlert
 */
func (a *MonitoringV1ApiService) UpdateAlert1Execute(r ApiMonitoringUpdateAlert1Request) (MonitoringAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateAlert1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alerts/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateAlert1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateAlertDestinationRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringAlertDestination
}

func (r ApiMonitoringUpdateAlertDestinationRequest) Body(body MonitoringAlertDestination) ApiMonitoringUpdateAlertDestinationRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateAlertDestinationRequest) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.UpdateAlertDestinationExecute(r)
}

/*
 * UpdateAlertDestination Update AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateAlertDestinationRequest
 */
func (a *MonitoringV1ApiService) UpdateAlertDestination(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateAlertDestinationRequest {
	return ApiMonitoringUpdateAlertDestinationRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) UpdateAlertDestinationExecute(r ApiMonitoringUpdateAlertDestinationRequest) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateAlertDestination")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateAlertDestinationExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateAlertDestination1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringAlertDestination
}

func (r ApiMonitoringUpdateAlertDestination1Request) Body(body MonitoringAlertDestination) ApiMonitoringUpdateAlertDestination1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateAlertDestination1Request) Execute() (MonitoringAlertDestination, *_nethttp.Response, error) {
	return r.ApiService.UpdateAlertDestination1Execute(r)
}

/*
 * UpdateAlertDestination1 Update AlertDestination object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateAlertDestination1Request
 */
func (a *MonitoringV1ApiService) UpdateAlertDestination1(ctx _context.Context, oName string) ApiMonitoringUpdateAlertDestination1Request {
	return ApiMonitoringUpdateAlertDestination1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertDestination
 */
func (a *MonitoringV1ApiService) UpdateAlertDestination1Execute(r ApiMonitoringUpdateAlertDestination1Request) (MonitoringAlertDestination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateAlertDestination1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertDestinations/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateAlertDestination1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringAlertPolicy
}

func (r ApiMonitoringUpdateAlertPolicyRequest) Body(body MonitoringAlertPolicy) ApiMonitoringUpdateAlertPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateAlertPolicyRequest) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateAlertPolicyExecute(r)
}

/*
 * UpdateAlertPolicy Update AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) UpdateAlertPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateAlertPolicyRequest {
	return ApiMonitoringUpdateAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) UpdateAlertPolicyExecute(r ApiMonitoringUpdateAlertPolicyRequest) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringAlertPolicy
}

func (r ApiMonitoringUpdateAlertPolicy1Request) Body(body MonitoringAlertPolicy) ApiMonitoringUpdateAlertPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateAlertPolicy1Request) Execute() (MonitoringAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateAlertPolicy1Execute(r)
}

/*
 * UpdateAlertPolicy1 Update AlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) UpdateAlertPolicy1(ctx _context.Context, oName string) ApiMonitoringUpdateAlertPolicy1Request {
	return ApiMonitoringUpdateAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAlertPolicy
 */
func (a *MonitoringV1ApiService) UpdateAlertPolicy1Execute(r ApiMonitoringUpdateAlertPolicy1Request) (MonitoringAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/alertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateAuditPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	body *MonitoringAuditPolicy
}

func (r ApiMonitoringUpdateAuditPolicyRequest) Body(body MonitoringAuditPolicy) ApiMonitoringUpdateAuditPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateAuditPolicyRequest) Execute() (MonitoringAuditPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateAuditPolicyExecute(r)
}

/*
 * UpdateAuditPolicy Update AuditPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringUpdateAuditPolicyRequest
 */
func (a *MonitoringV1ApiService) UpdateAuditPolicy(ctx _context.Context, oTenant string) ApiMonitoringUpdateAuditPolicyRequest {
	return ApiMonitoringUpdateAuditPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAuditPolicy
 */
func (a *MonitoringV1ApiService) UpdateAuditPolicyExecute(r ApiMonitoringUpdateAuditPolicyRequest) (MonitoringAuditPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAuditPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateAuditPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/audit-policy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateAuditPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateAuditPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	body *MonitoringAuditPolicy
}

func (r ApiMonitoringUpdateAuditPolicy1Request) Body(body MonitoringAuditPolicy) ApiMonitoringUpdateAuditPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateAuditPolicy1Request) Execute() (MonitoringAuditPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateAuditPolicy1Execute(r)
}

/*
 * UpdateAuditPolicy1 Update AuditPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringUpdateAuditPolicy1Request
 */
func (a *MonitoringV1ApiService) UpdateAuditPolicy1(ctx _context.Context) ApiMonitoringUpdateAuditPolicy1Request {
	return ApiMonitoringUpdateAuditPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAuditPolicy
 */
func (a *MonitoringV1ApiService) UpdateAuditPolicy1Execute(r ApiMonitoringUpdateAuditPolicy1Request) (MonitoringAuditPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAuditPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateAuditPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/audit-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateAuditPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateEventPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringEventPolicy
}

func (r ApiMonitoringUpdateEventPolicyRequest) Body(body MonitoringEventPolicy) ApiMonitoringUpdateEventPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateEventPolicyRequest) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateEventPolicyExecute(r)
}

/*
 * UpdateEventPolicy Update EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateEventPolicyRequest
 */
func (a *MonitoringV1ApiService) UpdateEventPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateEventPolicyRequest {
	return ApiMonitoringUpdateEventPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) UpdateEventPolicyExecute(r ApiMonitoringUpdateEventPolicyRequest) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateEventPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateEventPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateEventPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringEventPolicy
}

func (r ApiMonitoringUpdateEventPolicy1Request) Body(body MonitoringEventPolicy) ApiMonitoringUpdateEventPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateEventPolicy1Request) Execute() (MonitoringEventPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateEventPolicy1Execute(r)
}

/*
 * UpdateEventPolicy1 Update EventPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateEventPolicy1Request
 */
func (a *MonitoringV1ApiService) UpdateEventPolicy1(ctx _context.Context, oName string) ApiMonitoringUpdateEventPolicy1Request {
	return ApiMonitoringUpdateEventPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringEventPolicy
 */
func (a *MonitoringV1ApiService) UpdateEventPolicy1Execute(r ApiMonitoringUpdateEventPolicy1Request) (MonitoringEventPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringEventPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateEventPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/event-policy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateEventPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateFlowExportPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringFlowExportPolicy
}

func (r ApiMonitoringUpdateFlowExportPolicyRequest) Body(body MonitoringFlowExportPolicy) ApiMonitoringUpdateFlowExportPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateFlowExportPolicyRequest) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateFlowExportPolicyExecute(r)
}

/*
 * UpdateFlowExportPolicy Update FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateFlowExportPolicyRequest
 */
func (a *MonitoringV1ApiService) UpdateFlowExportPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateFlowExportPolicyRequest {
	return ApiMonitoringUpdateFlowExportPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) UpdateFlowExportPolicyExecute(r ApiMonitoringUpdateFlowExportPolicyRequest) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateFlowExportPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateFlowExportPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateFlowExportPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringFlowExportPolicy
}

func (r ApiMonitoringUpdateFlowExportPolicy1Request) Body(body MonitoringFlowExportPolicy) ApiMonitoringUpdateFlowExportPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateFlowExportPolicy1Request) Execute() (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateFlowExportPolicy1Execute(r)
}

/*
 * UpdateFlowExportPolicy1 Update FlowExportPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateFlowExportPolicy1Request
 */
func (a *MonitoringV1ApiService) UpdateFlowExportPolicy1(ctx _context.Context, oName string) ApiMonitoringUpdateFlowExportPolicy1Request {
	return ApiMonitoringUpdateFlowExportPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFlowExportPolicy
 */
func (a *MonitoringV1ApiService) UpdateFlowExportPolicy1Execute(r ApiMonitoringUpdateFlowExportPolicy1Request) (MonitoringFlowExportPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFlowExportPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateFlowExportPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/flowExportPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateFlowExportPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateFwlogPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringFwlogPolicy
}

func (r ApiMonitoringUpdateFwlogPolicyRequest) Body(body MonitoringFwlogPolicy) ApiMonitoringUpdateFwlogPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateFwlogPolicyRequest) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateFwlogPolicyExecute(r)
}

/*
 * UpdateFwlogPolicy Update FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateFwlogPolicyRequest
 */
func (a *MonitoringV1ApiService) UpdateFwlogPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateFwlogPolicyRequest {
	return ApiMonitoringUpdateFwlogPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) UpdateFwlogPolicyExecute(r ApiMonitoringUpdateFwlogPolicyRequest) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateFwlogPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateFwlogPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateFwlogPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringFwlogPolicy
}

func (r ApiMonitoringUpdateFwlogPolicy1Request) Body(body MonitoringFwlogPolicy) ApiMonitoringUpdateFwlogPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateFwlogPolicy1Request) Execute() (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateFwlogPolicy1Execute(r)
}

/*
 * UpdateFwlogPolicy1 Update FwlogPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateFwlogPolicy1Request
 */
func (a *MonitoringV1ApiService) UpdateFwlogPolicy1(ctx _context.Context, oName string) ApiMonitoringUpdateFwlogPolicy1Request {
	return ApiMonitoringUpdateFwlogPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringFwlogPolicy
 */
func (a *MonitoringV1ApiService) UpdateFwlogPolicy1Execute(r ApiMonitoringUpdateFwlogPolicy1Request) (MonitoringFwlogPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringFwlogPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateFwlogPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/fwlogPolicy/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateFwlogPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateMirrorSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringMirrorSession
}

func (r ApiMonitoringUpdateMirrorSessionRequest) Body(body MonitoringMirrorSession) ApiMonitoringUpdateMirrorSessionRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateMirrorSessionRequest) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.UpdateMirrorSessionExecute(r)
}

/*
 * UpdateMirrorSession Update MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateMirrorSessionRequest
 */
func (a *MonitoringV1ApiService) UpdateMirrorSession(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateMirrorSessionRequest {
	return ApiMonitoringUpdateMirrorSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) UpdateMirrorSessionExecute(r ApiMonitoringUpdateMirrorSessionRequest) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateMirrorSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateMirrorSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateMirrorSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringMirrorSession
}

func (r ApiMonitoringUpdateMirrorSession1Request) Body(body MonitoringMirrorSession) ApiMonitoringUpdateMirrorSession1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateMirrorSession1Request) Execute() (MonitoringMirrorSession, *_nethttp.Response, error) {
	return r.ApiService.UpdateMirrorSession1Execute(r)
}

/*
 * UpdateMirrorSession1 Update MirrorSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateMirrorSession1Request
 */
func (a *MonitoringV1ApiService) UpdateMirrorSession1(ctx _context.Context, oName string) ApiMonitoringUpdateMirrorSession1Request {
	return ApiMonitoringUpdateMirrorSession1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringMirrorSession
 */
func (a *MonitoringV1ApiService) UpdateMirrorSession1Execute(r ApiMonitoringUpdateMirrorSession1Request) (MonitoringMirrorSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringMirrorSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateMirrorSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/MirrorSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateMirrorSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateStatsAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringStatsAlertPolicy
}

func (r ApiMonitoringUpdateStatsAlertPolicyRequest) Body(body MonitoringStatsAlertPolicy) ApiMonitoringUpdateStatsAlertPolicyRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateStatsAlertPolicyRequest) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateStatsAlertPolicyExecute(r)
}

/*
 * UpdateStatsAlertPolicy Update StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateStatsAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) UpdateStatsAlertPolicy(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateStatsAlertPolicyRequest {
	return ApiMonitoringUpdateStatsAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) UpdateStatsAlertPolicyExecute(r ApiMonitoringUpdateStatsAlertPolicyRequest) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateStatsAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateStatsAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateStatsAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringStatsAlertPolicy
}

func (r ApiMonitoringUpdateStatsAlertPolicy1Request) Body(body MonitoringStatsAlertPolicy) ApiMonitoringUpdateStatsAlertPolicy1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateStatsAlertPolicy1Request) Execute() (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateStatsAlertPolicy1Execute(r)
}

/*
 * UpdateStatsAlertPolicy1 Update StatsAlertPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateStatsAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) UpdateStatsAlertPolicy1(ctx _context.Context, oName string) ApiMonitoringUpdateStatsAlertPolicy1Request {
	return ApiMonitoringUpdateStatsAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringStatsAlertPolicy
 */
func (a *MonitoringV1ApiService) UpdateStatsAlertPolicy1Execute(r ApiMonitoringUpdateStatsAlertPolicy1Request) (MonitoringStatsAlertPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringStatsAlertPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateStatsAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/statsAlertPolicies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateStatsAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateTroubleshootingSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName string
	body *MonitoringTroubleshootingSession
}

func (r ApiMonitoringUpdateTroubleshootingSessionRequest) Body(body MonitoringTroubleshootingSession) ApiMonitoringUpdateTroubleshootingSessionRequest {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateTroubleshootingSessionRequest) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.UpdateTroubleshootingSessionExecute(r)
}

/*
 * UpdateTroubleshootingSession Update TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiMonitoringUpdateTroubleshootingSessionRequest
 */
func (a *MonitoringV1ApiService) UpdateTroubleshootingSession(ctx _context.Context, oTenant string, oName string) ApiMonitoringUpdateTroubleshootingSessionRequest {
	return ApiMonitoringUpdateTroubleshootingSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) UpdateTroubleshootingSessionExecute(r ApiMonitoringUpdateTroubleshootingSessionRequest) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateTroubleshootingSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateTroubleshootingSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringUpdateTroubleshootingSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName string
	body *MonitoringTroubleshootingSession
}

func (r ApiMonitoringUpdateTroubleshootingSession1Request) Body(body MonitoringTroubleshootingSession) ApiMonitoringUpdateTroubleshootingSession1Request {
	r.body = &body
	return r
}

func (r ApiMonitoringUpdateTroubleshootingSession1Request) Execute() (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	return r.ApiService.UpdateTroubleshootingSession1Execute(r)
}

/*
 * UpdateTroubleshootingSession1 Update TroubleshootingSession object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiMonitoringUpdateTroubleshootingSession1Request
 */
func (a *MonitoringV1ApiService) UpdateTroubleshootingSession1(ctx _context.Context, oName string) ApiMonitoringUpdateTroubleshootingSession1Request {
	return ApiMonitoringUpdateTroubleshootingSession1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return MonitoringTroubleshootingSession
 */
func (a *MonitoringV1ApiService) UpdateTroubleshootingSession1Execute(r ApiMonitoringUpdateTroubleshootingSession1Request) (MonitoringTroubleshootingSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringTroubleshootingSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.UpdateTroubleshootingSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/TroubleshootingSession/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateTroubleshootingSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchAlertRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchAlertRequest) OName(oName string) ApiMonitoringWatchAlertRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchAlertRequest) ONamespace(oNamespace string) ApiMonitoringWatchAlertRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchAlertRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchAlertRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchAlertRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchAlertRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchAlertRequest) OUuid(oUuid string) ApiMonitoringWatchAlertRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchAlertRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchAlertRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchAlertRequest) OModTime(oModTime time.Time) ApiMonitoringWatchAlertRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchAlertRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchAlertRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchAlertRequest) LabelSelector(labelSelector string) ApiMonitoringWatchAlertRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchAlertRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchAlertRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchAlertRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchAlertRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchAlertRequest) From(from int32) ApiMonitoringWatchAlertRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchAlertRequest) MaxResults(maxResults int32) ApiMonitoringWatchAlertRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchAlertRequest) SortOrder(sortOrder string) ApiMonitoringWatchAlertRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchAlertRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchAlertRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchAlertRequest) Execute() (MonitoringAutoMsgAlertWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchAlertExecute(r)
}

/*
 * WatchAlert Watch Alert objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchAlertRequest
 */
func (a *MonitoringV1ApiService) WatchAlert(ctx _context.Context, oTenant string) ApiMonitoringWatchAlertRequest {
	return ApiMonitoringWatchAlertRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgAlertWatchHelper
 */
func (a *MonitoringV1ApiService) WatchAlertExecute(r ApiMonitoringWatchAlertRequest) (MonitoringAutoMsgAlertWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgAlertWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchAlert")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchAlertExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchAlert1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchAlert1Request) OName(oName string) ApiMonitoringWatchAlert1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchAlert1Request) OTenant(oTenant string) ApiMonitoringWatchAlert1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchAlert1Request) ONamespace(oNamespace string) ApiMonitoringWatchAlert1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchAlert1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchAlert1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchAlert1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchAlert1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchAlert1Request) OUuid(oUuid string) ApiMonitoringWatchAlert1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchAlert1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchAlert1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchAlert1Request) OModTime(oModTime time.Time) ApiMonitoringWatchAlert1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchAlert1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchAlert1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchAlert1Request) LabelSelector(labelSelector string) ApiMonitoringWatchAlert1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchAlert1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchAlert1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchAlert1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchAlert1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchAlert1Request) From(from int32) ApiMonitoringWatchAlert1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchAlert1Request) MaxResults(maxResults int32) ApiMonitoringWatchAlert1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchAlert1Request) SortOrder(sortOrder string) ApiMonitoringWatchAlert1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchAlert1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchAlert1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchAlert1Request) Execute() (MonitoringAutoMsgAlertWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchAlert1Execute(r)
}

/*
 * WatchAlert1 Watch Alert objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchAlert1Request
 */
func (a *MonitoringV1ApiService) WatchAlert1(ctx _context.Context) ApiMonitoringWatchAlert1Request {
	return ApiMonitoringWatchAlert1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgAlertWatchHelper
 */
func (a *MonitoringV1ApiService) WatchAlert1Execute(r ApiMonitoringWatchAlert1Request) (MonitoringAutoMsgAlertWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgAlertWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchAlert1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/alerts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchAlert1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchAlertDestinationRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchAlertDestinationRequest) OName(oName string) ApiMonitoringWatchAlertDestinationRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) ONamespace(oNamespace string) ApiMonitoringWatchAlertDestinationRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchAlertDestinationRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchAlertDestinationRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) OUuid(oUuid string) ApiMonitoringWatchAlertDestinationRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchAlertDestinationRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) OModTime(oModTime time.Time) ApiMonitoringWatchAlertDestinationRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchAlertDestinationRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) LabelSelector(labelSelector string) ApiMonitoringWatchAlertDestinationRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchAlertDestinationRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchAlertDestinationRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) From(from int32) ApiMonitoringWatchAlertDestinationRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) MaxResults(maxResults int32) ApiMonitoringWatchAlertDestinationRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) SortOrder(sortOrder string) ApiMonitoringWatchAlertDestinationRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchAlertDestinationRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchAlertDestinationRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchAlertDestinationRequest) Execute() (MonitoringAutoMsgAlertDestinationWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchAlertDestinationExecute(r)
}

/*
 * WatchAlertDestination Watch AlertDestination objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchAlertDestinationRequest
 */
func (a *MonitoringV1ApiService) WatchAlertDestination(ctx _context.Context, oTenant string) ApiMonitoringWatchAlertDestinationRequest {
	return ApiMonitoringWatchAlertDestinationRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgAlertDestinationWatchHelper
 */
func (a *MonitoringV1ApiService) WatchAlertDestinationExecute(r ApiMonitoringWatchAlertDestinationRequest) (MonitoringAutoMsgAlertDestinationWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgAlertDestinationWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchAlertDestination")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/alertDestinations"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchAlertDestinationExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchAlertDestination1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchAlertDestination1Request) OName(oName string) ApiMonitoringWatchAlertDestination1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) OTenant(oTenant string) ApiMonitoringWatchAlertDestination1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) ONamespace(oNamespace string) ApiMonitoringWatchAlertDestination1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchAlertDestination1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchAlertDestination1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) OUuid(oUuid string) ApiMonitoringWatchAlertDestination1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchAlertDestination1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) OModTime(oModTime time.Time) ApiMonitoringWatchAlertDestination1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchAlertDestination1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) LabelSelector(labelSelector string) ApiMonitoringWatchAlertDestination1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchAlertDestination1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchAlertDestination1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) From(from int32) ApiMonitoringWatchAlertDestination1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) MaxResults(maxResults int32) ApiMonitoringWatchAlertDestination1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) SortOrder(sortOrder string) ApiMonitoringWatchAlertDestination1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchAlertDestination1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchAlertDestination1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchAlertDestination1Request) Execute() (MonitoringAutoMsgAlertDestinationWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchAlertDestination1Execute(r)
}

/*
 * WatchAlertDestination1 Watch AlertDestination objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchAlertDestination1Request
 */
func (a *MonitoringV1ApiService) WatchAlertDestination1(ctx _context.Context) ApiMonitoringWatchAlertDestination1Request {
	return ApiMonitoringWatchAlertDestination1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgAlertDestinationWatchHelper
 */
func (a *MonitoringV1ApiService) WatchAlertDestination1Execute(r ApiMonitoringWatchAlertDestination1Request) (MonitoringAutoMsgAlertDestinationWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgAlertDestinationWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchAlertDestination1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/alertDestinations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchAlertDestination1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchAlertPolicyRequest) OName(oName string) ApiMonitoringWatchAlertPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) ONamespace(oNamespace string) ApiMonitoringWatchAlertPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchAlertPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchAlertPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) OUuid(oUuid string) ApiMonitoringWatchAlertPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchAlertPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringWatchAlertPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchAlertPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringWatchAlertPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchAlertPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchAlertPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) From(from int32) ApiMonitoringWatchAlertPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) MaxResults(maxResults int32) ApiMonitoringWatchAlertPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) SortOrder(sortOrder string) ApiMonitoringWatchAlertPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchAlertPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchAlertPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchAlertPolicyRequest) Execute() (MonitoringAutoMsgAlertPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchAlertPolicyExecute(r)
}

/*
 * WatchAlertPolicy Watch AlertPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) WatchAlertPolicy(ctx _context.Context, oTenant string) ApiMonitoringWatchAlertPolicyRequest {
	return ApiMonitoringWatchAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgAlertPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchAlertPolicyExecute(r ApiMonitoringWatchAlertPolicyRequest) (MonitoringAutoMsgAlertPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgAlertPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/alertPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchAlertPolicy1Request) OName(oName string) ApiMonitoringWatchAlertPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) OTenant(oTenant string) ApiMonitoringWatchAlertPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) ONamespace(oNamespace string) ApiMonitoringWatchAlertPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchAlertPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchAlertPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) OUuid(oUuid string) ApiMonitoringWatchAlertPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchAlertPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringWatchAlertPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchAlertPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringWatchAlertPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchAlertPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchAlertPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) From(from int32) ApiMonitoringWatchAlertPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) MaxResults(maxResults int32) ApiMonitoringWatchAlertPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) SortOrder(sortOrder string) ApiMonitoringWatchAlertPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchAlertPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchAlertPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchAlertPolicy1Request) Execute() (MonitoringAutoMsgAlertPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchAlertPolicy1Execute(r)
}

/*
 * WatchAlertPolicy1 Watch AlertPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) WatchAlertPolicy1(ctx _context.Context) ApiMonitoringWatchAlertPolicy1Request {
	return ApiMonitoringWatchAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgAlertPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchAlertPolicy1Execute(r ApiMonitoringWatchAlertPolicy1Request) (MonitoringAutoMsgAlertPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgAlertPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/alertPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchArchiveRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchArchiveRequestRequest) OName(oName string) ApiMonitoringWatchArchiveRequestRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) ONamespace(oNamespace string) ApiMonitoringWatchArchiveRequestRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchArchiveRequestRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchArchiveRequestRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) OUuid(oUuid string) ApiMonitoringWatchArchiveRequestRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchArchiveRequestRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) OModTime(oModTime time.Time) ApiMonitoringWatchArchiveRequestRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchArchiveRequestRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) LabelSelector(labelSelector string) ApiMonitoringWatchArchiveRequestRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchArchiveRequestRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchArchiveRequestRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) From(from int32) ApiMonitoringWatchArchiveRequestRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) MaxResults(maxResults int32) ApiMonitoringWatchArchiveRequestRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) SortOrder(sortOrder string) ApiMonitoringWatchArchiveRequestRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchArchiveRequestRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchArchiveRequestRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchArchiveRequestRequest) Execute() (MonitoringAutoMsgArchiveRequestWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchArchiveRequestExecute(r)
}

/*
 * WatchArchiveRequest Watch ArchiveRequest objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchArchiveRequestRequest
 */
func (a *MonitoringV1ApiService) WatchArchiveRequest(ctx _context.Context, oTenant string) ApiMonitoringWatchArchiveRequestRequest {
	return ApiMonitoringWatchArchiveRequestRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgArchiveRequestWatchHelper
 */
func (a *MonitoringV1ApiService) WatchArchiveRequestExecute(r ApiMonitoringWatchArchiveRequestRequest) (MonitoringAutoMsgArchiveRequestWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgArchiveRequestWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchArchiveRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/archive-requests"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchArchiveRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchArchiveRequest1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchArchiveRequest1Request) OName(oName string) ApiMonitoringWatchArchiveRequest1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) OTenant(oTenant string) ApiMonitoringWatchArchiveRequest1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) ONamespace(oNamespace string) ApiMonitoringWatchArchiveRequest1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchArchiveRequest1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchArchiveRequest1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) OUuid(oUuid string) ApiMonitoringWatchArchiveRequest1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchArchiveRequest1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) OModTime(oModTime time.Time) ApiMonitoringWatchArchiveRequest1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchArchiveRequest1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) LabelSelector(labelSelector string) ApiMonitoringWatchArchiveRequest1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchArchiveRequest1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchArchiveRequest1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) From(from int32) ApiMonitoringWatchArchiveRequest1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) MaxResults(maxResults int32) ApiMonitoringWatchArchiveRequest1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) SortOrder(sortOrder string) ApiMonitoringWatchArchiveRequest1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchArchiveRequest1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchArchiveRequest1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchArchiveRequest1Request) Execute() (MonitoringAutoMsgArchiveRequestWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchArchiveRequest1Execute(r)
}

/*
 * WatchArchiveRequest1 Watch ArchiveRequest objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchArchiveRequest1Request
 */
func (a *MonitoringV1ApiService) WatchArchiveRequest1(ctx _context.Context) ApiMonitoringWatchArchiveRequest1Request {
	return ApiMonitoringWatchArchiveRequest1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgArchiveRequestWatchHelper
 */
func (a *MonitoringV1ApiService) WatchArchiveRequest1Execute(r ApiMonitoringWatchArchiveRequest1Request) (MonitoringAutoMsgArchiveRequestWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgArchiveRequestWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchArchiveRequest1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/archive-requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchArchiveRequest1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchAuditPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchAuditPolicyRequest) OName(oName string) ApiMonitoringWatchAuditPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) ONamespace(oNamespace string) ApiMonitoringWatchAuditPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchAuditPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchAuditPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) OUuid(oUuid string) ApiMonitoringWatchAuditPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchAuditPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringWatchAuditPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchAuditPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringWatchAuditPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchAuditPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchAuditPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) From(from int32) ApiMonitoringWatchAuditPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) MaxResults(maxResults int32) ApiMonitoringWatchAuditPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) SortOrder(sortOrder string) ApiMonitoringWatchAuditPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchAuditPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchAuditPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchAuditPolicyRequest) Execute() (MonitoringAutoMsgAuditPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchAuditPolicyExecute(r)
}

/*
 * WatchAuditPolicy Watch AuditPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchAuditPolicyRequest
 */
func (a *MonitoringV1ApiService) WatchAuditPolicy(ctx _context.Context, oTenant string) ApiMonitoringWatchAuditPolicyRequest {
	return ApiMonitoringWatchAuditPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgAuditPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchAuditPolicyExecute(r ApiMonitoringWatchAuditPolicyRequest) (MonitoringAutoMsgAuditPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgAuditPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchAuditPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/audit-policy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchAuditPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchAuditPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchAuditPolicy1Request) OName(oName string) ApiMonitoringWatchAuditPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) OTenant(oTenant string) ApiMonitoringWatchAuditPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) ONamespace(oNamespace string) ApiMonitoringWatchAuditPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchAuditPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchAuditPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) OUuid(oUuid string) ApiMonitoringWatchAuditPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchAuditPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringWatchAuditPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchAuditPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringWatchAuditPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchAuditPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchAuditPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) From(from int32) ApiMonitoringWatchAuditPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) MaxResults(maxResults int32) ApiMonitoringWatchAuditPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) SortOrder(sortOrder string) ApiMonitoringWatchAuditPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchAuditPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchAuditPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchAuditPolicy1Request) Execute() (MonitoringAutoMsgAuditPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchAuditPolicy1Execute(r)
}

/*
 * WatchAuditPolicy1 Watch AuditPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchAuditPolicy1Request
 */
func (a *MonitoringV1ApiService) WatchAuditPolicy1(ctx _context.Context) ApiMonitoringWatchAuditPolicy1Request {
	return ApiMonitoringWatchAuditPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgAuditPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchAuditPolicy1Execute(r ApiMonitoringWatchAuditPolicy1Request) (MonitoringAutoMsgAuditPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgAuditPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchAuditPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/audit-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchAuditPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchEventPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchEventPolicyRequest) OName(oName string) ApiMonitoringWatchEventPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) ONamespace(oNamespace string) ApiMonitoringWatchEventPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchEventPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchEventPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) OUuid(oUuid string) ApiMonitoringWatchEventPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchEventPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringWatchEventPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchEventPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringWatchEventPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchEventPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchEventPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) From(from int32) ApiMonitoringWatchEventPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) MaxResults(maxResults int32) ApiMonitoringWatchEventPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) SortOrder(sortOrder string) ApiMonitoringWatchEventPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchEventPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchEventPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchEventPolicyRequest) Execute() (MonitoringAutoMsgEventPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchEventPolicyExecute(r)
}

/*
 * WatchEventPolicy Watch EventPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchEventPolicyRequest
 */
func (a *MonitoringV1ApiService) WatchEventPolicy(ctx _context.Context, oTenant string) ApiMonitoringWatchEventPolicyRequest {
	return ApiMonitoringWatchEventPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgEventPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchEventPolicyExecute(r ApiMonitoringWatchEventPolicyRequest) (MonitoringAutoMsgEventPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgEventPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchEventPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/event-policy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchEventPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchEventPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchEventPolicy1Request) OName(oName string) ApiMonitoringWatchEventPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) OTenant(oTenant string) ApiMonitoringWatchEventPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) ONamespace(oNamespace string) ApiMonitoringWatchEventPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchEventPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchEventPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) OUuid(oUuid string) ApiMonitoringWatchEventPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchEventPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringWatchEventPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchEventPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringWatchEventPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchEventPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchEventPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) From(from int32) ApiMonitoringWatchEventPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) MaxResults(maxResults int32) ApiMonitoringWatchEventPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) SortOrder(sortOrder string) ApiMonitoringWatchEventPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchEventPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchEventPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchEventPolicy1Request) Execute() (MonitoringAutoMsgEventPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchEventPolicy1Execute(r)
}

/*
 * WatchEventPolicy1 Watch EventPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchEventPolicy1Request
 */
func (a *MonitoringV1ApiService) WatchEventPolicy1(ctx _context.Context) ApiMonitoringWatchEventPolicy1Request {
	return ApiMonitoringWatchEventPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgEventPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchEventPolicy1Execute(r ApiMonitoringWatchEventPolicy1Request) (MonitoringAutoMsgEventPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgEventPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchEventPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/event-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchEventPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchFlowExportPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchFlowExportPolicyRequest) OName(oName string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) ONamespace(oNamespace string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) OUuid(oUuid string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchFlowExportPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringWatchFlowExportPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) From(from int32) ApiMonitoringWatchFlowExportPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) MaxResults(maxResults int32) ApiMonitoringWatchFlowExportPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) SortOrder(sortOrder string) ApiMonitoringWatchFlowExportPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchFlowExportPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchFlowExportPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchFlowExportPolicyRequest) Execute() (MonitoringAutoMsgFlowExportPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchFlowExportPolicyExecute(r)
}

/*
 * WatchFlowExportPolicy Watch FlowExportPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchFlowExportPolicyRequest
 */
func (a *MonitoringV1ApiService) WatchFlowExportPolicy(ctx _context.Context, oTenant string) ApiMonitoringWatchFlowExportPolicyRequest {
	return ApiMonitoringWatchFlowExportPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgFlowExportPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchFlowExportPolicyExecute(r ApiMonitoringWatchFlowExportPolicyRequest) (MonitoringAutoMsgFlowExportPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgFlowExportPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchFlowExportPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/flowExportPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchFlowExportPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchFlowExportPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchFlowExportPolicy1Request) OName(oName string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) OTenant(oTenant string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) ONamespace(oNamespace string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) OUuid(oUuid string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) From(from int32) ApiMonitoringWatchFlowExportPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) MaxResults(maxResults int32) ApiMonitoringWatchFlowExportPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) SortOrder(sortOrder string) ApiMonitoringWatchFlowExportPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchFlowExportPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchFlowExportPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchFlowExportPolicy1Request) Execute() (MonitoringAutoMsgFlowExportPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchFlowExportPolicy1Execute(r)
}

/*
 * WatchFlowExportPolicy1 Watch FlowExportPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchFlowExportPolicy1Request
 */
func (a *MonitoringV1ApiService) WatchFlowExportPolicy1(ctx _context.Context) ApiMonitoringWatchFlowExportPolicy1Request {
	return ApiMonitoringWatchFlowExportPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgFlowExportPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchFlowExportPolicy1Execute(r ApiMonitoringWatchFlowExportPolicy1Request) (MonitoringAutoMsgFlowExportPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgFlowExportPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchFlowExportPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/flowExportPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchFlowExportPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchFwlogPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchFwlogPolicyRequest) OName(oName string) ApiMonitoringWatchFwlogPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) ONamespace(oNamespace string) ApiMonitoringWatchFwlogPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchFwlogPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchFwlogPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) OUuid(oUuid string) ApiMonitoringWatchFwlogPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchFwlogPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringWatchFwlogPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchFwlogPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringWatchFwlogPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchFwlogPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchFwlogPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) From(from int32) ApiMonitoringWatchFwlogPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) MaxResults(maxResults int32) ApiMonitoringWatchFwlogPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) SortOrder(sortOrder string) ApiMonitoringWatchFwlogPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchFwlogPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchFwlogPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchFwlogPolicyRequest) Execute() (MonitoringAutoMsgFwlogPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchFwlogPolicyExecute(r)
}

/*
 * WatchFwlogPolicy Watch FwlogPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchFwlogPolicyRequest
 */
func (a *MonitoringV1ApiService) WatchFwlogPolicy(ctx _context.Context, oTenant string) ApiMonitoringWatchFwlogPolicyRequest {
	return ApiMonitoringWatchFwlogPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgFwlogPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchFwlogPolicyExecute(r ApiMonitoringWatchFwlogPolicyRequest) (MonitoringAutoMsgFwlogPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgFwlogPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchFwlogPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/fwlogPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchFwlogPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchFwlogPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchFwlogPolicy1Request) OName(oName string) ApiMonitoringWatchFwlogPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) OTenant(oTenant string) ApiMonitoringWatchFwlogPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) ONamespace(oNamespace string) ApiMonitoringWatchFwlogPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchFwlogPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchFwlogPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) OUuid(oUuid string) ApiMonitoringWatchFwlogPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchFwlogPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringWatchFwlogPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchFwlogPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringWatchFwlogPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchFwlogPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchFwlogPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) From(from int32) ApiMonitoringWatchFwlogPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) MaxResults(maxResults int32) ApiMonitoringWatchFwlogPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) SortOrder(sortOrder string) ApiMonitoringWatchFwlogPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchFwlogPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchFwlogPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchFwlogPolicy1Request) Execute() (MonitoringAutoMsgFwlogPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchFwlogPolicy1Execute(r)
}

/*
 * WatchFwlogPolicy1 Watch FwlogPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchFwlogPolicy1Request
 */
func (a *MonitoringV1ApiService) WatchFwlogPolicy1(ctx _context.Context) ApiMonitoringWatchFwlogPolicy1Request {
	return ApiMonitoringWatchFwlogPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgFwlogPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchFwlogPolicy1Execute(r ApiMonitoringWatchFwlogPolicy1Request) (MonitoringAutoMsgFwlogPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgFwlogPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchFwlogPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/fwlogPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchFwlogPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchMirrorSessionRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchMirrorSessionRequest) OName(oName string) ApiMonitoringWatchMirrorSessionRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) ONamespace(oNamespace string) ApiMonitoringWatchMirrorSessionRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchMirrorSessionRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchMirrorSessionRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) OUuid(oUuid string) ApiMonitoringWatchMirrorSessionRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchMirrorSessionRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) OModTime(oModTime time.Time) ApiMonitoringWatchMirrorSessionRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchMirrorSessionRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) LabelSelector(labelSelector string) ApiMonitoringWatchMirrorSessionRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchMirrorSessionRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchMirrorSessionRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) From(from int32) ApiMonitoringWatchMirrorSessionRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) MaxResults(maxResults int32) ApiMonitoringWatchMirrorSessionRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) SortOrder(sortOrder string) ApiMonitoringWatchMirrorSessionRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchMirrorSessionRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchMirrorSessionRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchMirrorSessionRequest) Execute() (MonitoringAutoMsgMirrorSessionWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchMirrorSessionExecute(r)
}

/*
 * WatchMirrorSession Watch MirrorSession objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchMirrorSessionRequest
 */
func (a *MonitoringV1ApiService) WatchMirrorSession(ctx _context.Context, oTenant string) ApiMonitoringWatchMirrorSessionRequest {
	return ApiMonitoringWatchMirrorSessionRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgMirrorSessionWatchHelper
 */
func (a *MonitoringV1ApiService) WatchMirrorSessionExecute(r ApiMonitoringWatchMirrorSessionRequest) (MonitoringAutoMsgMirrorSessionWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgMirrorSessionWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchMirrorSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/MirrorSession"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchMirrorSessionExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchMirrorSession1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchMirrorSession1Request) OName(oName string) ApiMonitoringWatchMirrorSession1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) OTenant(oTenant string) ApiMonitoringWatchMirrorSession1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) ONamespace(oNamespace string) ApiMonitoringWatchMirrorSession1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchMirrorSession1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchMirrorSession1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) OUuid(oUuid string) ApiMonitoringWatchMirrorSession1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchMirrorSession1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) OModTime(oModTime time.Time) ApiMonitoringWatchMirrorSession1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchMirrorSession1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) LabelSelector(labelSelector string) ApiMonitoringWatchMirrorSession1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchMirrorSession1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchMirrorSession1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) From(from int32) ApiMonitoringWatchMirrorSession1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) MaxResults(maxResults int32) ApiMonitoringWatchMirrorSession1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) SortOrder(sortOrder string) ApiMonitoringWatchMirrorSession1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchMirrorSession1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchMirrorSession1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchMirrorSession1Request) Execute() (MonitoringAutoMsgMirrorSessionWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchMirrorSession1Execute(r)
}

/*
 * WatchMirrorSession1 Watch MirrorSession objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchMirrorSession1Request
 */
func (a *MonitoringV1ApiService) WatchMirrorSession1(ctx _context.Context) ApiMonitoringWatchMirrorSession1Request {
	return ApiMonitoringWatchMirrorSession1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgMirrorSessionWatchHelper
 */
func (a *MonitoringV1ApiService) WatchMirrorSession1Execute(r ApiMonitoringWatchMirrorSession1Request) (MonitoringAutoMsgMirrorSessionWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgMirrorSessionWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchMirrorSession1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/MirrorSession"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchMirrorSession1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchStatsAlertPolicyRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchStatsAlertPolicyRequest) OName(oName string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) ONamespace(oNamespace string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) OUuid(oUuid string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) OModTime(oModTime time.Time) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) LabelSelector(labelSelector string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) From(from int32) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) MaxResults(maxResults int32) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) SortOrder(sortOrder string) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicyRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchStatsAlertPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchStatsAlertPolicyRequest) Execute() (MonitoringAutoMsgStatsAlertPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchStatsAlertPolicyExecute(r)
}

/*
 * WatchStatsAlertPolicy Watch StatsAlertPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiMonitoringWatchStatsAlertPolicyRequest
 */
func (a *MonitoringV1ApiService) WatchStatsAlertPolicy(ctx _context.Context, oTenant string) ApiMonitoringWatchStatsAlertPolicyRequest {
	return ApiMonitoringWatchStatsAlertPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgStatsAlertPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchStatsAlertPolicyExecute(r ApiMonitoringWatchStatsAlertPolicyRequest) (MonitoringAutoMsgStatsAlertPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgStatsAlertPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchStatsAlertPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/tenant/{O.Tenant}/statsAlertPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchStatsAlertPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchStatsAlertPolicy1Request struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchStatsAlertPolicy1Request) OName(oName string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) OTenant(oTenant string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) ONamespace(oNamespace string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) OGenerationId(oGenerationId string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) OResourceVersion(oResourceVersion string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) OUuid(oUuid string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) OModTime(oModTime time.Time) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) OSelfLink(oSelfLink string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) LabelSelector(labelSelector string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) FieldSelector(fieldSelector string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) From(from int32) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) MaxResults(maxResults int32) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) SortOrder(sortOrder string) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchStatsAlertPolicy1Request) MetaOnly(metaOnly bool) ApiMonitoringWatchStatsAlertPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchStatsAlertPolicy1Request) Execute() (MonitoringAutoMsgStatsAlertPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchStatsAlertPolicy1Execute(r)
}

/*
 * WatchStatsAlertPolicy1 Watch StatsAlertPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchStatsAlertPolicy1Request
 */
func (a *MonitoringV1ApiService) WatchStatsAlertPolicy1(ctx _context.Context) ApiMonitoringWatchStatsAlertPolicy1Request {
	return ApiMonitoringWatchStatsAlertPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgStatsAlertPolicyWatchHelper
 */
func (a *MonitoringV1ApiService) WatchStatsAlertPolicy1Execute(r ApiMonitoringWatchStatsAlertPolicy1Request) (MonitoringAutoMsgStatsAlertPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgStatsAlertPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchStatsAlertPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/statsAlertPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchStatsAlertPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringWatchTechSupportRequestRequest struct {
	ctx _context.Context
	ApiService *MonitoringV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiMonitoringWatchTechSupportRequestRequest) OName(oName string) ApiMonitoringWatchTechSupportRequestRequest {
	r.oName = &oName
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) OTenant(oTenant string) ApiMonitoringWatchTechSupportRequestRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) ONamespace(oNamespace string) ApiMonitoringWatchTechSupportRequestRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) OGenerationId(oGenerationId string) ApiMonitoringWatchTechSupportRequestRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) OResourceVersion(oResourceVersion string) ApiMonitoringWatchTechSupportRequestRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) OUuid(oUuid string) ApiMonitoringWatchTechSupportRequestRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) OCreationTime(oCreationTime time.Time) ApiMonitoringWatchTechSupportRequestRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) OModTime(oModTime time.Time) ApiMonitoringWatchTechSupportRequestRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) OSelfLink(oSelfLink string) ApiMonitoringWatchTechSupportRequestRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) LabelSelector(labelSelector string) ApiMonitoringWatchTechSupportRequestRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) FieldSelector(fieldSelector string) ApiMonitoringWatchTechSupportRequestRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) FieldChangeSelector(fieldChangeSelector []string) ApiMonitoringWatchTechSupportRequestRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) From(from int32) ApiMonitoringWatchTechSupportRequestRequest {
	r.from = &from
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) MaxResults(maxResults int32) ApiMonitoringWatchTechSupportRequestRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) SortOrder(sortOrder string) ApiMonitoringWatchTechSupportRequestRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiMonitoringWatchTechSupportRequestRequest) MetaOnly(metaOnly bool) ApiMonitoringWatchTechSupportRequestRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiMonitoringWatchTechSupportRequestRequest) Execute() (MonitoringAutoMsgTechSupportRequestWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchTechSupportRequestExecute(r)
}

/*
 * WatchTechSupportRequest Watch TechSupportRequest objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMonitoringWatchTechSupportRequestRequest
 */
func (a *MonitoringV1ApiService) WatchTechSupportRequest(ctx _context.Context) ApiMonitoringWatchTechSupportRequestRequest {
	return ApiMonitoringWatchTechSupportRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MonitoringAutoMsgTechSupportRequestWatchHelper
 */
func (a *MonitoringV1ApiService) WatchTechSupportRequestExecute(r ApiMonitoringWatchTechSupportRequestRequest) (MonitoringAutoMsgTechSupportRequestWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitoringAutoMsgTechSupportRequestWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringV1ApiService.WatchTechSupportRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/monitoring/v1/watch/techsupport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchTechSupportRequestExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
