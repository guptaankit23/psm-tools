/*
 * Objstore API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// ObjstoreObjectStatus struct for ObjstoreObjectStatus
type ObjstoreObjectStatus struct {
	// Digest is a hash digest of the object content.
	Digest *string `json:"digest,omitempty"`
	// Size is the total size of the object.
	Size *string `json:"size,omitempty"`
}

// NewObjstoreObjectStatus instantiates a new ObjstoreObjectStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjstoreObjectStatus() *ObjstoreObjectStatus {
	this := ObjstoreObjectStatus{}
	return &this
}

// NewObjstoreObjectStatusWithDefaults instantiates a new ObjstoreObjectStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjstoreObjectStatusWithDefaults() *ObjstoreObjectStatus {
	this := ObjstoreObjectStatus{}
	return &this
}

// GetDigest returns the Digest field value if set, zero value otherwise.
func (o *ObjstoreObjectStatus) GetDigest() string {
	if o == nil || o.Digest == nil {
		var ret string
		return ret
	}
	return *o.Digest
}

// GetDigestOk returns a tuple with the Digest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjstoreObjectStatus) GetDigestOk() (*string, bool) {
	if o == nil || o.Digest == nil {
		return nil, false
	}
	return o.Digest, true
}

// HasDigest returns a boolean if a field has been set.
func (o *ObjstoreObjectStatus) HasDigest() bool {
	if o != nil && o.Digest != nil {
		return true
	}

	return false
}

// SetDigest gets a reference to the given string and assigns it to the Digest field.
func (o *ObjstoreObjectStatus) SetDigest(v string) {
	o.Digest = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ObjstoreObjectStatus) GetSize() string {
	if o == nil || o.Size == nil {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjstoreObjectStatus) GetSizeOk() (*string, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ObjstoreObjectStatus) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *ObjstoreObjectStatus) SetSize(v string) {
	o.Size = &v
}

func (o ObjstoreObjectStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Digest != nil {
		toSerialize["digest"] = o.Digest
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableObjstoreObjectStatus struct {
	value *ObjstoreObjectStatus
	isSet bool
}

func (v NullableObjstoreObjectStatus) Get() *ObjstoreObjectStatus {
	return v.value
}

func (v *NullableObjstoreObjectStatus) Set(val *ObjstoreObjectStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableObjstoreObjectStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableObjstoreObjectStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjstoreObjectStatus(val *ObjstoreObjectStatus) *NullableObjstoreObjectStatus {
	return &NullableObjstoreObjectStatus{value: val, isSet: true}
}

func (v NullableObjstoreObjectStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjstoreObjectStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


