/*
 * Monitoring API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// MonitoringAlertStatus Status part of the alert object.
type MonitoringAlertStatus struct {
	Acknowledged *MonitoringAuditInfo `json:"acknowledged,omitempty"`
	// Event that triggered the alert.
	EventUri *string `json:"event-uri,omitempty"`
	// Message from the alert rule that triggered the alert.
	Message *string `json:"message,omitempty"`
	ObjectRef *ApiObjectRef `json:"object-ref,omitempty"`
	Reason *MonitoringAlertReason `json:"reason,omitempty"`
	Resolved *MonitoringAuditInfo `json:"resolved,omitempty"`
	// Severity of an alert.
	Severity *string `json:"severity,omitempty"`
	Source *MonitoringAlertSource `json:"source,omitempty"`
	// TotalHits on this alert, If there is an exisiting alert for the condition, we do not re-create the alert instead we update this counter.
	TotalHits *int32 `json:"total-hits,omitempty"`
}

// NewMonitoringAlertStatus instantiates a new MonitoringAlertStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringAlertStatus() *MonitoringAlertStatus {
	this := MonitoringAlertStatus{}
	var severity string = "info"
	this.Severity = &severity
	return &this
}

// NewMonitoringAlertStatusWithDefaults instantiates a new MonitoringAlertStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringAlertStatusWithDefaults() *MonitoringAlertStatus {
	this := MonitoringAlertStatus{}
	var severity string = "info"
	this.Severity = &severity
	return &this
}

// GetAcknowledged returns the Acknowledged field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetAcknowledged() MonitoringAuditInfo {
	if o == nil || o.Acknowledged == nil {
		var ret MonitoringAuditInfo
		return ret
	}
	return *o.Acknowledged
}

// GetAcknowledgedOk returns a tuple with the Acknowledged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetAcknowledgedOk() (*MonitoringAuditInfo, bool) {
	if o == nil || o.Acknowledged == nil {
		return nil, false
	}
	return o.Acknowledged, true
}

// HasAcknowledged returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasAcknowledged() bool {
	if o != nil && o.Acknowledged != nil {
		return true
	}

	return false
}

// SetAcknowledged gets a reference to the given MonitoringAuditInfo and assigns it to the Acknowledged field.
func (o *MonitoringAlertStatus) SetAcknowledged(v MonitoringAuditInfo) {
	o.Acknowledged = &v
}

// GetEventUri returns the EventUri field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetEventUri() string {
	if o == nil || o.EventUri == nil {
		var ret string
		return ret
	}
	return *o.EventUri
}

// GetEventUriOk returns a tuple with the EventUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetEventUriOk() (*string, bool) {
	if o == nil || o.EventUri == nil {
		return nil, false
	}
	return o.EventUri, true
}

// HasEventUri returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasEventUri() bool {
	if o != nil && o.EventUri != nil {
		return true
	}

	return false
}

// SetEventUri gets a reference to the given string and assigns it to the EventUri field.
func (o *MonitoringAlertStatus) SetEventUri(v string) {
	o.EventUri = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MonitoringAlertStatus) SetMessage(v string) {
	o.Message = &v
}

// GetObjectRef returns the ObjectRef field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetObjectRef() ApiObjectRef {
	if o == nil || o.ObjectRef == nil {
		var ret ApiObjectRef
		return ret
	}
	return *o.ObjectRef
}

// GetObjectRefOk returns a tuple with the ObjectRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetObjectRefOk() (*ApiObjectRef, bool) {
	if o == nil || o.ObjectRef == nil {
		return nil, false
	}
	return o.ObjectRef, true
}

// HasObjectRef returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasObjectRef() bool {
	if o != nil && o.ObjectRef != nil {
		return true
	}

	return false
}

// SetObjectRef gets a reference to the given ApiObjectRef and assigns it to the ObjectRef field.
func (o *MonitoringAlertStatus) SetObjectRef(v ApiObjectRef) {
	o.ObjectRef = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetReason() MonitoringAlertReason {
	if o == nil || o.Reason == nil {
		var ret MonitoringAlertReason
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetReasonOk() (*MonitoringAlertReason, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given MonitoringAlertReason and assigns it to the Reason field.
func (o *MonitoringAlertStatus) SetReason(v MonitoringAlertReason) {
	o.Reason = &v
}

// GetResolved returns the Resolved field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetResolved() MonitoringAuditInfo {
	if o == nil || o.Resolved == nil {
		var ret MonitoringAuditInfo
		return ret
	}
	return *o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetResolvedOk() (*MonitoringAuditInfo, bool) {
	if o == nil || o.Resolved == nil {
		return nil, false
	}
	return o.Resolved, true
}

// HasResolved returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasResolved() bool {
	if o != nil && o.Resolved != nil {
		return true
	}

	return false
}

// SetResolved gets a reference to the given MonitoringAuditInfo and assigns it to the Resolved field.
func (o *MonitoringAlertStatus) SetResolved(v MonitoringAuditInfo) {
	o.Resolved = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *MonitoringAlertStatus) SetSeverity(v string) {
	o.Severity = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetSource() MonitoringAlertSource {
	if o == nil || o.Source == nil {
		var ret MonitoringAlertSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetSourceOk() (*MonitoringAlertSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given MonitoringAlertSource and assigns it to the Source field.
func (o *MonitoringAlertStatus) SetSource(v MonitoringAlertSource) {
	o.Source = &v
}

// GetTotalHits returns the TotalHits field value if set, zero value otherwise.
func (o *MonitoringAlertStatus) GetTotalHits() int32 {
	if o == nil || o.TotalHits == nil {
		var ret int32
		return ret
	}
	return *o.TotalHits
}

// GetTotalHitsOk returns a tuple with the TotalHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringAlertStatus) GetTotalHitsOk() (*int32, bool) {
	if o == nil || o.TotalHits == nil {
		return nil, false
	}
	return o.TotalHits, true
}

// HasTotalHits returns a boolean if a field has been set.
func (o *MonitoringAlertStatus) HasTotalHits() bool {
	if o != nil && o.TotalHits != nil {
		return true
	}

	return false
}

// SetTotalHits gets a reference to the given int32 and assigns it to the TotalHits field.
func (o *MonitoringAlertStatus) SetTotalHits(v int32) {
	o.TotalHits = &v
}

func (o MonitoringAlertStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Acknowledged != nil {
		toSerialize["acknowledged"] = o.Acknowledged
	}
	if o.EventUri != nil {
		toSerialize["event-uri"] = o.EventUri
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.ObjectRef != nil {
		toSerialize["object-ref"] = o.ObjectRef
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Resolved != nil {
		toSerialize["resolved"] = o.Resolved
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.TotalHits != nil {
		toSerialize["total-hits"] = o.TotalHits
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringAlertStatus struct {
	value *MonitoringAlertStatus
	isSet bool
}

func (v NullableMonitoringAlertStatus) Get() *MonitoringAlertStatus {
	return v.value
}

func (v *NullableMonitoringAlertStatus) Set(val *MonitoringAlertStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringAlertStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringAlertStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringAlertStatus(val *MonitoringAlertStatus) *NullableMonitoringAlertStatus {
	return &NullableMonitoringAlertStatus{value: val, isSet: true}
}

func (v NullableMonitoringAlertStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringAlertStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


