/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"encoding/json"
)

// NetworkNetworkSpec spec part of network object.
type NetworkNetworkSpec struct {
	// Security Policy to apply in the egress direction.
	EgressSecurityPolicy *[]string `json:"egress-security-policy,omitempty"`
	FirewallProfile *NetworkNetworkFirewallProfile `json:"firewall-profile,omitempty"`
	// Security Policy to apply in the ingress direction.
	IngressSecurityPolicy *[]string `json:"ingress-security-policy,omitempty"`
	// Relay Configuration if any.
	IpamPolicy *string `json:"ipam-policy,omitempty"`
	// IPv4 gateway for this subnet. Should be a valid v4 or v6 IP address.
	Ipv4Gateway *string `json:"ipv4-gateway,omitempty"`
	// IPv4 subnet CIDR. Should be a valid v4 or v6 CIDR block.
	Ipv4Subnet *string `json:"ipv4-subnet,omitempty"`
	// IPv6 gateway.
	Ipv6Gateway *string `json:"ipv6-gateway,omitempty"`
	// IPv6 subnet CIDR.
	Ipv6Subnet *string `json:"ipv6-subnet,omitempty"`
	// If supplied, this network will only be applied to the orchestrators specified.
	Orchestrators *[]NetworkOrchestratorInfo `json:"orchestrators,omitempty"`
	RouteImportExport *NetworkRDSpec `json:"route-import-export,omitempty"`
	// type of network. (vlan/vxlan/routed etc).
	Type *string `json:"type,omitempty"`
	// VirtualRouter specifies the VRF this network belongs to.
	VirtualRouter *string `json:"virtual-router,omitempty"`
	// Vlan ID for the network. Value should be between 0 and 4095.
	VlanId *int64 `json:"vlan-id,omitempty"`
	// Vxlan VNI for the network. Value should be between 0 and 16777215.
	VxlanVni *int64 `json:"vxlan-vni,omitempty"`
}

// NewNetworkNetworkSpec instantiates a new NetworkNetworkSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkNetworkSpec() *NetworkNetworkSpec {
	this := NetworkNetworkSpec{}
	var type_ string = "bridged"
	this.Type = &type_
	return &this
}

// NewNetworkNetworkSpecWithDefaults instantiates a new NetworkNetworkSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkNetworkSpecWithDefaults() *NetworkNetworkSpec {
	this := NetworkNetworkSpec{}
	var type_ string = "bridged"
	this.Type = &type_
	return &this
}

// GetEgressSecurityPolicy returns the EgressSecurityPolicy field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetEgressSecurityPolicy() []string {
	if o == nil || o.EgressSecurityPolicy == nil {
		var ret []string
		return ret
	}
	return *o.EgressSecurityPolicy
}

// GetEgressSecurityPolicyOk returns a tuple with the EgressSecurityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetEgressSecurityPolicyOk() (*[]string, bool) {
	if o == nil || o.EgressSecurityPolicy == nil {
		return nil, false
	}
	return o.EgressSecurityPolicy, true
}

// HasEgressSecurityPolicy returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasEgressSecurityPolicy() bool {
	if o != nil && o.EgressSecurityPolicy != nil {
		return true
	}

	return false
}

// SetEgressSecurityPolicy gets a reference to the given []string and assigns it to the EgressSecurityPolicy field.
func (o *NetworkNetworkSpec) SetEgressSecurityPolicy(v []string) {
	o.EgressSecurityPolicy = &v
}

// GetFirewallProfile returns the FirewallProfile field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetFirewallProfile() NetworkNetworkFirewallProfile {
	if o == nil || o.FirewallProfile == nil {
		var ret NetworkNetworkFirewallProfile
		return ret
	}
	return *o.FirewallProfile
}

// GetFirewallProfileOk returns a tuple with the FirewallProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetFirewallProfileOk() (*NetworkNetworkFirewallProfile, bool) {
	if o == nil || o.FirewallProfile == nil {
		return nil, false
	}
	return o.FirewallProfile, true
}

// HasFirewallProfile returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasFirewallProfile() bool {
	if o != nil && o.FirewallProfile != nil {
		return true
	}

	return false
}

// SetFirewallProfile gets a reference to the given NetworkNetworkFirewallProfile and assigns it to the FirewallProfile field.
func (o *NetworkNetworkSpec) SetFirewallProfile(v NetworkNetworkFirewallProfile) {
	o.FirewallProfile = &v
}

// GetIngressSecurityPolicy returns the IngressSecurityPolicy field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetIngressSecurityPolicy() []string {
	if o == nil || o.IngressSecurityPolicy == nil {
		var ret []string
		return ret
	}
	return *o.IngressSecurityPolicy
}

// GetIngressSecurityPolicyOk returns a tuple with the IngressSecurityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetIngressSecurityPolicyOk() (*[]string, bool) {
	if o == nil || o.IngressSecurityPolicy == nil {
		return nil, false
	}
	return o.IngressSecurityPolicy, true
}

// HasIngressSecurityPolicy returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasIngressSecurityPolicy() bool {
	if o != nil && o.IngressSecurityPolicy != nil {
		return true
	}

	return false
}

// SetIngressSecurityPolicy gets a reference to the given []string and assigns it to the IngressSecurityPolicy field.
func (o *NetworkNetworkSpec) SetIngressSecurityPolicy(v []string) {
	o.IngressSecurityPolicy = &v
}

// GetIpamPolicy returns the IpamPolicy field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetIpamPolicy() string {
	if o == nil || o.IpamPolicy == nil {
		var ret string
		return ret
	}
	return *o.IpamPolicy
}

// GetIpamPolicyOk returns a tuple with the IpamPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetIpamPolicyOk() (*string, bool) {
	if o == nil || o.IpamPolicy == nil {
		return nil, false
	}
	return o.IpamPolicy, true
}

// HasIpamPolicy returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasIpamPolicy() bool {
	if o != nil && o.IpamPolicy != nil {
		return true
	}

	return false
}

// SetIpamPolicy gets a reference to the given string and assigns it to the IpamPolicy field.
func (o *NetworkNetworkSpec) SetIpamPolicy(v string) {
	o.IpamPolicy = &v
}

// GetIpv4Gateway returns the Ipv4Gateway field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetIpv4Gateway() string {
	if o == nil || o.Ipv4Gateway == nil {
		var ret string
		return ret
	}
	return *o.Ipv4Gateway
}

// GetIpv4GatewayOk returns a tuple with the Ipv4Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetIpv4GatewayOk() (*string, bool) {
	if o == nil || o.Ipv4Gateway == nil {
		return nil, false
	}
	return o.Ipv4Gateway, true
}

// HasIpv4Gateway returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasIpv4Gateway() bool {
	if o != nil && o.Ipv4Gateway != nil {
		return true
	}

	return false
}

// SetIpv4Gateway gets a reference to the given string and assigns it to the Ipv4Gateway field.
func (o *NetworkNetworkSpec) SetIpv4Gateway(v string) {
	o.Ipv4Gateway = &v
}

// GetIpv4Subnet returns the Ipv4Subnet field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetIpv4Subnet() string {
	if o == nil || o.Ipv4Subnet == nil {
		var ret string
		return ret
	}
	return *o.Ipv4Subnet
}

// GetIpv4SubnetOk returns a tuple with the Ipv4Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetIpv4SubnetOk() (*string, bool) {
	if o == nil || o.Ipv4Subnet == nil {
		return nil, false
	}
	return o.Ipv4Subnet, true
}

// HasIpv4Subnet returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasIpv4Subnet() bool {
	if o != nil && o.Ipv4Subnet != nil {
		return true
	}

	return false
}

// SetIpv4Subnet gets a reference to the given string and assigns it to the Ipv4Subnet field.
func (o *NetworkNetworkSpec) SetIpv4Subnet(v string) {
	o.Ipv4Subnet = &v
}

// GetIpv6Gateway returns the Ipv6Gateway field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetIpv6Gateway() string {
	if o == nil || o.Ipv6Gateway == nil {
		var ret string
		return ret
	}
	return *o.Ipv6Gateway
}

// GetIpv6GatewayOk returns a tuple with the Ipv6Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetIpv6GatewayOk() (*string, bool) {
	if o == nil || o.Ipv6Gateway == nil {
		return nil, false
	}
	return o.Ipv6Gateway, true
}

// HasIpv6Gateway returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasIpv6Gateway() bool {
	if o != nil && o.Ipv6Gateway != nil {
		return true
	}

	return false
}

// SetIpv6Gateway gets a reference to the given string and assigns it to the Ipv6Gateway field.
func (o *NetworkNetworkSpec) SetIpv6Gateway(v string) {
	o.Ipv6Gateway = &v
}

// GetIpv6Subnet returns the Ipv6Subnet field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetIpv6Subnet() string {
	if o == nil || o.Ipv6Subnet == nil {
		var ret string
		return ret
	}
	return *o.Ipv6Subnet
}

// GetIpv6SubnetOk returns a tuple with the Ipv6Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetIpv6SubnetOk() (*string, bool) {
	if o == nil || o.Ipv6Subnet == nil {
		return nil, false
	}
	return o.Ipv6Subnet, true
}

// HasIpv6Subnet returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasIpv6Subnet() bool {
	if o != nil && o.Ipv6Subnet != nil {
		return true
	}

	return false
}

// SetIpv6Subnet gets a reference to the given string and assigns it to the Ipv6Subnet field.
func (o *NetworkNetworkSpec) SetIpv6Subnet(v string) {
	o.Ipv6Subnet = &v
}

// GetOrchestrators returns the Orchestrators field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetOrchestrators() []NetworkOrchestratorInfo {
	if o == nil || o.Orchestrators == nil {
		var ret []NetworkOrchestratorInfo
		return ret
	}
	return *o.Orchestrators
}

// GetOrchestratorsOk returns a tuple with the Orchestrators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetOrchestratorsOk() (*[]NetworkOrchestratorInfo, bool) {
	if o == nil || o.Orchestrators == nil {
		return nil, false
	}
	return o.Orchestrators, true
}

// HasOrchestrators returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasOrchestrators() bool {
	if o != nil && o.Orchestrators != nil {
		return true
	}

	return false
}

// SetOrchestrators gets a reference to the given []NetworkOrchestratorInfo and assigns it to the Orchestrators field.
func (o *NetworkNetworkSpec) SetOrchestrators(v []NetworkOrchestratorInfo) {
	o.Orchestrators = &v
}

// GetRouteImportExport returns the RouteImportExport field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetRouteImportExport() NetworkRDSpec {
	if o == nil || o.RouteImportExport == nil {
		var ret NetworkRDSpec
		return ret
	}
	return *o.RouteImportExport
}

// GetRouteImportExportOk returns a tuple with the RouteImportExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetRouteImportExportOk() (*NetworkRDSpec, bool) {
	if o == nil || o.RouteImportExport == nil {
		return nil, false
	}
	return o.RouteImportExport, true
}

// HasRouteImportExport returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasRouteImportExport() bool {
	if o != nil && o.RouteImportExport != nil {
		return true
	}

	return false
}

// SetRouteImportExport gets a reference to the given NetworkRDSpec and assigns it to the RouteImportExport field.
func (o *NetworkNetworkSpec) SetRouteImportExport(v NetworkRDSpec) {
	o.RouteImportExport = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkNetworkSpec) SetType(v string) {
	o.Type = &v
}

// GetVirtualRouter returns the VirtualRouter field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetVirtualRouter() string {
	if o == nil || o.VirtualRouter == nil {
		var ret string
		return ret
	}
	return *o.VirtualRouter
}

// GetVirtualRouterOk returns a tuple with the VirtualRouter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetVirtualRouterOk() (*string, bool) {
	if o == nil || o.VirtualRouter == nil {
		return nil, false
	}
	return o.VirtualRouter, true
}

// HasVirtualRouter returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasVirtualRouter() bool {
	if o != nil && o.VirtualRouter != nil {
		return true
	}

	return false
}

// SetVirtualRouter gets a reference to the given string and assigns it to the VirtualRouter field.
func (o *NetworkNetworkSpec) SetVirtualRouter(v string) {
	o.VirtualRouter = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetVlanId() int64 {
	if o == nil || o.VlanId == nil {
		var ret int64
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetVlanIdOk() (*int64, bool) {
	if o == nil || o.VlanId == nil {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasVlanId() bool {
	if o != nil && o.VlanId != nil {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int64 and assigns it to the VlanId field.
func (o *NetworkNetworkSpec) SetVlanId(v int64) {
	o.VlanId = &v
}

// GetVxlanVni returns the VxlanVni field value if set, zero value otherwise.
func (o *NetworkNetworkSpec) GetVxlanVni() int64 {
	if o == nil || o.VxlanVni == nil {
		var ret int64
		return ret
	}
	return *o.VxlanVni
}

// GetVxlanVniOk returns a tuple with the VxlanVni field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkNetworkSpec) GetVxlanVniOk() (*int64, bool) {
	if o == nil || o.VxlanVni == nil {
		return nil, false
	}
	return o.VxlanVni, true
}

// HasVxlanVni returns a boolean if a field has been set.
func (o *NetworkNetworkSpec) HasVxlanVni() bool {
	if o != nil && o.VxlanVni != nil {
		return true
	}

	return false
}

// SetVxlanVni gets a reference to the given int64 and assigns it to the VxlanVni field.
func (o *NetworkNetworkSpec) SetVxlanVni(v int64) {
	o.VxlanVni = &v
}

func (o NetworkNetworkSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EgressSecurityPolicy != nil {
		toSerialize["egress-security-policy"] = o.EgressSecurityPolicy
	}
	if o.FirewallProfile != nil {
		toSerialize["firewall-profile"] = o.FirewallProfile
	}
	if o.IngressSecurityPolicy != nil {
		toSerialize["ingress-security-policy"] = o.IngressSecurityPolicy
	}
	if o.IpamPolicy != nil {
		toSerialize["ipam-policy"] = o.IpamPolicy
	}
	if o.Ipv4Gateway != nil {
		toSerialize["ipv4-gateway"] = o.Ipv4Gateway
	}
	if o.Ipv4Subnet != nil {
		toSerialize["ipv4-subnet"] = o.Ipv4Subnet
	}
	if o.Ipv6Gateway != nil {
		toSerialize["ipv6-gateway"] = o.Ipv6Gateway
	}
	if o.Ipv6Subnet != nil {
		toSerialize["ipv6-subnet"] = o.Ipv6Subnet
	}
	if o.Orchestrators != nil {
		toSerialize["orchestrators"] = o.Orchestrators
	}
	if o.RouteImportExport != nil {
		toSerialize["route-import-export"] = o.RouteImportExport
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.VirtualRouter != nil {
		toSerialize["virtual-router"] = o.VirtualRouter
	}
	if o.VlanId != nil {
		toSerialize["vlan-id"] = o.VlanId
	}
	if o.VxlanVni != nil {
		toSerialize["vxlan-vni"] = o.VxlanVni
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkNetworkSpec struct {
	value *NetworkNetworkSpec
	isSet bool
}

func (v NullableNetworkNetworkSpec) Get() *NetworkNetworkSpec {
	return v.value
}

func (v *NullableNetworkNetworkSpec) Set(val *NetworkNetworkSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkNetworkSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkNetworkSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkNetworkSpec(val *NetworkNetworkSpec) *NullableNetworkNetworkSpec {
	return &NullableNetworkNetworkSpec{value: val, isSet: true}
}

func (v NullableNetworkNetworkSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkNetworkSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


