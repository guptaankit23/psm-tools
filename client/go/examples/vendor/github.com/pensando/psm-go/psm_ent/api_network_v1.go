/*
 * Network API reference
 *
 *  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_ent

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// NetworkV1ApiService NetworkV1Api service
type NetworkV1ApiService service

type ApiNetworkAddIPAMPolicyRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	body *NetworkIPAMPolicy
}

func (r ApiNetworkAddIPAMPolicyRequest) Body(body NetworkIPAMPolicy) ApiNetworkAddIPAMPolicyRequest {
	r.body = &body
	return r
}

func (r ApiNetworkAddIPAMPolicyRequest) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddIPAMPolicyExecute(r)
}

/*
 * AddIPAMPolicy Create IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkAddIPAMPolicyRequest
 */
func (a *NetworkV1ApiService) AddIPAMPolicy(ctx _context.Context, oTenant string) ApiNetworkAddIPAMPolicyRequest {
	return ApiNetworkAddIPAMPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) AddIPAMPolicyExecute(r ApiNetworkAddIPAMPolicyRequest) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddIPAMPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/ipam-policies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddIPAMPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddIPAMPolicy1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	body *NetworkIPAMPolicy
}

func (r ApiNetworkAddIPAMPolicy1Request) Body(body NetworkIPAMPolicy) ApiNetworkAddIPAMPolicy1Request {
	r.body = &body
	return r
}

func (r ApiNetworkAddIPAMPolicy1Request) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddIPAMPolicy1Execute(r)
}

/*
 * AddIPAMPolicy1 Create IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkAddIPAMPolicy1Request
 */
func (a *NetworkV1ApiService) AddIPAMPolicy1(ctx _context.Context) ApiNetworkAddIPAMPolicy1Request {
	return ApiNetworkAddIPAMPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) AddIPAMPolicy1Execute(r ApiNetworkAddIPAMPolicy1Request) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddIPAMPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/ipam-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddIPAMPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddNetworkRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	body *NetworkNetwork
}

func (r ApiNetworkAddNetworkRequest) Body(body NetworkNetwork) ApiNetworkAddNetworkRequest {
	r.body = &body
	return r
}

func (r ApiNetworkAddNetworkRequest) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.AddNetworkExecute(r)
}

/*
 * AddNetwork Create Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkAddNetworkRequest
 */
func (a *NetworkV1ApiService) AddNetwork(ctx _context.Context, oTenant string) ApiNetworkAddNetworkRequest {
	return ApiNetworkAddNetworkRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) AddNetworkExecute(r ApiNetworkAddNetworkRequest) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddNetwork")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/networks"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddNetworkExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddNetwork1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	body *NetworkNetwork
}

func (r ApiNetworkAddNetwork1Request) Body(body NetworkNetwork) ApiNetworkAddNetwork1Request {
	r.body = &body
	return r
}

func (r ApiNetworkAddNetwork1Request) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.AddNetwork1Execute(r)
}

/*
 * AddNetwork1 Create Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkAddNetwork1Request
 */
func (a *NetworkV1ApiService) AddNetwork1(ctx _context.Context) ApiNetworkAddNetwork1Request {
	return ApiNetworkAddNetwork1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) AddNetwork1Execute(r ApiNetworkAddNetwork1Request) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddNetwork1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddNetwork1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddPolicerProfileRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	body *NetworkPolicerProfile
}

func (r ApiNetworkAddPolicerProfileRequest) Body(body NetworkPolicerProfile) ApiNetworkAddPolicerProfileRequest {
	r.body = &body
	return r
}

func (r ApiNetworkAddPolicerProfileRequest) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.AddPolicerProfileExecute(r)
}

/*
 * AddPolicerProfile Create PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkAddPolicerProfileRequest
 */
func (a *NetworkV1ApiService) AddPolicerProfile(ctx _context.Context, oTenant string) ApiNetworkAddPolicerProfileRequest {
	return ApiNetworkAddPolicerProfileRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) AddPolicerProfileExecute(r ApiNetworkAddPolicerProfileRequest) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddPolicerProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/policer-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddPolicerProfileExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddPolicerProfile1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	body *NetworkPolicerProfile
}

func (r ApiNetworkAddPolicerProfile1Request) Body(body NetworkPolicerProfile) ApiNetworkAddPolicerProfile1Request {
	r.body = &body
	return r
}

func (r ApiNetworkAddPolicerProfile1Request) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.AddPolicerProfile1Execute(r)
}

/*
 * AddPolicerProfile1 Create PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkAddPolicerProfile1Request
 */
func (a *NetworkV1ApiService) AddPolicerProfile1(ctx _context.Context) ApiNetworkAddPolicerProfile1Request {
	return ApiNetworkAddPolicerProfile1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) AddPolicerProfile1Execute(r ApiNetworkAddPolicerProfile1Request) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddPolicerProfile1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/policer-profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddPolicerProfile1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddRoutingConfigRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	body *NetworkRoutingConfig
}

func (r ApiNetworkAddRoutingConfigRequest) Body(body NetworkRoutingConfig) ApiNetworkAddRoutingConfigRequest {
	r.body = &body
	return r
}

func (r ApiNetworkAddRoutingConfigRequest) Execute() (NetworkRoutingConfig, *_nethttp.Response, error) {
	return r.ApiService.AddRoutingConfigExecute(r)
}

/*
 * AddRoutingConfig Create RoutingConfig object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkAddRoutingConfigRequest
 */
func (a *NetworkV1ApiService) AddRoutingConfig(ctx _context.Context) ApiNetworkAddRoutingConfigRequest {
	return ApiNetworkAddRoutingConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkRoutingConfig
 */
func (a *NetworkV1ApiService) AddRoutingConfigExecute(r ApiNetworkAddRoutingConfigRequest) (NetworkRoutingConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRoutingConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddRoutingConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/routing-config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddRoutingConfigExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddStaticBindingsRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *NetworkAddStaticBindingsRequest
}

func (r ApiNetworkAddStaticBindingsRequest) Body(body NetworkAddStaticBindingsRequest) ApiNetworkAddStaticBindingsRequest {
	r.body = &body
	return r
}

func (r ApiNetworkAddStaticBindingsRequest) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddStaticBindingsExecute(r)
}

/*
 * AddStaticBindings Add static bindings
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkAddStaticBindingsRequest
 */
func (a *NetworkV1ApiService) AddStaticBindings(ctx _context.Context, oTenant string, oName string) ApiNetworkAddStaticBindingsRequest {
	return ApiNetworkAddStaticBindingsRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) AddStaticBindingsExecute(r ApiNetworkAddStaticBindingsRequest) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddStaticBindings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/ipam-policies/{O.Name}/AddStaticBindings"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddStaticBindingsExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddStaticBindings1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *NetworkAddStaticBindingsRequest
}

func (r ApiNetworkAddStaticBindings1Request) Body(body NetworkAddStaticBindingsRequest) ApiNetworkAddStaticBindings1Request {
	r.body = &body
	return r
}

func (r ApiNetworkAddStaticBindings1Request) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.AddStaticBindings1Execute(r)
}

/*
 * AddStaticBindings1 Add static bindings
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkAddStaticBindings1Request
 */
func (a *NetworkV1ApiService) AddStaticBindings1(ctx _context.Context, oName string) ApiNetworkAddStaticBindings1Request {
	return ApiNetworkAddStaticBindings1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) AddStaticBindings1Execute(r ApiNetworkAddStaticBindings1Request) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddStaticBindings1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/ipam-policies/{O.Name}/AddStaticBindings"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddStaticBindings1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddVirtualRouterRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	body *NetworkVirtualRouter
}

func (r ApiNetworkAddVirtualRouterRequest) Body(body NetworkVirtualRouter) ApiNetworkAddVirtualRouterRequest {
	r.body = &body
	return r
}

func (r ApiNetworkAddVirtualRouterRequest) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.AddVirtualRouterExecute(r)
}

/*
 * AddVirtualRouter Create VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkAddVirtualRouterRequest
 */
func (a *NetworkV1ApiService) AddVirtualRouter(ctx _context.Context, oTenant string) ApiNetworkAddVirtualRouterRequest {
	return ApiNetworkAddVirtualRouterRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) AddVirtualRouterExecute(r ApiNetworkAddVirtualRouterRequest) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddVirtualRouter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtualrouters"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddVirtualRouterExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddVirtualRouter1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	body *NetworkVirtualRouter
}

func (r ApiNetworkAddVirtualRouter1Request) Body(body NetworkVirtualRouter) ApiNetworkAddVirtualRouter1Request {
	r.body = &body
	return r
}

func (r ApiNetworkAddVirtualRouter1Request) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.AddVirtualRouter1Execute(r)
}

/*
 * AddVirtualRouter1 Create VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkAddVirtualRouter1Request
 */
func (a *NetworkV1ApiService) AddVirtualRouter1(ctx _context.Context) ApiNetworkAddVirtualRouter1Request {
	return ApiNetworkAddVirtualRouter1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) AddVirtualRouter1Execute(r ApiNetworkAddVirtualRouter1Request) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddVirtualRouter1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtualrouters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddVirtualRouter1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddVirtualRouterPeeringGroupRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	body *NetworkVirtualRouterPeeringGroup
}

func (r ApiNetworkAddVirtualRouterPeeringGroupRequest) Body(body NetworkVirtualRouterPeeringGroup) ApiNetworkAddVirtualRouterPeeringGroupRequest {
	r.body = &body
	return r
}

func (r ApiNetworkAddVirtualRouterPeeringGroupRequest) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.AddVirtualRouterPeeringGroupExecute(r)
}

/*
 * AddVirtualRouterPeeringGroup Create VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkAddVirtualRouterPeeringGroupRequest
 */
func (a *NetworkV1ApiService) AddVirtualRouterPeeringGroup(ctx _context.Context, oTenant string) ApiNetworkAddVirtualRouterPeeringGroupRequest {
	return ApiNetworkAddVirtualRouterPeeringGroupRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) AddVirtualRouterPeeringGroupExecute(r ApiNetworkAddVirtualRouterPeeringGroupRequest) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddVirtualRouterPeeringGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtual-router-peering-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddVirtualRouterPeeringGroupExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkAddVirtualRouterPeeringGroup1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	body *NetworkVirtualRouterPeeringGroup
}

func (r ApiNetworkAddVirtualRouterPeeringGroup1Request) Body(body NetworkVirtualRouterPeeringGroup) ApiNetworkAddVirtualRouterPeeringGroup1Request {
	r.body = &body
	return r
}

func (r ApiNetworkAddVirtualRouterPeeringGroup1Request) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.AddVirtualRouterPeeringGroup1Execute(r)
}

/*
 * AddVirtualRouterPeeringGroup1 Create VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkAddVirtualRouterPeeringGroup1Request
 */
func (a *NetworkV1ApiService) AddVirtualRouterPeeringGroup1(ctx _context.Context) ApiNetworkAddVirtualRouterPeeringGroup1Request {
	return ApiNetworkAddVirtualRouterPeeringGroup1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) AddVirtualRouterPeeringGroup1Execute(r ApiNetworkAddVirtualRouterPeeringGroup1Request) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.AddVirtualRouterPeeringGroup1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtual-router-peering-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.AddVirtualRouterPeeringGroup1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteIPAMPolicyRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
}


func (r ApiNetworkDeleteIPAMPolicyRequest) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteIPAMPolicyExecute(r)
}

/*
 * DeleteIPAMPolicy Delete IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkDeleteIPAMPolicyRequest
 */
func (a *NetworkV1ApiService) DeleteIPAMPolicy(ctx _context.Context, oTenant string, oName string) ApiNetworkDeleteIPAMPolicyRequest {
	return ApiNetworkDeleteIPAMPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) DeleteIPAMPolicyExecute(r ApiNetworkDeleteIPAMPolicyRequest) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteIPAMPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/ipam-policies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteIPAMPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteIPAMPolicy1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
}


func (r ApiNetworkDeleteIPAMPolicy1Request) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeleteIPAMPolicy1Execute(r)
}

/*
 * DeleteIPAMPolicy1 Delete IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkDeleteIPAMPolicy1Request
 */
func (a *NetworkV1ApiService) DeleteIPAMPolicy1(ctx _context.Context, oName string) ApiNetworkDeleteIPAMPolicy1Request {
	return ApiNetworkDeleteIPAMPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) DeleteIPAMPolicy1Execute(r ApiNetworkDeleteIPAMPolicy1Request) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteIPAMPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/ipam-policies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteIPAMPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteNetworkRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
}


func (r ApiNetworkDeleteNetworkRequest) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.DeleteNetworkExecute(r)
}

/*
 * DeleteNetwork Delete Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkDeleteNetworkRequest
 */
func (a *NetworkV1ApiService) DeleteNetwork(ctx _context.Context, oTenant string, oName string) ApiNetworkDeleteNetworkRequest {
	return ApiNetworkDeleteNetworkRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) DeleteNetworkExecute(r ApiNetworkDeleteNetworkRequest) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteNetwork")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/networks/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteNetworkExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteNetwork1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
}


func (r ApiNetworkDeleteNetwork1Request) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.DeleteNetwork1Execute(r)
}

/*
 * DeleteNetwork1 Delete Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkDeleteNetwork1Request
 */
func (a *NetworkV1ApiService) DeleteNetwork1(ctx _context.Context, oName string) ApiNetworkDeleteNetwork1Request {
	return ApiNetworkDeleteNetwork1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) DeleteNetwork1Execute(r ApiNetworkDeleteNetwork1Request) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteNetwork1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networks/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteNetwork1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeletePolicerProfileRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
}


func (r ApiNetworkDeletePolicerProfileRequest) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.DeletePolicerProfileExecute(r)
}

/*
 * DeletePolicerProfile Delete PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkDeletePolicerProfileRequest
 */
func (a *NetworkV1ApiService) DeletePolicerProfile(ctx _context.Context, oTenant string, oName string) ApiNetworkDeletePolicerProfileRequest {
	return ApiNetworkDeletePolicerProfileRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) DeletePolicerProfileExecute(r ApiNetworkDeletePolicerProfileRequest) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeletePolicerProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/policer-profile/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeletePolicerProfileExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeletePolicerProfile1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
}


func (r ApiNetworkDeletePolicerProfile1Request) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.DeletePolicerProfile1Execute(r)
}

/*
 * DeletePolicerProfile1 Delete PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkDeletePolicerProfile1Request
 */
func (a *NetworkV1ApiService) DeletePolicerProfile1(ctx _context.Context, oName string) ApiNetworkDeletePolicerProfile1Request {
	return ApiNetworkDeletePolicerProfile1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) DeletePolicerProfile1Execute(r ApiNetworkDeletePolicerProfile1Request) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeletePolicerProfile1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/policer-profile/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeletePolicerProfile1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteRoutingConfigRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
}


func (r ApiNetworkDeleteRoutingConfigRequest) Execute() (NetworkRoutingConfig, *_nethttp.Response, error) {
	return r.ApiService.DeleteRoutingConfigExecute(r)
}

/*
 * DeleteRoutingConfig Delete RoutingConfig object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkDeleteRoutingConfigRequest
 */
func (a *NetworkV1ApiService) DeleteRoutingConfig(ctx _context.Context, oName string) ApiNetworkDeleteRoutingConfigRequest {
	return ApiNetworkDeleteRoutingConfigRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkRoutingConfig
 */
func (a *NetworkV1ApiService) DeleteRoutingConfigExecute(r ApiNetworkDeleteRoutingConfigRequest) (NetworkRoutingConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRoutingConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteRoutingConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/routing-config/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteRoutingConfigExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteVirtualRouterRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
}


func (r ApiNetworkDeleteVirtualRouterRequest) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.DeleteVirtualRouterExecute(r)
}

/*
 * DeleteVirtualRouter Delete VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkDeleteVirtualRouterRequest
 */
func (a *NetworkV1ApiService) DeleteVirtualRouter(ctx _context.Context, oTenant string, oName string) ApiNetworkDeleteVirtualRouterRequest {
	return ApiNetworkDeleteVirtualRouterRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) DeleteVirtualRouterExecute(r ApiNetworkDeleteVirtualRouterRequest) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteVirtualRouter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtualrouters/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteVirtualRouterExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteVirtualRouter1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
}


func (r ApiNetworkDeleteVirtualRouter1Request) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.DeleteVirtualRouter1Execute(r)
}

/*
 * DeleteVirtualRouter1 Delete VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkDeleteVirtualRouter1Request
 */
func (a *NetworkV1ApiService) DeleteVirtualRouter1(ctx _context.Context, oName string) ApiNetworkDeleteVirtualRouter1Request {
	return ApiNetworkDeleteVirtualRouter1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) DeleteVirtualRouter1Execute(r ApiNetworkDeleteVirtualRouter1Request) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteVirtualRouter1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtualrouters/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteVirtualRouter1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteVirtualRouterPeeringGroupRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
}


func (r ApiNetworkDeleteVirtualRouterPeeringGroupRequest) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.DeleteVirtualRouterPeeringGroupExecute(r)
}

/*
 * DeleteVirtualRouterPeeringGroup Delete VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkDeleteVirtualRouterPeeringGroupRequest
 */
func (a *NetworkV1ApiService) DeleteVirtualRouterPeeringGroup(ctx _context.Context, oTenant string, oName string) ApiNetworkDeleteVirtualRouterPeeringGroupRequest {
	return ApiNetworkDeleteVirtualRouterPeeringGroupRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) DeleteVirtualRouterPeeringGroupExecute(r ApiNetworkDeleteVirtualRouterPeeringGroupRequest) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteVirtualRouterPeeringGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtual-router-peering-groups/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteVirtualRouterPeeringGroupExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkDeleteVirtualRouterPeeringGroup1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
}


func (r ApiNetworkDeleteVirtualRouterPeeringGroup1Request) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.DeleteVirtualRouterPeeringGroup1Execute(r)
}

/*
 * DeleteVirtualRouterPeeringGroup1 Delete VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkDeleteVirtualRouterPeeringGroup1Request
 */
func (a *NetworkV1ApiService) DeleteVirtualRouterPeeringGroup1(ctx _context.Context, oName string) ApiNetworkDeleteVirtualRouterPeeringGroup1Request {
	return ApiNetworkDeleteVirtualRouterPeeringGroup1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) DeleteVirtualRouterPeeringGroup1Execute(r ApiNetworkDeleteVirtualRouterPeeringGroup1Request) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.DeleteVirtualRouterPeeringGroup1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtual-router-peering-groups/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.DeleteVirtualRouterPeeringGroup1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetIPAMPolicyRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	ipamOptionsLease *int64
	ipamOptionsRouters *[]string
	bootstrapIpamOptionsControllers *[]string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetIPAMPolicyRequest) TKind(tKind string) ApiNetworkGetIPAMPolicyRequest {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) TApiVersion(tApiVersion string) ApiNetworkGetIPAMPolicyRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) MetaNamespace(metaNamespace string) ApiNetworkGetIPAMPolicyRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) MetaGenerationId(metaGenerationId string) ApiNetworkGetIPAMPolicyRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetIPAMPolicyRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) MetaUuid(metaUuid string) ApiNetworkGetIPAMPolicyRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetIPAMPolicyRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) MetaModTime(metaModTime time.Time) ApiNetworkGetIPAMPolicyRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) MetaSelfLink(metaSelfLink string) ApiNetworkGetIPAMPolicyRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) SpecType(specType string) ApiNetworkGetIPAMPolicyRequest {
	r.specType = &specType
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) IpamOptionsLease(ipamOptionsLease int64) ApiNetworkGetIPAMPolicyRequest {
	r.ipamOptionsLease = &ipamOptionsLease
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) IpamOptionsRouters(ipamOptionsRouters []string) ApiNetworkGetIPAMPolicyRequest {
	r.ipamOptionsRouters = &ipamOptionsRouters
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) BootstrapIpamOptionsControllers(bootstrapIpamOptionsControllers []string) ApiNetworkGetIPAMPolicyRequest {
	r.bootstrapIpamOptionsControllers = &bootstrapIpamOptionsControllers
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetIPAMPolicyRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetIPAMPolicyRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetIPAMPolicyRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetIPAMPolicyRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetIPAMPolicyRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetIPAMPolicyRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetIPAMPolicyRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetIPAMPolicyRequest) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetIPAMPolicyExecute(r)
}

/*
 * GetIPAMPolicy Get IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkGetIPAMPolicyRequest
 */
func (a *NetworkV1ApiService) GetIPAMPolicy(ctx _context.Context, oTenant string, oName string) ApiNetworkGetIPAMPolicyRequest {
	return ApiNetworkGetIPAMPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) GetIPAMPolicyExecute(r ApiNetworkGetIPAMPolicyRequest) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetIPAMPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/ipam-policies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.ipamOptionsLease != nil {
		localVarQueryParams.Add("ipam-options.lease", parameterToString(*r.ipamOptionsLease, ""))
	}
	if r.ipamOptionsRouters != nil {
		localVarQueryParams.Add("ipam-options.routers", parameterToString(*r.ipamOptionsRouters, "csv"))
	}
	if r.bootstrapIpamOptionsControllers != nil {
		localVarQueryParams.Add("bootstrap-ipam-options.controllers", parameterToString(*r.bootstrapIpamOptionsControllers, "csv"))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetIPAMPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetIPAMPolicy1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	ipamOptionsLease *int64
	ipamOptionsRouters *[]string
	bootstrapIpamOptionsControllers *[]string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetIPAMPolicy1Request) TKind(tKind string) ApiNetworkGetIPAMPolicy1Request {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) TApiVersion(tApiVersion string) ApiNetworkGetIPAMPolicy1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) MetaTenant(metaTenant string) ApiNetworkGetIPAMPolicy1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) MetaNamespace(metaNamespace string) ApiNetworkGetIPAMPolicy1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) MetaGenerationId(metaGenerationId string) ApiNetworkGetIPAMPolicy1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetIPAMPolicy1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) MetaUuid(metaUuid string) ApiNetworkGetIPAMPolicy1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetIPAMPolicy1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) MetaModTime(metaModTime time.Time) ApiNetworkGetIPAMPolicy1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) MetaSelfLink(metaSelfLink string) ApiNetworkGetIPAMPolicy1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) SpecType(specType string) ApiNetworkGetIPAMPolicy1Request {
	r.specType = &specType
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) IpamOptionsLease(ipamOptionsLease int64) ApiNetworkGetIPAMPolicy1Request {
	r.ipamOptionsLease = &ipamOptionsLease
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) IpamOptionsRouters(ipamOptionsRouters []string) ApiNetworkGetIPAMPolicy1Request {
	r.ipamOptionsRouters = &ipamOptionsRouters
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) BootstrapIpamOptionsControllers(bootstrapIpamOptionsControllers []string) ApiNetworkGetIPAMPolicy1Request {
	r.bootstrapIpamOptionsControllers = &bootstrapIpamOptionsControllers
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetIPAMPolicy1Request {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetIPAMPolicy1Request {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetIPAMPolicy1Request {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetIPAMPolicy1Request {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetIPAMPolicy1Request {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetIPAMPolicy1Request) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetIPAMPolicy1Request {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetIPAMPolicy1Request) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.GetIPAMPolicy1Execute(r)
}

/*
 * GetIPAMPolicy1 Get IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkGetIPAMPolicy1Request
 */
func (a *NetworkV1ApiService) GetIPAMPolicy1(ctx _context.Context, oName string) ApiNetworkGetIPAMPolicy1Request {
	return ApiNetworkGetIPAMPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) GetIPAMPolicy1Execute(r ApiNetworkGetIPAMPolicy1Request) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetIPAMPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/ipam-policies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.ipamOptionsLease != nil {
		localVarQueryParams.Add("ipam-options.lease", parameterToString(*r.ipamOptionsLease, ""))
	}
	if r.ipamOptionsRouters != nil {
		localVarQueryParams.Add("ipam-options.routers", parameterToString(*r.ipamOptionsRouters, "csv"))
	}
	if r.bootstrapIpamOptionsControllers != nil {
		localVarQueryParams.Add("bootstrap-ipam-options.controllers", parameterToString(*r.bootstrapIpamOptionsControllers, "csv"))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetIPAMPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetNetworkRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	specIpv4Subnet *string
	specIpv4Gateway *string
	specIpv6Subnet *string
	specIpv6Gateway *string
	specVlanId *int64
	specVxlanVni *int64
	specVirtualRouter *string
	specIpamPolicy *string
	routeImportExportAddressFamily *string
	routeImportExportRdAuto *bool
	rdType *string
	adminValueFormat *string
	adminValueValue *int64
	rdAssignedValue *int64
	specIngressSecurityPolicy *[]string
	specEgressSecurityPolicy *[]string
	firewallProfileEnableFwLogging *bool
	statusWorkloads *[]string
	statusAllocatedIpv4Addrs *string
	statusId *string
	statusOperState *string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetNetworkRequest) TKind(tKind string) ApiNetworkGetNetworkRequest {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetNetworkRequest) TApiVersion(tApiVersion string) ApiNetworkGetNetworkRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetNetworkRequest) MetaNamespace(metaNamespace string) ApiNetworkGetNetworkRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetNetworkRequest) MetaGenerationId(metaGenerationId string) ApiNetworkGetNetworkRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetNetworkRequest) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetNetworkRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetNetworkRequest) MetaUuid(metaUuid string) ApiNetworkGetNetworkRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetNetworkRequest) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetNetworkRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetNetworkRequest) MetaModTime(metaModTime time.Time) ApiNetworkGetNetworkRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetNetworkRequest) MetaSelfLink(metaSelfLink string) ApiNetworkGetNetworkRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecType(specType string) ApiNetworkGetNetworkRequest {
	r.specType = &specType
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecIpv4Subnet(specIpv4Subnet string) ApiNetworkGetNetworkRequest {
	r.specIpv4Subnet = &specIpv4Subnet
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecIpv4Gateway(specIpv4Gateway string) ApiNetworkGetNetworkRequest {
	r.specIpv4Gateway = &specIpv4Gateway
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecIpv6Subnet(specIpv6Subnet string) ApiNetworkGetNetworkRequest {
	r.specIpv6Subnet = &specIpv6Subnet
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecIpv6Gateway(specIpv6Gateway string) ApiNetworkGetNetworkRequest {
	r.specIpv6Gateway = &specIpv6Gateway
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecVlanId(specVlanId int64) ApiNetworkGetNetworkRequest {
	r.specVlanId = &specVlanId
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecVxlanVni(specVxlanVni int64) ApiNetworkGetNetworkRequest {
	r.specVxlanVni = &specVxlanVni
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecVirtualRouter(specVirtualRouter string) ApiNetworkGetNetworkRequest {
	r.specVirtualRouter = &specVirtualRouter
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecIpamPolicy(specIpamPolicy string) ApiNetworkGetNetworkRequest {
	r.specIpamPolicy = &specIpamPolicy
	return r
}
func (r ApiNetworkGetNetworkRequest) RouteImportExportAddressFamily(routeImportExportAddressFamily string) ApiNetworkGetNetworkRequest {
	r.routeImportExportAddressFamily = &routeImportExportAddressFamily
	return r
}
func (r ApiNetworkGetNetworkRequest) RouteImportExportRdAuto(routeImportExportRdAuto bool) ApiNetworkGetNetworkRequest {
	r.routeImportExportRdAuto = &routeImportExportRdAuto
	return r
}
func (r ApiNetworkGetNetworkRequest) RdType(rdType string) ApiNetworkGetNetworkRequest {
	r.rdType = &rdType
	return r
}
func (r ApiNetworkGetNetworkRequest) AdminValueFormat(adminValueFormat string) ApiNetworkGetNetworkRequest {
	r.adminValueFormat = &adminValueFormat
	return r
}
func (r ApiNetworkGetNetworkRequest) AdminValueValue(adminValueValue int64) ApiNetworkGetNetworkRequest {
	r.adminValueValue = &adminValueValue
	return r
}
func (r ApiNetworkGetNetworkRequest) RdAssignedValue(rdAssignedValue int64) ApiNetworkGetNetworkRequest {
	r.rdAssignedValue = &rdAssignedValue
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecIngressSecurityPolicy(specIngressSecurityPolicy []string) ApiNetworkGetNetworkRequest {
	r.specIngressSecurityPolicy = &specIngressSecurityPolicy
	return r
}
func (r ApiNetworkGetNetworkRequest) SpecEgressSecurityPolicy(specEgressSecurityPolicy []string) ApiNetworkGetNetworkRequest {
	r.specEgressSecurityPolicy = &specEgressSecurityPolicy
	return r
}
func (r ApiNetworkGetNetworkRequest) FirewallProfileEnableFwLogging(firewallProfileEnableFwLogging bool) ApiNetworkGetNetworkRequest {
	r.firewallProfileEnableFwLogging = &firewallProfileEnableFwLogging
	return r
}
func (r ApiNetworkGetNetworkRequest) StatusWorkloads(statusWorkloads []string) ApiNetworkGetNetworkRequest {
	r.statusWorkloads = &statusWorkloads
	return r
}
func (r ApiNetworkGetNetworkRequest) StatusAllocatedIpv4Addrs(statusAllocatedIpv4Addrs string) ApiNetworkGetNetworkRequest {
	r.statusAllocatedIpv4Addrs = &statusAllocatedIpv4Addrs
	return r
}
func (r ApiNetworkGetNetworkRequest) StatusId(statusId string) ApiNetworkGetNetworkRequest {
	r.statusId = &statusId
	return r
}
func (r ApiNetworkGetNetworkRequest) StatusOperState(statusOperState string) ApiNetworkGetNetworkRequest {
	r.statusOperState = &statusOperState
	return r
}
func (r ApiNetworkGetNetworkRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetNetworkRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetNetworkRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetNetworkRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetNetworkRequest) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetNetworkRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetNetworkRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetNetworkRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetNetworkRequest) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetNetworkRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetNetworkRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetNetworkRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetNetworkRequest) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.GetNetworkExecute(r)
}

/*
 * GetNetwork Get Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkGetNetworkRequest
 */
func (a *NetworkV1ApiService) GetNetwork(ctx _context.Context, oTenant string, oName string) ApiNetworkGetNetworkRequest {
	return ApiNetworkGetNetworkRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) GetNetworkExecute(r ApiNetworkGetNetworkRequest) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetNetwork")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/networks/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.specIpv4Subnet != nil {
		localVarQueryParams.Add("spec.ipv4-subnet", parameterToString(*r.specIpv4Subnet, ""))
	}
	if r.specIpv4Gateway != nil {
		localVarQueryParams.Add("spec.ipv4-gateway", parameterToString(*r.specIpv4Gateway, ""))
	}
	if r.specIpv6Subnet != nil {
		localVarQueryParams.Add("spec.ipv6-subnet", parameterToString(*r.specIpv6Subnet, ""))
	}
	if r.specIpv6Gateway != nil {
		localVarQueryParams.Add("spec.ipv6-gateway", parameterToString(*r.specIpv6Gateway, ""))
	}
	if r.specVlanId != nil {
		localVarQueryParams.Add("spec.vlan-id", parameterToString(*r.specVlanId, ""))
	}
	if r.specVxlanVni != nil {
		localVarQueryParams.Add("spec.vxlan-vni", parameterToString(*r.specVxlanVni, ""))
	}
	if r.specVirtualRouter != nil {
		localVarQueryParams.Add("spec.virtual-router", parameterToString(*r.specVirtualRouter, ""))
	}
	if r.specIpamPolicy != nil {
		localVarQueryParams.Add("spec.ipam-policy", parameterToString(*r.specIpamPolicy, ""))
	}
	if r.routeImportExportAddressFamily != nil {
		localVarQueryParams.Add("route-import-export.address-family", parameterToString(*r.routeImportExportAddressFamily, ""))
	}
	if r.routeImportExportRdAuto != nil {
		localVarQueryParams.Add("route-import-export.rd-auto", parameterToString(*r.routeImportExportRdAuto, ""))
	}
	if r.rdType != nil {
		localVarQueryParams.Add("rd.type", parameterToString(*r.rdType, ""))
	}
	if r.adminValueFormat != nil {
		localVarQueryParams.Add("admin-value.Format", parameterToString(*r.adminValueFormat, ""))
	}
	if r.adminValueValue != nil {
		localVarQueryParams.Add("admin-value.Value", parameterToString(*r.adminValueValue, ""))
	}
	if r.rdAssignedValue != nil {
		localVarQueryParams.Add("rd.assigned-value", parameterToString(*r.rdAssignedValue, ""))
	}
	if r.specIngressSecurityPolicy != nil {
		localVarQueryParams.Add("spec.ingress-security-policy", parameterToString(*r.specIngressSecurityPolicy, "csv"))
	}
	if r.specEgressSecurityPolicy != nil {
		localVarQueryParams.Add("spec.egress-security-policy", parameterToString(*r.specEgressSecurityPolicy, "csv"))
	}
	if r.firewallProfileEnableFwLogging != nil {
		localVarQueryParams.Add("firewall-profile.enable-fw-logging", parameterToString(*r.firewallProfileEnableFwLogging, ""))
	}
	if r.statusWorkloads != nil {
		localVarQueryParams.Add("status.workloads", parameterToString(*r.statusWorkloads, "csv"))
	}
	if r.statusAllocatedIpv4Addrs != nil {
		localVarQueryParams.Add("status.allocated-ipv4-addrs", parameterToString(*r.statusAllocatedIpv4Addrs, ""))
	}
	if r.statusId != nil {
		localVarQueryParams.Add("status.id", parameterToString(*r.statusId, ""))
	}
	if r.statusOperState != nil {
		localVarQueryParams.Add("status.oper-state", parameterToString(*r.statusOperState, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetNetworkExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetNetwork1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	specIpv4Subnet *string
	specIpv4Gateway *string
	specIpv6Subnet *string
	specIpv6Gateway *string
	specVlanId *int64
	specVxlanVni *int64
	specVirtualRouter *string
	specIpamPolicy *string
	routeImportExportAddressFamily *string
	routeImportExportRdAuto *bool
	rdType *string
	adminValueFormat *string
	adminValueValue *int64
	rdAssignedValue *int64
	specIngressSecurityPolicy *[]string
	specEgressSecurityPolicy *[]string
	firewallProfileEnableFwLogging *bool
	statusWorkloads *[]string
	statusAllocatedIpv4Addrs *string
	statusId *string
	statusOperState *string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetNetwork1Request) TKind(tKind string) ApiNetworkGetNetwork1Request {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetNetwork1Request) TApiVersion(tApiVersion string) ApiNetworkGetNetwork1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetNetwork1Request) MetaTenant(metaTenant string) ApiNetworkGetNetwork1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiNetworkGetNetwork1Request) MetaNamespace(metaNamespace string) ApiNetworkGetNetwork1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetNetwork1Request) MetaGenerationId(metaGenerationId string) ApiNetworkGetNetwork1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetNetwork1Request) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetNetwork1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetNetwork1Request) MetaUuid(metaUuid string) ApiNetworkGetNetwork1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetNetwork1Request) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetNetwork1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetNetwork1Request) MetaModTime(metaModTime time.Time) ApiNetworkGetNetwork1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetNetwork1Request) MetaSelfLink(metaSelfLink string) ApiNetworkGetNetwork1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecType(specType string) ApiNetworkGetNetwork1Request {
	r.specType = &specType
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecIpv4Subnet(specIpv4Subnet string) ApiNetworkGetNetwork1Request {
	r.specIpv4Subnet = &specIpv4Subnet
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecIpv4Gateway(specIpv4Gateway string) ApiNetworkGetNetwork1Request {
	r.specIpv4Gateway = &specIpv4Gateway
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecIpv6Subnet(specIpv6Subnet string) ApiNetworkGetNetwork1Request {
	r.specIpv6Subnet = &specIpv6Subnet
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecIpv6Gateway(specIpv6Gateway string) ApiNetworkGetNetwork1Request {
	r.specIpv6Gateway = &specIpv6Gateway
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecVlanId(specVlanId int64) ApiNetworkGetNetwork1Request {
	r.specVlanId = &specVlanId
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecVxlanVni(specVxlanVni int64) ApiNetworkGetNetwork1Request {
	r.specVxlanVni = &specVxlanVni
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecVirtualRouter(specVirtualRouter string) ApiNetworkGetNetwork1Request {
	r.specVirtualRouter = &specVirtualRouter
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecIpamPolicy(specIpamPolicy string) ApiNetworkGetNetwork1Request {
	r.specIpamPolicy = &specIpamPolicy
	return r
}
func (r ApiNetworkGetNetwork1Request) RouteImportExportAddressFamily(routeImportExportAddressFamily string) ApiNetworkGetNetwork1Request {
	r.routeImportExportAddressFamily = &routeImportExportAddressFamily
	return r
}
func (r ApiNetworkGetNetwork1Request) RouteImportExportRdAuto(routeImportExportRdAuto bool) ApiNetworkGetNetwork1Request {
	r.routeImportExportRdAuto = &routeImportExportRdAuto
	return r
}
func (r ApiNetworkGetNetwork1Request) RdType(rdType string) ApiNetworkGetNetwork1Request {
	r.rdType = &rdType
	return r
}
func (r ApiNetworkGetNetwork1Request) AdminValueFormat(adminValueFormat string) ApiNetworkGetNetwork1Request {
	r.adminValueFormat = &adminValueFormat
	return r
}
func (r ApiNetworkGetNetwork1Request) AdminValueValue(adminValueValue int64) ApiNetworkGetNetwork1Request {
	r.adminValueValue = &adminValueValue
	return r
}
func (r ApiNetworkGetNetwork1Request) RdAssignedValue(rdAssignedValue int64) ApiNetworkGetNetwork1Request {
	r.rdAssignedValue = &rdAssignedValue
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecIngressSecurityPolicy(specIngressSecurityPolicy []string) ApiNetworkGetNetwork1Request {
	r.specIngressSecurityPolicy = &specIngressSecurityPolicy
	return r
}
func (r ApiNetworkGetNetwork1Request) SpecEgressSecurityPolicy(specEgressSecurityPolicy []string) ApiNetworkGetNetwork1Request {
	r.specEgressSecurityPolicy = &specEgressSecurityPolicy
	return r
}
func (r ApiNetworkGetNetwork1Request) FirewallProfileEnableFwLogging(firewallProfileEnableFwLogging bool) ApiNetworkGetNetwork1Request {
	r.firewallProfileEnableFwLogging = &firewallProfileEnableFwLogging
	return r
}
func (r ApiNetworkGetNetwork1Request) StatusWorkloads(statusWorkloads []string) ApiNetworkGetNetwork1Request {
	r.statusWorkloads = &statusWorkloads
	return r
}
func (r ApiNetworkGetNetwork1Request) StatusAllocatedIpv4Addrs(statusAllocatedIpv4Addrs string) ApiNetworkGetNetwork1Request {
	r.statusAllocatedIpv4Addrs = &statusAllocatedIpv4Addrs
	return r
}
func (r ApiNetworkGetNetwork1Request) StatusId(statusId string) ApiNetworkGetNetwork1Request {
	r.statusId = &statusId
	return r
}
func (r ApiNetworkGetNetwork1Request) StatusOperState(statusOperState string) ApiNetworkGetNetwork1Request {
	r.statusOperState = &statusOperState
	return r
}
func (r ApiNetworkGetNetwork1Request) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetNetwork1Request {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetNetwork1Request) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetNetwork1Request {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetNetwork1Request) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetNetwork1Request {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetNetwork1Request) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetNetwork1Request {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetNetwork1Request) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetNetwork1Request {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetNetwork1Request) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetNetwork1Request {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetNetwork1Request) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.GetNetwork1Execute(r)
}

/*
 * GetNetwork1 Get Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkGetNetwork1Request
 */
func (a *NetworkV1ApiService) GetNetwork1(ctx _context.Context, oName string) ApiNetworkGetNetwork1Request {
	return ApiNetworkGetNetwork1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) GetNetwork1Execute(r ApiNetworkGetNetwork1Request) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetNetwork1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networks/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.specIpv4Subnet != nil {
		localVarQueryParams.Add("spec.ipv4-subnet", parameterToString(*r.specIpv4Subnet, ""))
	}
	if r.specIpv4Gateway != nil {
		localVarQueryParams.Add("spec.ipv4-gateway", parameterToString(*r.specIpv4Gateway, ""))
	}
	if r.specIpv6Subnet != nil {
		localVarQueryParams.Add("spec.ipv6-subnet", parameterToString(*r.specIpv6Subnet, ""))
	}
	if r.specIpv6Gateway != nil {
		localVarQueryParams.Add("spec.ipv6-gateway", parameterToString(*r.specIpv6Gateway, ""))
	}
	if r.specVlanId != nil {
		localVarQueryParams.Add("spec.vlan-id", parameterToString(*r.specVlanId, ""))
	}
	if r.specVxlanVni != nil {
		localVarQueryParams.Add("spec.vxlan-vni", parameterToString(*r.specVxlanVni, ""))
	}
	if r.specVirtualRouter != nil {
		localVarQueryParams.Add("spec.virtual-router", parameterToString(*r.specVirtualRouter, ""))
	}
	if r.specIpamPolicy != nil {
		localVarQueryParams.Add("spec.ipam-policy", parameterToString(*r.specIpamPolicy, ""))
	}
	if r.routeImportExportAddressFamily != nil {
		localVarQueryParams.Add("route-import-export.address-family", parameterToString(*r.routeImportExportAddressFamily, ""))
	}
	if r.routeImportExportRdAuto != nil {
		localVarQueryParams.Add("route-import-export.rd-auto", parameterToString(*r.routeImportExportRdAuto, ""))
	}
	if r.rdType != nil {
		localVarQueryParams.Add("rd.type", parameterToString(*r.rdType, ""))
	}
	if r.adminValueFormat != nil {
		localVarQueryParams.Add("admin-value.Format", parameterToString(*r.adminValueFormat, ""))
	}
	if r.adminValueValue != nil {
		localVarQueryParams.Add("admin-value.Value", parameterToString(*r.adminValueValue, ""))
	}
	if r.rdAssignedValue != nil {
		localVarQueryParams.Add("rd.assigned-value", parameterToString(*r.rdAssignedValue, ""))
	}
	if r.specIngressSecurityPolicy != nil {
		localVarQueryParams.Add("spec.ingress-security-policy", parameterToString(*r.specIngressSecurityPolicy, "csv"))
	}
	if r.specEgressSecurityPolicy != nil {
		localVarQueryParams.Add("spec.egress-security-policy", parameterToString(*r.specEgressSecurityPolicy, "csv"))
	}
	if r.firewallProfileEnableFwLogging != nil {
		localVarQueryParams.Add("firewall-profile.enable-fw-logging", parameterToString(*r.firewallProfileEnableFwLogging, ""))
	}
	if r.statusWorkloads != nil {
		localVarQueryParams.Add("status.workloads", parameterToString(*r.statusWorkloads, "csv"))
	}
	if r.statusAllocatedIpv4Addrs != nil {
		localVarQueryParams.Add("status.allocated-ipv4-addrs", parameterToString(*r.statusAllocatedIpv4Addrs, ""))
	}
	if r.statusId != nil {
		localVarQueryParams.Add("status.id", parameterToString(*r.statusId, ""))
	}
	if r.statusOperState != nil {
		localVarQueryParams.Add("status.oper-state", parameterToString(*r.statusOperState, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetNetwork1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetNetworkInterfaceRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specAdminStatus *string
	specSpeed *string
	specMtu *int64
	pauseType *string
	pauseTxPauseEnabled *bool
	pauseRxPauseEnabled *bool
	specType *string
	specAttachTenant *string
	specAttachNetwork *string
	specIpAllocType *string
	ipConfigIpAddress *string
	ipConfigDefaultGw *string
	ipConfigDnsServers *[]string
	specMacAddress *string
	specConnectionTracking *bool
	specTxPolicer *string
	specEnableFwLogging *bool
	specVnfAttached *bool
	statusName *string
	statusDsc *string
	statusType *string
	statusOperStatus *string
	statusPrimaryMac *string
	ifHostStatusHostIfname *string
	ifHostStatusDeviceId *string
	ifHostStatusMacAddress *string
	ifUplinkStatusLinkSpeed *string
	transceiverStatusState *string
	transceiverStatusCableType *string
	transceiverStatusPid *string
	ipConfigIpAddress2 *string
	ipConfigDefaultGw2 *string
	ipConfigDnsServers2 *[]string
	lldpNeighborChassisId *string
	lldpNeighborSysName *string
	lldpNeighborSysDescription *string
	lldpNeighborPortId *string
	lldpNeighborPortDescription *string
	lldpNeighborMgmtAddress *string
	statusMirrorSessions *[]string
	statusClusterNode *string
	statusDscId *string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetNetworkInterfaceRequest) TKind(tKind string) ApiNetworkGetNetworkInterfaceRequest {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) TApiVersion(tApiVersion string) ApiNetworkGetNetworkInterfaceRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) MetaTenant(metaTenant string) ApiNetworkGetNetworkInterfaceRequest {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) MetaNamespace(metaNamespace string) ApiNetworkGetNetworkInterfaceRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) MetaGenerationId(metaGenerationId string) ApiNetworkGetNetworkInterfaceRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetNetworkInterfaceRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) MetaUuid(metaUuid string) ApiNetworkGetNetworkInterfaceRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetNetworkInterfaceRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) MetaModTime(metaModTime time.Time) ApiNetworkGetNetworkInterfaceRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) MetaSelfLink(metaSelfLink string) ApiNetworkGetNetworkInterfaceRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecAdminStatus(specAdminStatus string) ApiNetworkGetNetworkInterfaceRequest {
	r.specAdminStatus = &specAdminStatus
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecSpeed(specSpeed string) ApiNetworkGetNetworkInterfaceRequest {
	r.specSpeed = &specSpeed
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecMtu(specMtu int64) ApiNetworkGetNetworkInterfaceRequest {
	r.specMtu = &specMtu
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PauseType(pauseType string) ApiNetworkGetNetworkInterfaceRequest {
	r.pauseType = &pauseType
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PauseTxPauseEnabled(pauseTxPauseEnabled bool) ApiNetworkGetNetworkInterfaceRequest {
	r.pauseTxPauseEnabled = &pauseTxPauseEnabled
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PauseRxPauseEnabled(pauseRxPauseEnabled bool) ApiNetworkGetNetworkInterfaceRequest {
	r.pauseRxPauseEnabled = &pauseRxPauseEnabled
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecType(specType string) ApiNetworkGetNetworkInterfaceRequest {
	r.specType = &specType
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecAttachTenant(specAttachTenant string) ApiNetworkGetNetworkInterfaceRequest {
	r.specAttachTenant = &specAttachTenant
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecAttachNetwork(specAttachNetwork string) ApiNetworkGetNetworkInterfaceRequest {
	r.specAttachNetwork = &specAttachNetwork
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecIpAllocType(specIpAllocType string) ApiNetworkGetNetworkInterfaceRequest {
	r.specIpAllocType = &specIpAllocType
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IpConfigIpAddress(ipConfigIpAddress string) ApiNetworkGetNetworkInterfaceRequest {
	r.ipConfigIpAddress = &ipConfigIpAddress
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IpConfigDefaultGw(ipConfigDefaultGw string) ApiNetworkGetNetworkInterfaceRequest {
	r.ipConfigDefaultGw = &ipConfigDefaultGw
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IpConfigDnsServers(ipConfigDnsServers []string) ApiNetworkGetNetworkInterfaceRequest {
	r.ipConfigDnsServers = &ipConfigDnsServers
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecMacAddress(specMacAddress string) ApiNetworkGetNetworkInterfaceRequest {
	r.specMacAddress = &specMacAddress
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecConnectionTracking(specConnectionTracking bool) ApiNetworkGetNetworkInterfaceRequest {
	r.specConnectionTracking = &specConnectionTracking
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecTxPolicer(specTxPolicer string) ApiNetworkGetNetworkInterfaceRequest {
	r.specTxPolicer = &specTxPolicer
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecEnableFwLogging(specEnableFwLogging bool) ApiNetworkGetNetworkInterfaceRequest {
	r.specEnableFwLogging = &specEnableFwLogging
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) SpecVnfAttached(specVnfAttached bool) ApiNetworkGetNetworkInterfaceRequest {
	r.specVnfAttached = &specVnfAttached
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) StatusName(statusName string) ApiNetworkGetNetworkInterfaceRequest {
	r.statusName = &statusName
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) StatusDsc(statusDsc string) ApiNetworkGetNetworkInterfaceRequest {
	r.statusDsc = &statusDsc
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) StatusType(statusType string) ApiNetworkGetNetworkInterfaceRequest {
	r.statusType = &statusType
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) StatusOperStatus(statusOperStatus string) ApiNetworkGetNetworkInterfaceRequest {
	r.statusOperStatus = &statusOperStatus
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) StatusPrimaryMac(statusPrimaryMac string) ApiNetworkGetNetworkInterfaceRequest {
	r.statusPrimaryMac = &statusPrimaryMac
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IfHostStatusHostIfname(ifHostStatusHostIfname string) ApiNetworkGetNetworkInterfaceRequest {
	r.ifHostStatusHostIfname = &ifHostStatusHostIfname
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IfHostStatusDeviceId(ifHostStatusDeviceId string) ApiNetworkGetNetworkInterfaceRequest {
	r.ifHostStatusDeviceId = &ifHostStatusDeviceId
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IfHostStatusMacAddress(ifHostStatusMacAddress string) ApiNetworkGetNetworkInterfaceRequest {
	r.ifHostStatusMacAddress = &ifHostStatusMacAddress
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IfUplinkStatusLinkSpeed(ifUplinkStatusLinkSpeed string) ApiNetworkGetNetworkInterfaceRequest {
	r.ifUplinkStatusLinkSpeed = &ifUplinkStatusLinkSpeed
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) TransceiverStatusState(transceiverStatusState string) ApiNetworkGetNetworkInterfaceRequest {
	r.transceiverStatusState = &transceiverStatusState
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) TransceiverStatusCableType(transceiverStatusCableType string) ApiNetworkGetNetworkInterfaceRequest {
	r.transceiverStatusCableType = &transceiverStatusCableType
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) TransceiverStatusPid(transceiverStatusPid string) ApiNetworkGetNetworkInterfaceRequest {
	r.transceiverStatusPid = &transceiverStatusPid
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IpConfigIpAddress2(ipConfigIpAddress2 string) ApiNetworkGetNetworkInterfaceRequest {
	r.ipConfigIpAddress2 = &ipConfigIpAddress2
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IpConfigDefaultGw2(ipConfigDefaultGw2 string) ApiNetworkGetNetworkInterfaceRequest {
	r.ipConfigDefaultGw2 = &ipConfigDefaultGw2
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) IpConfigDnsServers2(ipConfigDnsServers2 []string) ApiNetworkGetNetworkInterfaceRequest {
	r.ipConfigDnsServers2 = &ipConfigDnsServers2
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) LldpNeighborChassisId(lldpNeighborChassisId string) ApiNetworkGetNetworkInterfaceRequest {
	r.lldpNeighborChassisId = &lldpNeighborChassisId
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) LldpNeighborSysName(lldpNeighborSysName string) ApiNetworkGetNetworkInterfaceRequest {
	r.lldpNeighborSysName = &lldpNeighborSysName
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) LldpNeighborSysDescription(lldpNeighborSysDescription string) ApiNetworkGetNetworkInterfaceRequest {
	r.lldpNeighborSysDescription = &lldpNeighborSysDescription
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) LldpNeighborPortId(lldpNeighborPortId string) ApiNetworkGetNetworkInterfaceRequest {
	r.lldpNeighborPortId = &lldpNeighborPortId
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) LldpNeighborPortDescription(lldpNeighborPortDescription string) ApiNetworkGetNetworkInterfaceRequest {
	r.lldpNeighborPortDescription = &lldpNeighborPortDescription
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) LldpNeighborMgmtAddress(lldpNeighborMgmtAddress string) ApiNetworkGetNetworkInterfaceRequest {
	r.lldpNeighborMgmtAddress = &lldpNeighborMgmtAddress
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) StatusMirrorSessions(statusMirrorSessions []string) ApiNetworkGetNetworkInterfaceRequest {
	r.statusMirrorSessions = &statusMirrorSessions
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) StatusClusterNode(statusClusterNode string) ApiNetworkGetNetworkInterfaceRequest {
	r.statusClusterNode = &statusClusterNode
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) StatusDscId(statusDscId string) ApiNetworkGetNetworkInterfaceRequest {
	r.statusDscId = &statusDscId
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetNetworkInterfaceRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetNetworkInterfaceRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetNetworkInterfaceRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetNetworkInterfaceRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetNetworkInterfaceRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetNetworkInterfaceRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetNetworkInterfaceRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetNetworkInterfaceRequest) Execute() (NetworkNetworkInterface, *_nethttp.Response, error) {
	return r.ApiService.GetNetworkInterfaceExecute(r)
}

/*
 * GetNetworkInterface Get NetworkInterface object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkGetNetworkInterfaceRequest
 */
func (a *NetworkV1ApiService) GetNetworkInterface(ctx _context.Context, oName string) ApiNetworkGetNetworkInterfaceRequest {
	return ApiNetworkGetNetworkInterfaceRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetworkInterface
 */
func (a *NetworkV1ApiService) GetNetworkInterfaceExecute(r ApiNetworkGetNetworkInterfaceRequest) (NetworkNetworkInterface, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetworkInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networkinterfaces/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specAdminStatus != nil {
		localVarQueryParams.Add("spec.admin-status", parameterToString(*r.specAdminStatus, ""))
	}
	if r.specSpeed != nil {
		localVarQueryParams.Add("spec.speed", parameterToString(*r.specSpeed, ""))
	}
	if r.specMtu != nil {
		localVarQueryParams.Add("spec.mtu", parameterToString(*r.specMtu, ""))
	}
	if r.pauseType != nil {
		localVarQueryParams.Add("pause.type", parameterToString(*r.pauseType, ""))
	}
	if r.pauseTxPauseEnabled != nil {
		localVarQueryParams.Add("pause.tx-pause-enabled", parameterToString(*r.pauseTxPauseEnabled, ""))
	}
	if r.pauseRxPauseEnabled != nil {
		localVarQueryParams.Add("pause.rx-pause-enabled", parameterToString(*r.pauseRxPauseEnabled, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.specAttachTenant != nil {
		localVarQueryParams.Add("spec.attach-tenant", parameterToString(*r.specAttachTenant, ""))
	}
	if r.specAttachNetwork != nil {
		localVarQueryParams.Add("spec.attach-network", parameterToString(*r.specAttachNetwork, ""))
	}
	if r.specIpAllocType != nil {
		localVarQueryParams.Add("spec.ip-alloc-type", parameterToString(*r.specIpAllocType, ""))
	}
	if r.ipConfigIpAddress != nil {
		localVarQueryParams.Add("ip-config.ip-address", parameterToString(*r.ipConfigIpAddress, ""))
	}
	if r.ipConfigDefaultGw != nil {
		localVarQueryParams.Add("ip-config.default-gw", parameterToString(*r.ipConfigDefaultGw, ""))
	}
	if r.ipConfigDnsServers != nil {
		localVarQueryParams.Add("ip-config.dns-servers", parameterToString(*r.ipConfigDnsServers, "csv"))
	}
	if r.specMacAddress != nil {
		localVarQueryParams.Add("spec.mac-address", parameterToString(*r.specMacAddress, ""))
	}
	if r.specConnectionTracking != nil {
		localVarQueryParams.Add("spec.connection-tracking", parameterToString(*r.specConnectionTracking, ""))
	}
	if r.specTxPolicer != nil {
		localVarQueryParams.Add("spec.tx-policer", parameterToString(*r.specTxPolicer, ""))
	}
	if r.specEnableFwLogging != nil {
		localVarQueryParams.Add("spec.enable-fw-logging", parameterToString(*r.specEnableFwLogging, ""))
	}
	if r.specVnfAttached != nil {
		localVarQueryParams.Add("spec.vnf-attached", parameterToString(*r.specVnfAttached, ""))
	}
	if r.statusName != nil {
		localVarQueryParams.Add("status.name", parameterToString(*r.statusName, ""))
	}
	if r.statusDsc != nil {
		localVarQueryParams.Add("status.dsc", parameterToString(*r.statusDsc, ""))
	}
	if r.statusType != nil {
		localVarQueryParams.Add("status.type", parameterToString(*r.statusType, ""))
	}
	if r.statusOperStatus != nil {
		localVarQueryParams.Add("status.oper-status", parameterToString(*r.statusOperStatus, ""))
	}
	if r.statusPrimaryMac != nil {
		localVarQueryParams.Add("status.primary-mac", parameterToString(*r.statusPrimaryMac, ""))
	}
	if r.ifHostStatusHostIfname != nil {
		localVarQueryParams.Add("if-host-status.host-ifname", parameterToString(*r.ifHostStatusHostIfname, ""))
	}
	if r.ifHostStatusDeviceId != nil {
		localVarQueryParams.Add("if-host-status.device-id", parameterToString(*r.ifHostStatusDeviceId, ""))
	}
	if r.ifHostStatusMacAddress != nil {
		localVarQueryParams.Add("if-host-status.mac-address", parameterToString(*r.ifHostStatusMacAddress, ""))
	}
	if r.ifUplinkStatusLinkSpeed != nil {
		localVarQueryParams.Add("if-uplink-status.link-speed", parameterToString(*r.ifUplinkStatusLinkSpeed, ""))
	}
	if r.transceiverStatusState != nil {
		localVarQueryParams.Add("transceiver-status.state", parameterToString(*r.transceiverStatusState, ""))
	}
	if r.transceiverStatusCableType != nil {
		localVarQueryParams.Add("transceiver-status.cable-type", parameterToString(*r.transceiverStatusCableType, ""))
	}
	if r.transceiverStatusPid != nil {
		localVarQueryParams.Add("transceiver-status.pid", parameterToString(*r.transceiverStatusPid, ""))
	}
	if r.ipConfigIpAddress2 != nil {
		localVarQueryParams.Add("ip-config.ip-address", parameterToString(*r.ipConfigIpAddress2, ""))
	}
	if r.ipConfigDefaultGw2 != nil {
		localVarQueryParams.Add("ip-config.default-gw", parameterToString(*r.ipConfigDefaultGw2, ""))
	}
	if r.ipConfigDnsServers2 != nil {
		localVarQueryParams.Add("ip-config.dns-servers", parameterToString(*r.ipConfigDnsServers2, "csv"))
	}
	if r.lldpNeighborChassisId != nil {
		localVarQueryParams.Add("lldp-neighbor.chassis-id", parameterToString(*r.lldpNeighborChassisId, ""))
	}
	if r.lldpNeighborSysName != nil {
		localVarQueryParams.Add("lldp-neighbor.sys-name", parameterToString(*r.lldpNeighborSysName, ""))
	}
	if r.lldpNeighborSysDescription != nil {
		localVarQueryParams.Add("lldp-neighbor.sys-description", parameterToString(*r.lldpNeighborSysDescription, ""))
	}
	if r.lldpNeighborPortId != nil {
		localVarQueryParams.Add("lldp-neighbor.port-id", parameterToString(*r.lldpNeighborPortId, ""))
	}
	if r.lldpNeighborPortDescription != nil {
		localVarQueryParams.Add("lldp-neighbor.port-description", parameterToString(*r.lldpNeighborPortDescription, ""))
	}
	if r.lldpNeighborMgmtAddress != nil {
		localVarQueryParams.Add("lldp-neighbor.mgmt-address", parameterToString(*r.lldpNeighborMgmtAddress, ""))
	}
	if r.statusMirrorSessions != nil {
		localVarQueryParams.Add("status.mirror-sessions", parameterToString(*r.statusMirrorSessions, "csv"))
	}
	if r.statusClusterNode != nil {
		localVarQueryParams.Add("status.cluster-node", parameterToString(*r.statusClusterNode, ""))
	}
	if r.statusDscId != nil {
		localVarQueryParams.Add("status.dsc-id", parameterToString(*r.statusDscId, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetNetworkInterfaceExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetPolicerProfileRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	criteriaBytesPerSecond *string
	criteriaPacketsPerSecond *string
	criteriaBurstSize *string
	exceedActionPolicerAction *string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetPolicerProfileRequest) TKind(tKind string) ApiNetworkGetPolicerProfileRequest {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) TApiVersion(tApiVersion string) ApiNetworkGetPolicerProfileRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) MetaNamespace(metaNamespace string) ApiNetworkGetPolicerProfileRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) MetaGenerationId(metaGenerationId string) ApiNetworkGetPolicerProfileRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetPolicerProfileRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) MetaUuid(metaUuid string) ApiNetworkGetPolicerProfileRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetPolicerProfileRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) MetaModTime(metaModTime time.Time) ApiNetworkGetPolicerProfileRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) MetaSelfLink(metaSelfLink string) ApiNetworkGetPolicerProfileRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) CriteriaBytesPerSecond(criteriaBytesPerSecond string) ApiNetworkGetPolicerProfileRequest {
	r.criteriaBytesPerSecond = &criteriaBytesPerSecond
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) CriteriaPacketsPerSecond(criteriaPacketsPerSecond string) ApiNetworkGetPolicerProfileRequest {
	r.criteriaPacketsPerSecond = &criteriaPacketsPerSecond
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) CriteriaBurstSize(criteriaBurstSize string) ApiNetworkGetPolicerProfileRequest {
	r.criteriaBurstSize = &criteriaBurstSize
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) ExceedActionPolicerAction(exceedActionPolicerAction string) ApiNetworkGetPolicerProfileRequest {
	r.exceedActionPolicerAction = &exceedActionPolicerAction
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetPolicerProfileRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetPolicerProfileRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetPolicerProfileRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetPolicerProfileRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetPolicerProfileRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetPolicerProfileRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetPolicerProfileRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetPolicerProfileRequest) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.GetPolicerProfileExecute(r)
}

/*
 * GetPolicerProfile Get PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkGetPolicerProfileRequest
 */
func (a *NetworkV1ApiService) GetPolicerProfile(ctx _context.Context, oTenant string, oName string) ApiNetworkGetPolicerProfileRequest {
	return ApiNetworkGetPolicerProfileRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) GetPolicerProfileExecute(r ApiNetworkGetPolicerProfileRequest) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetPolicerProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/policer-profile/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.criteriaBytesPerSecond != nil {
		localVarQueryParams.Add("criteria.bytes-per-second", parameterToString(*r.criteriaBytesPerSecond, ""))
	}
	if r.criteriaPacketsPerSecond != nil {
		localVarQueryParams.Add("criteria.packets-per-second", parameterToString(*r.criteriaPacketsPerSecond, ""))
	}
	if r.criteriaBurstSize != nil {
		localVarQueryParams.Add("criteria.burst-size", parameterToString(*r.criteriaBurstSize, ""))
	}
	if r.exceedActionPolicerAction != nil {
		localVarQueryParams.Add("exceed-action.policer-action", parameterToString(*r.exceedActionPolicerAction, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetPolicerProfileExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetPolicerProfile1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	criteriaBytesPerSecond *string
	criteriaPacketsPerSecond *string
	criteriaBurstSize *string
	exceedActionPolicerAction *string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetPolicerProfile1Request) TKind(tKind string) ApiNetworkGetPolicerProfile1Request {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) TApiVersion(tApiVersion string) ApiNetworkGetPolicerProfile1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) MetaTenant(metaTenant string) ApiNetworkGetPolicerProfile1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) MetaNamespace(metaNamespace string) ApiNetworkGetPolicerProfile1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) MetaGenerationId(metaGenerationId string) ApiNetworkGetPolicerProfile1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetPolicerProfile1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) MetaUuid(metaUuid string) ApiNetworkGetPolicerProfile1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetPolicerProfile1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) MetaModTime(metaModTime time.Time) ApiNetworkGetPolicerProfile1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) MetaSelfLink(metaSelfLink string) ApiNetworkGetPolicerProfile1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) CriteriaBytesPerSecond(criteriaBytesPerSecond string) ApiNetworkGetPolicerProfile1Request {
	r.criteriaBytesPerSecond = &criteriaBytesPerSecond
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) CriteriaPacketsPerSecond(criteriaPacketsPerSecond string) ApiNetworkGetPolicerProfile1Request {
	r.criteriaPacketsPerSecond = &criteriaPacketsPerSecond
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) CriteriaBurstSize(criteriaBurstSize string) ApiNetworkGetPolicerProfile1Request {
	r.criteriaBurstSize = &criteriaBurstSize
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) ExceedActionPolicerAction(exceedActionPolicerAction string) ApiNetworkGetPolicerProfile1Request {
	r.exceedActionPolicerAction = &exceedActionPolicerAction
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetPolicerProfile1Request {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetPolicerProfile1Request {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetPolicerProfile1Request {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetPolicerProfile1Request {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetPolicerProfile1Request {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetPolicerProfile1Request) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetPolicerProfile1Request {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetPolicerProfile1Request) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.GetPolicerProfile1Execute(r)
}

/*
 * GetPolicerProfile1 Get PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkGetPolicerProfile1Request
 */
func (a *NetworkV1ApiService) GetPolicerProfile1(ctx _context.Context, oName string) ApiNetworkGetPolicerProfile1Request {
	return ApiNetworkGetPolicerProfile1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) GetPolicerProfile1Execute(r ApiNetworkGetPolicerProfile1Request) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetPolicerProfile1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/policer-profile/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.criteriaBytesPerSecond != nil {
		localVarQueryParams.Add("criteria.bytes-per-second", parameterToString(*r.criteriaBytesPerSecond, ""))
	}
	if r.criteriaPacketsPerSecond != nil {
		localVarQueryParams.Add("criteria.packets-per-second", parameterToString(*r.criteriaPacketsPerSecond, ""))
	}
	if r.criteriaBurstSize != nil {
		localVarQueryParams.Add("criteria.burst-size", parameterToString(*r.criteriaBurstSize, ""))
	}
	if r.exceedActionPolicerAction != nil {
		localVarQueryParams.Add("exceed-action.policer-action", parameterToString(*r.exceedActionPolicerAction, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetPolicerProfile1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetRouteTableRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
}

func (r ApiNetworkGetRouteTableRequest) TKind(tKind string) ApiNetworkGetRouteTableRequest {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetRouteTableRequest) TApiVersion(tApiVersion string) ApiNetworkGetRouteTableRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetRouteTableRequest) MetaNamespace(metaNamespace string) ApiNetworkGetRouteTableRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetRouteTableRequest) MetaGenerationId(metaGenerationId string) ApiNetworkGetRouteTableRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetRouteTableRequest) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetRouteTableRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetRouteTableRequest) MetaUuid(metaUuid string) ApiNetworkGetRouteTableRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetRouteTableRequest) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetRouteTableRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetRouteTableRequest) MetaModTime(metaModTime time.Time) ApiNetworkGetRouteTableRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetRouteTableRequest) MetaSelfLink(metaSelfLink string) ApiNetworkGetRouteTableRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}

func (r ApiNetworkGetRouteTableRequest) Execute() (NetworkRouteTable, *_nethttp.Response, error) {
	return r.ApiService.GetRouteTableExecute(r)
}

/*
 * GetRouteTable Get RouteTable object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkGetRouteTableRequest
 */
func (a *NetworkV1ApiService) GetRouteTable(ctx _context.Context, oTenant string, oName string) ApiNetworkGetRouteTableRequest {
	return ApiNetworkGetRouteTableRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkRouteTable
 */
func (a *NetworkV1ApiService) GetRouteTableExecute(r ApiNetworkGetRouteTableRequest) (NetworkRouteTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRouteTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetRouteTable")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/route-tables/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetRouteTableExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetRouteTable1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
}

func (r ApiNetworkGetRouteTable1Request) TKind(tKind string) ApiNetworkGetRouteTable1Request {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetRouteTable1Request) TApiVersion(tApiVersion string) ApiNetworkGetRouteTable1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetRouteTable1Request) MetaTenant(metaTenant string) ApiNetworkGetRouteTable1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiNetworkGetRouteTable1Request) MetaNamespace(metaNamespace string) ApiNetworkGetRouteTable1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetRouteTable1Request) MetaGenerationId(metaGenerationId string) ApiNetworkGetRouteTable1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetRouteTable1Request) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetRouteTable1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetRouteTable1Request) MetaUuid(metaUuid string) ApiNetworkGetRouteTable1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetRouteTable1Request) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetRouteTable1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetRouteTable1Request) MetaModTime(metaModTime time.Time) ApiNetworkGetRouteTable1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetRouteTable1Request) MetaSelfLink(metaSelfLink string) ApiNetworkGetRouteTable1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}

func (r ApiNetworkGetRouteTable1Request) Execute() (NetworkRouteTable, *_nethttp.Response, error) {
	return r.ApiService.GetRouteTable1Execute(r)
}

/*
 * GetRouteTable1 Get RouteTable object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkGetRouteTable1Request
 */
func (a *NetworkV1ApiService) GetRouteTable1(ctx _context.Context, oName string) ApiNetworkGetRouteTable1Request {
	return ApiNetworkGetRouteTable1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkRouteTable
 */
func (a *NetworkV1ApiService) GetRouteTable1Execute(r ApiNetworkGetRouteTable1Request) (NetworkRouteTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRouteTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetRouteTable1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/route-tables/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetRouteTable1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetRoutingConfigRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	bgpConfigRouterId *string
	asNumberASNumber *int64
	bgpConfigKeepaliveInterval *int64
	bgpConfigHoldtime *int64
	bgpConfigDscAutoConfig *bool
	bgpConfigSuppressDefaultResolution *bool
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetRoutingConfigRequest) TKind(tKind string) ApiNetworkGetRoutingConfigRequest {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) TApiVersion(tApiVersion string) ApiNetworkGetRoutingConfigRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) MetaTenant(metaTenant string) ApiNetworkGetRoutingConfigRequest {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) MetaNamespace(metaNamespace string) ApiNetworkGetRoutingConfigRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) MetaGenerationId(metaGenerationId string) ApiNetworkGetRoutingConfigRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetRoutingConfigRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) MetaUuid(metaUuid string) ApiNetworkGetRoutingConfigRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetRoutingConfigRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) MetaModTime(metaModTime time.Time) ApiNetworkGetRoutingConfigRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) MetaSelfLink(metaSelfLink string) ApiNetworkGetRoutingConfigRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) BgpConfigRouterId(bgpConfigRouterId string) ApiNetworkGetRoutingConfigRequest {
	r.bgpConfigRouterId = &bgpConfigRouterId
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) AsNumberASNumber(asNumberASNumber int64) ApiNetworkGetRoutingConfigRequest {
	r.asNumberASNumber = &asNumberASNumber
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) BgpConfigKeepaliveInterval(bgpConfigKeepaliveInterval int64) ApiNetworkGetRoutingConfigRequest {
	r.bgpConfigKeepaliveInterval = &bgpConfigKeepaliveInterval
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) BgpConfigHoldtime(bgpConfigHoldtime int64) ApiNetworkGetRoutingConfigRequest {
	r.bgpConfigHoldtime = &bgpConfigHoldtime
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) BgpConfigDscAutoConfig(bgpConfigDscAutoConfig bool) ApiNetworkGetRoutingConfigRequest {
	r.bgpConfigDscAutoConfig = &bgpConfigDscAutoConfig
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) BgpConfigSuppressDefaultResolution(bgpConfigSuppressDefaultResolution bool) ApiNetworkGetRoutingConfigRequest {
	r.bgpConfigSuppressDefaultResolution = &bgpConfigSuppressDefaultResolution
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetRoutingConfigRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetRoutingConfigRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetRoutingConfigRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetRoutingConfigRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetRoutingConfigRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetRoutingConfigRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetRoutingConfigRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetRoutingConfigRequest) Execute() (NetworkRoutingConfig, *_nethttp.Response, error) {
	return r.ApiService.GetRoutingConfigExecute(r)
}

/*
 * GetRoutingConfig Get RoutingConfig object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkGetRoutingConfigRequest
 */
func (a *NetworkV1ApiService) GetRoutingConfig(ctx _context.Context, oName string) ApiNetworkGetRoutingConfigRequest {
	return ApiNetworkGetRoutingConfigRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkRoutingConfig
 */
func (a *NetworkV1ApiService) GetRoutingConfigExecute(r ApiNetworkGetRoutingConfigRequest) (NetworkRoutingConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRoutingConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetRoutingConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/routing-config/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.bgpConfigRouterId != nil {
		localVarQueryParams.Add("bgp-config.router-id", parameterToString(*r.bgpConfigRouterId, ""))
	}
	if r.asNumberASNumber != nil {
		localVarQueryParams.Add("as-number.ASNumber", parameterToString(*r.asNumberASNumber, ""))
	}
	if r.bgpConfigKeepaliveInterval != nil {
		localVarQueryParams.Add("bgp-config.keepalive-interval", parameterToString(*r.bgpConfigKeepaliveInterval, ""))
	}
	if r.bgpConfigHoldtime != nil {
		localVarQueryParams.Add("bgp-config.holdtime", parameterToString(*r.bgpConfigHoldtime, ""))
	}
	if r.bgpConfigDscAutoConfig != nil {
		localVarQueryParams.Add("bgp-config.dsc-auto-config", parameterToString(*r.bgpConfigDscAutoConfig, ""))
	}
	if r.bgpConfigSuppressDefaultResolution != nil {
		localVarQueryParams.Add("bgp-config.suppress-default-resolution", parameterToString(*r.bgpConfigSuppressDefaultResolution, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetRoutingConfigExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetVirtualRouterRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	specRouterMacAddress *string
	specVxlanVni *int64
	routeImportExportAddressFamily *string
	routeImportExportRdAuto *bool
	rdType *string
	adminValueFormat *string
	adminValueValue *int64
	rdAssignedValue *int64
	specDefaultIpamPolicy *string
	statusId *string
	statusRouteTable *string
	rdType2 *string
	adminValueFormat2 *string
	adminValueValue2 *int64
	rdAssignedValue2 *int64
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetVirtualRouterRequest) TKind(tKind string) ApiNetworkGetVirtualRouterRequest {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) TApiVersion(tApiVersion string) ApiNetworkGetVirtualRouterRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) MetaNamespace(metaNamespace string) ApiNetworkGetVirtualRouterRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) MetaGenerationId(metaGenerationId string) ApiNetworkGetVirtualRouterRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetVirtualRouterRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) MetaUuid(metaUuid string) ApiNetworkGetVirtualRouterRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetVirtualRouterRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) MetaModTime(metaModTime time.Time) ApiNetworkGetVirtualRouterRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) MetaSelfLink(metaSelfLink string) ApiNetworkGetVirtualRouterRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) SpecType(specType string) ApiNetworkGetVirtualRouterRequest {
	r.specType = &specType
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) SpecRouterMacAddress(specRouterMacAddress string) ApiNetworkGetVirtualRouterRequest {
	r.specRouterMacAddress = &specRouterMacAddress
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) SpecVxlanVni(specVxlanVni int64) ApiNetworkGetVirtualRouterRequest {
	r.specVxlanVni = &specVxlanVni
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) RouteImportExportAddressFamily(routeImportExportAddressFamily string) ApiNetworkGetVirtualRouterRequest {
	r.routeImportExportAddressFamily = &routeImportExportAddressFamily
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) RouteImportExportRdAuto(routeImportExportRdAuto bool) ApiNetworkGetVirtualRouterRequest {
	r.routeImportExportRdAuto = &routeImportExportRdAuto
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) RdType(rdType string) ApiNetworkGetVirtualRouterRequest {
	r.rdType = &rdType
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) AdminValueFormat(adminValueFormat string) ApiNetworkGetVirtualRouterRequest {
	r.adminValueFormat = &adminValueFormat
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) AdminValueValue(adminValueValue int64) ApiNetworkGetVirtualRouterRequest {
	r.adminValueValue = &adminValueValue
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) RdAssignedValue(rdAssignedValue int64) ApiNetworkGetVirtualRouterRequest {
	r.rdAssignedValue = &rdAssignedValue
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) SpecDefaultIpamPolicy(specDefaultIpamPolicy string) ApiNetworkGetVirtualRouterRequest {
	r.specDefaultIpamPolicy = &specDefaultIpamPolicy
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) StatusId(statusId string) ApiNetworkGetVirtualRouterRequest {
	r.statusId = &statusId
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) StatusRouteTable(statusRouteTable string) ApiNetworkGetVirtualRouterRequest {
	r.statusRouteTable = &statusRouteTable
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) RdType2(rdType2 string) ApiNetworkGetVirtualRouterRequest {
	r.rdType2 = &rdType2
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) AdminValueFormat2(adminValueFormat2 string) ApiNetworkGetVirtualRouterRequest {
	r.adminValueFormat2 = &adminValueFormat2
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) AdminValueValue2(adminValueValue2 int64) ApiNetworkGetVirtualRouterRequest {
	r.adminValueValue2 = &adminValueValue2
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) RdAssignedValue2(rdAssignedValue2 int64) ApiNetworkGetVirtualRouterRequest {
	r.rdAssignedValue2 = &rdAssignedValue2
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetVirtualRouterRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetVirtualRouterRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetVirtualRouterRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetVirtualRouterRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetVirtualRouterRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetVirtualRouterRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetVirtualRouterRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetVirtualRouterRequest) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.GetVirtualRouterExecute(r)
}

/*
 * GetVirtualRouter Get VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkGetVirtualRouterRequest
 */
func (a *NetworkV1ApiService) GetVirtualRouter(ctx _context.Context, oTenant string, oName string) ApiNetworkGetVirtualRouterRequest {
	return ApiNetworkGetVirtualRouterRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) GetVirtualRouterExecute(r ApiNetworkGetVirtualRouterRequest) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetVirtualRouter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtualrouters/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.specRouterMacAddress != nil {
		localVarQueryParams.Add("spec.router-mac-address", parameterToString(*r.specRouterMacAddress, ""))
	}
	if r.specVxlanVni != nil {
		localVarQueryParams.Add("spec.vxlan-vni", parameterToString(*r.specVxlanVni, ""))
	}
	if r.routeImportExportAddressFamily != nil {
		localVarQueryParams.Add("route-import-export.address-family", parameterToString(*r.routeImportExportAddressFamily, ""))
	}
	if r.routeImportExportRdAuto != nil {
		localVarQueryParams.Add("route-import-export.rd-auto", parameterToString(*r.routeImportExportRdAuto, ""))
	}
	if r.rdType != nil {
		localVarQueryParams.Add("rd.type", parameterToString(*r.rdType, ""))
	}
	if r.adminValueFormat != nil {
		localVarQueryParams.Add("admin-value.Format", parameterToString(*r.adminValueFormat, ""))
	}
	if r.adminValueValue != nil {
		localVarQueryParams.Add("admin-value.Value", parameterToString(*r.adminValueValue, ""))
	}
	if r.rdAssignedValue != nil {
		localVarQueryParams.Add("rd.assigned-value", parameterToString(*r.rdAssignedValue, ""))
	}
	if r.specDefaultIpamPolicy != nil {
		localVarQueryParams.Add("spec.default-ipam-policy", parameterToString(*r.specDefaultIpamPolicy, ""))
	}
	if r.statusId != nil {
		localVarQueryParams.Add("status.id", parameterToString(*r.statusId, ""))
	}
	if r.statusRouteTable != nil {
		localVarQueryParams.Add("status.route-table", parameterToString(*r.statusRouteTable, ""))
	}
	if r.rdType2 != nil {
		localVarQueryParams.Add("rd.type", parameterToString(*r.rdType2, ""))
	}
	if r.adminValueFormat2 != nil {
		localVarQueryParams.Add("admin-value.Format", parameterToString(*r.adminValueFormat2, ""))
	}
	if r.adminValueValue2 != nil {
		localVarQueryParams.Add("admin-value.Value", parameterToString(*r.adminValueValue2, ""))
	}
	if r.rdAssignedValue2 != nil {
		localVarQueryParams.Add("rd.assigned-value", parameterToString(*r.rdAssignedValue2, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetVirtualRouterExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetVirtualRouter1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	specType *string
	specRouterMacAddress *string
	specVxlanVni *int64
	routeImportExportAddressFamily *string
	routeImportExportRdAuto *bool
	rdType *string
	adminValueFormat *string
	adminValueValue *int64
	rdAssignedValue *int64
	specDefaultIpamPolicy *string
	statusId *string
	statusRouteTable *string
	rdType2 *string
	adminValueFormat2 *string
	adminValueValue2 *int64
	rdAssignedValue2 *int64
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetVirtualRouter1Request) TKind(tKind string) ApiNetworkGetVirtualRouter1Request {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) TApiVersion(tApiVersion string) ApiNetworkGetVirtualRouter1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) MetaTenant(metaTenant string) ApiNetworkGetVirtualRouter1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) MetaNamespace(metaNamespace string) ApiNetworkGetVirtualRouter1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) MetaGenerationId(metaGenerationId string) ApiNetworkGetVirtualRouter1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetVirtualRouter1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) MetaUuid(metaUuid string) ApiNetworkGetVirtualRouter1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetVirtualRouter1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) MetaModTime(metaModTime time.Time) ApiNetworkGetVirtualRouter1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) MetaSelfLink(metaSelfLink string) ApiNetworkGetVirtualRouter1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) SpecType(specType string) ApiNetworkGetVirtualRouter1Request {
	r.specType = &specType
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) SpecRouterMacAddress(specRouterMacAddress string) ApiNetworkGetVirtualRouter1Request {
	r.specRouterMacAddress = &specRouterMacAddress
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) SpecVxlanVni(specVxlanVni int64) ApiNetworkGetVirtualRouter1Request {
	r.specVxlanVni = &specVxlanVni
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) RouteImportExportAddressFamily(routeImportExportAddressFamily string) ApiNetworkGetVirtualRouter1Request {
	r.routeImportExportAddressFamily = &routeImportExportAddressFamily
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) RouteImportExportRdAuto(routeImportExportRdAuto bool) ApiNetworkGetVirtualRouter1Request {
	r.routeImportExportRdAuto = &routeImportExportRdAuto
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) RdType(rdType string) ApiNetworkGetVirtualRouter1Request {
	r.rdType = &rdType
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) AdminValueFormat(adminValueFormat string) ApiNetworkGetVirtualRouter1Request {
	r.adminValueFormat = &adminValueFormat
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) AdminValueValue(adminValueValue int64) ApiNetworkGetVirtualRouter1Request {
	r.adminValueValue = &adminValueValue
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) RdAssignedValue(rdAssignedValue int64) ApiNetworkGetVirtualRouter1Request {
	r.rdAssignedValue = &rdAssignedValue
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) SpecDefaultIpamPolicy(specDefaultIpamPolicy string) ApiNetworkGetVirtualRouter1Request {
	r.specDefaultIpamPolicy = &specDefaultIpamPolicy
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) StatusId(statusId string) ApiNetworkGetVirtualRouter1Request {
	r.statusId = &statusId
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) StatusRouteTable(statusRouteTable string) ApiNetworkGetVirtualRouter1Request {
	r.statusRouteTable = &statusRouteTable
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) RdType2(rdType2 string) ApiNetworkGetVirtualRouter1Request {
	r.rdType2 = &rdType2
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) AdminValueFormat2(adminValueFormat2 string) ApiNetworkGetVirtualRouter1Request {
	r.adminValueFormat2 = &adminValueFormat2
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) AdminValueValue2(adminValueValue2 int64) ApiNetworkGetVirtualRouter1Request {
	r.adminValueValue2 = &adminValueValue2
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) RdAssignedValue2(rdAssignedValue2 int64) ApiNetworkGetVirtualRouter1Request {
	r.rdAssignedValue2 = &rdAssignedValue2
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetVirtualRouter1Request {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetVirtualRouter1Request {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetVirtualRouter1Request {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetVirtualRouter1Request {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetVirtualRouter1Request {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetVirtualRouter1Request) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetVirtualRouter1Request {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetVirtualRouter1Request) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.GetVirtualRouter1Execute(r)
}

/*
 * GetVirtualRouter1 Get VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkGetVirtualRouter1Request
 */
func (a *NetworkV1ApiService) GetVirtualRouter1(ctx _context.Context, oName string) ApiNetworkGetVirtualRouter1Request {
	return ApiNetworkGetVirtualRouter1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) GetVirtualRouter1Execute(r ApiNetworkGetVirtualRouter1Request) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetVirtualRouter1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtualrouters/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.specType != nil {
		localVarQueryParams.Add("spec.type", parameterToString(*r.specType, ""))
	}
	if r.specRouterMacAddress != nil {
		localVarQueryParams.Add("spec.router-mac-address", parameterToString(*r.specRouterMacAddress, ""))
	}
	if r.specVxlanVni != nil {
		localVarQueryParams.Add("spec.vxlan-vni", parameterToString(*r.specVxlanVni, ""))
	}
	if r.routeImportExportAddressFamily != nil {
		localVarQueryParams.Add("route-import-export.address-family", parameterToString(*r.routeImportExportAddressFamily, ""))
	}
	if r.routeImportExportRdAuto != nil {
		localVarQueryParams.Add("route-import-export.rd-auto", parameterToString(*r.routeImportExportRdAuto, ""))
	}
	if r.rdType != nil {
		localVarQueryParams.Add("rd.type", parameterToString(*r.rdType, ""))
	}
	if r.adminValueFormat != nil {
		localVarQueryParams.Add("admin-value.Format", parameterToString(*r.adminValueFormat, ""))
	}
	if r.adminValueValue != nil {
		localVarQueryParams.Add("admin-value.Value", parameterToString(*r.adminValueValue, ""))
	}
	if r.rdAssignedValue != nil {
		localVarQueryParams.Add("rd.assigned-value", parameterToString(*r.rdAssignedValue, ""))
	}
	if r.specDefaultIpamPolicy != nil {
		localVarQueryParams.Add("spec.default-ipam-policy", parameterToString(*r.specDefaultIpamPolicy, ""))
	}
	if r.statusId != nil {
		localVarQueryParams.Add("status.id", parameterToString(*r.statusId, ""))
	}
	if r.statusRouteTable != nil {
		localVarQueryParams.Add("status.route-table", parameterToString(*r.statusRouteTable, ""))
	}
	if r.rdType2 != nil {
		localVarQueryParams.Add("rd.type", parameterToString(*r.rdType2, ""))
	}
	if r.adminValueFormat2 != nil {
		localVarQueryParams.Add("admin-value.Format", parameterToString(*r.adminValueFormat2, ""))
	}
	if r.adminValueValue2 != nil {
		localVarQueryParams.Add("admin-value.Value", parameterToString(*r.adminValueValue2, ""))
	}
	if r.rdAssignedValue2 != nil {
		localVarQueryParams.Add("rd.assigned-value", parameterToString(*r.rdAssignedValue2, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetVirtualRouter1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetVirtualRouterPeeringGroupRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	tKind *string
	tApiVersion *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) TKind(tKind string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) TApiVersion(tApiVersion string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) MetaNamespace(metaNamespace string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) MetaGenerationId(metaGenerationId string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) MetaUuid(metaUuid string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) MetaModTime(metaModTime time.Time) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) MetaSelfLink(metaSelfLink string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetVirtualRouterPeeringGroupRequest) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.GetVirtualRouterPeeringGroupExecute(r)
}

/*
 * GetVirtualRouterPeeringGroup Get VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkGetVirtualRouterPeeringGroupRequest
 */
func (a *NetworkV1ApiService) GetVirtualRouterPeeringGroup(ctx _context.Context, oTenant string, oName string) ApiNetworkGetVirtualRouterPeeringGroupRequest {
	return ApiNetworkGetVirtualRouterPeeringGroupRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) GetVirtualRouterPeeringGroupExecute(r ApiNetworkGetVirtualRouterPeeringGroupRequest) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetVirtualRouterPeeringGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtual-router-peering-groups/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetVirtualRouterPeeringGroupExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkGetVirtualRouterPeeringGroup1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	tKind *string
	tApiVersion *string
	metaTenant *string
	metaNamespace *string
	metaGenerationId *string
	metaResourceVersion *string
	metaUuid *string
	metaCreationTime *time.Time
	metaModTime *time.Time
	metaSelfLink *string
	propagationStatusGenerationId *string
	propagationStatusUpdated *int32
	propagationStatusPending *int32
	propagationStatusMinVersion *string
	propagationStatusStatus *string
	propagationStatusPendingDscs *[]string
}

func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) TKind(tKind string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.tKind = &tKind
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) TApiVersion(tApiVersion string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.tApiVersion = &tApiVersion
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) MetaTenant(metaTenant string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.metaTenant = &metaTenant
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) MetaNamespace(metaNamespace string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.metaNamespace = &metaNamespace
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) MetaGenerationId(metaGenerationId string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.metaGenerationId = &metaGenerationId
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) MetaResourceVersion(metaResourceVersion string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.metaResourceVersion = &metaResourceVersion
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) MetaUuid(metaUuid string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.metaUuid = &metaUuid
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) MetaCreationTime(metaCreationTime time.Time) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.metaCreationTime = &metaCreationTime
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) MetaModTime(metaModTime time.Time) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.metaModTime = &metaModTime
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) MetaSelfLink(metaSelfLink string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.metaSelfLink = &metaSelfLink
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) PropagationStatusGenerationId(propagationStatusGenerationId string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.propagationStatusGenerationId = &propagationStatusGenerationId
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) PropagationStatusUpdated(propagationStatusUpdated int32) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.propagationStatusUpdated = &propagationStatusUpdated
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) PropagationStatusPending(propagationStatusPending int32) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.propagationStatusPending = &propagationStatusPending
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) PropagationStatusMinVersion(propagationStatusMinVersion string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.propagationStatusMinVersion = &propagationStatusMinVersion
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) PropagationStatusStatus(propagationStatusStatus string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.propagationStatusStatus = &propagationStatusStatus
	return r
}
func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) PropagationStatusPendingDscs(propagationStatusPendingDscs []string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	r.propagationStatusPendingDscs = &propagationStatusPendingDscs
	return r
}

func (r ApiNetworkGetVirtualRouterPeeringGroup1Request) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.GetVirtualRouterPeeringGroup1Execute(r)
}

/*
 * GetVirtualRouterPeeringGroup1 Get VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkGetVirtualRouterPeeringGroup1Request
 */
func (a *NetworkV1ApiService) GetVirtualRouterPeeringGroup1(ctx _context.Context, oName string) ApiNetworkGetVirtualRouterPeeringGroup1Request {
	return ApiNetworkGetVirtualRouterPeeringGroup1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) GetVirtualRouterPeeringGroup1Execute(r ApiNetworkGetVirtualRouterPeeringGroup1Request) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.GetVirtualRouterPeeringGroup1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtual-router-peering-groups/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tKind != nil {
		localVarQueryParams.Add("T.kind", parameterToString(*r.tKind, ""))
	}
	if r.tApiVersion != nil {
		localVarQueryParams.Add("T.api-version", parameterToString(*r.tApiVersion, ""))
	}
	if r.metaTenant != nil {
		localVarQueryParams.Add("meta.tenant", parameterToString(*r.metaTenant, ""))
	}
	if r.metaNamespace != nil {
		localVarQueryParams.Add("meta.namespace", parameterToString(*r.metaNamespace, ""))
	}
	if r.metaGenerationId != nil {
		localVarQueryParams.Add("meta.generation-id", parameterToString(*r.metaGenerationId, ""))
	}
	if r.metaResourceVersion != nil {
		localVarQueryParams.Add("meta.resource-version", parameterToString(*r.metaResourceVersion, ""))
	}
	if r.metaUuid != nil {
		localVarQueryParams.Add("meta.uuid", parameterToString(*r.metaUuid, ""))
	}
	if r.metaCreationTime != nil {
		localVarQueryParams.Add("meta.creation-time", parameterToString(*r.metaCreationTime, ""))
	}
	if r.metaModTime != nil {
		localVarQueryParams.Add("meta.mod-time", parameterToString(*r.metaModTime, ""))
	}
	if r.metaSelfLink != nil {
		localVarQueryParams.Add("meta.self-link", parameterToString(*r.metaSelfLink, ""))
	}
	if r.propagationStatusGenerationId != nil {
		localVarQueryParams.Add("propagation-status.generation-id", parameterToString(*r.propagationStatusGenerationId, ""))
	}
	if r.propagationStatusUpdated != nil {
		localVarQueryParams.Add("propagation-status.updated", parameterToString(*r.propagationStatusUpdated, ""))
	}
	if r.propagationStatusPending != nil {
		localVarQueryParams.Add("propagation-status.pending", parameterToString(*r.propagationStatusPending, ""))
	}
	if r.propagationStatusMinVersion != nil {
		localVarQueryParams.Add("propagation-status.min-version", parameterToString(*r.propagationStatusMinVersion, ""))
	}
	if r.propagationStatusStatus != nil {
		localVarQueryParams.Add("propagation-status.status", parameterToString(*r.propagationStatusStatus, ""))
	}
	if r.propagationStatusPendingDscs != nil {
		localVarQueryParams.Add("propagation-status.pending-dscs", parameterToString(*r.propagationStatusPendingDscs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.GetVirtualRouterPeeringGroup1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelIPAMPolicyRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelIPAMPolicyRequest) Body(body ApiLabel) ApiNetworkLabelIPAMPolicyRequest {
	r.body = &body
	return r
}

func (r ApiNetworkLabelIPAMPolicyRequest) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelIPAMPolicyExecute(r)
}

/*
 * LabelIPAMPolicy Label IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkLabelIPAMPolicyRequest
 */
func (a *NetworkV1ApiService) LabelIPAMPolicy(ctx _context.Context, oTenant string, oName string) ApiNetworkLabelIPAMPolicyRequest {
	return ApiNetworkLabelIPAMPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) LabelIPAMPolicyExecute(r ApiNetworkLabelIPAMPolicyRequest) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelIPAMPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/ipam-policies/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelIPAMPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelIPAMPolicy1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelIPAMPolicy1Request) Body(body ApiLabel) ApiNetworkLabelIPAMPolicy1Request {
	r.body = &body
	return r
}

func (r ApiNetworkLabelIPAMPolicy1Request) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.LabelIPAMPolicy1Execute(r)
}

/*
 * LabelIPAMPolicy1 Label IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkLabelIPAMPolicy1Request
 */
func (a *NetworkV1ApiService) LabelIPAMPolicy1(ctx _context.Context, oName string) ApiNetworkLabelIPAMPolicy1Request {
	return ApiNetworkLabelIPAMPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) LabelIPAMPolicy1Execute(r ApiNetworkLabelIPAMPolicy1Request) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelIPAMPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/ipam-policies/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelIPAMPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelNetworkRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelNetworkRequest) Body(body ApiLabel) ApiNetworkLabelNetworkRequest {
	r.body = &body
	return r
}

func (r ApiNetworkLabelNetworkRequest) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.LabelNetworkExecute(r)
}

/*
 * LabelNetwork Label Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkLabelNetworkRequest
 */
func (a *NetworkV1ApiService) LabelNetwork(ctx _context.Context, oTenant string, oName string) ApiNetworkLabelNetworkRequest {
	return ApiNetworkLabelNetworkRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) LabelNetworkExecute(r ApiNetworkLabelNetworkRequest) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelNetwork")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/networks/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelNetworkExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelNetwork1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelNetwork1Request) Body(body ApiLabel) ApiNetworkLabelNetwork1Request {
	r.body = &body
	return r
}

func (r ApiNetworkLabelNetwork1Request) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.LabelNetwork1Execute(r)
}

/*
 * LabelNetwork1 Label Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkLabelNetwork1Request
 */
func (a *NetworkV1ApiService) LabelNetwork1(ctx _context.Context, oName string) ApiNetworkLabelNetwork1Request {
	return ApiNetworkLabelNetwork1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) LabelNetwork1Execute(r ApiNetworkLabelNetwork1Request) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelNetwork1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networks/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelNetwork1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelNetworkInterfaceRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelNetworkInterfaceRequest) Body(body ApiLabel) ApiNetworkLabelNetworkInterfaceRequest {
	r.body = &body
	return r
}

func (r ApiNetworkLabelNetworkInterfaceRequest) Execute() (NetworkNetworkInterface, *_nethttp.Response, error) {
	return r.ApiService.LabelNetworkInterfaceExecute(r)
}

/*
 * LabelNetworkInterface Label NetworkInterface object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkLabelNetworkInterfaceRequest
 */
func (a *NetworkV1ApiService) LabelNetworkInterface(ctx _context.Context, oName string) ApiNetworkLabelNetworkInterfaceRequest {
	return ApiNetworkLabelNetworkInterfaceRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetworkInterface
 */
func (a *NetworkV1ApiService) LabelNetworkInterfaceExecute(r ApiNetworkLabelNetworkInterfaceRequest) (NetworkNetworkInterface, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetworkInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networkinterfaces/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelNetworkInterfaceExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelPolicerProfileRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelPolicerProfileRequest) Body(body ApiLabel) ApiNetworkLabelPolicerProfileRequest {
	r.body = &body
	return r
}

func (r ApiNetworkLabelPolicerProfileRequest) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.LabelPolicerProfileExecute(r)
}

/*
 * LabelPolicerProfile Label PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkLabelPolicerProfileRequest
 */
func (a *NetworkV1ApiService) LabelPolicerProfile(ctx _context.Context, oTenant string, oName string) ApiNetworkLabelPolicerProfileRequest {
	return ApiNetworkLabelPolicerProfileRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) LabelPolicerProfileExecute(r ApiNetworkLabelPolicerProfileRequest) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelPolicerProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/policer-profile/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelPolicerProfileExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelPolicerProfile1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelPolicerProfile1Request) Body(body ApiLabel) ApiNetworkLabelPolicerProfile1Request {
	r.body = &body
	return r
}

func (r ApiNetworkLabelPolicerProfile1Request) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.LabelPolicerProfile1Execute(r)
}

/*
 * LabelPolicerProfile1 Label PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkLabelPolicerProfile1Request
 */
func (a *NetworkV1ApiService) LabelPolicerProfile1(ctx _context.Context, oName string) ApiNetworkLabelPolicerProfile1Request {
	return ApiNetworkLabelPolicerProfile1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) LabelPolicerProfile1Execute(r ApiNetworkLabelPolicerProfile1Request) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelPolicerProfile1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/policer-profile/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelPolicerProfile1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelRoutingConfigRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelRoutingConfigRequest) Body(body ApiLabel) ApiNetworkLabelRoutingConfigRequest {
	r.body = &body
	return r
}

func (r ApiNetworkLabelRoutingConfigRequest) Execute() (NetworkRoutingConfig, *_nethttp.Response, error) {
	return r.ApiService.LabelRoutingConfigExecute(r)
}

/*
 * LabelRoutingConfig Label RoutingConfig object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkLabelRoutingConfigRequest
 */
func (a *NetworkV1ApiService) LabelRoutingConfig(ctx _context.Context, oName string) ApiNetworkLabelRoutingConfigRequest {
	return ApiNetworkLabelRoutingConfigRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkRoutingConfig
 */
func (a *NetworkV1ApiService) LabelRoutingConfigExecute(r ApiNetworkLabelRoutingConfigRequest) (NetworkRoutingConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRoutingConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelRoutingConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/routing-config/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelRoutingConfigExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelVirtualRouterRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelVirtualRouterRequest) Body(body ApiLabel) ApiNetworkLabelVirtualRouterRequest {
	r.body = &body
	return r
}

func (r ApiNetworkLabelVirtualRouterRequest) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.LabelVirtualRouterExecute(r)
}

/*
 * LabelVirtualRouter Label VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkLabelVirtualRouterRequest
 */
func (a *NetworkV1ApiService) LabelVirtualRouter(ctx _context.Context, oTenant string, oName string) ApiNetworkLabelVirtualRouterRequest {
	return ApiNetworkLabelVirtualRouterRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) LabelVirtualRouterExecute(r ApiNetworkLabelVirtualRouterRequest) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelVirtualRouter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtualrouters/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelVirtualRouterExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelVirtualRouter1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelVirtualRouter1Request) Body(body ApiLabel) ApiNetworkLabelVirtualRouter1Request {
	r.body = &body
	return r
}

func (r ApiNetworkLabelVirtualRouter1Request) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.LabelVirtualRouter1Execute(r)
}

/*
 * LabelVirtualRouter1 Label VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkLabelVirtualRouter1Request
 */
func (a *NetworkV1ApiService) LabelVirtualRouter1(ctx _context.Context, oName string) ApiNetworkLabelVirtualRouter1Request {
	return ApiNetworkLabelVirtualRouter1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) LabelVirtualRouter1Execute(r ApiNetworkLabelVirtualRouter1Request) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelVirtualRouter1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtualrouters/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelVirtualRouter1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelVirtualRouterPeeringGroupRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelVirtualRouterPeeringGroupRequest) Body(body ApiLabel) ApiNetworkLabelVirtualRouterPeeringGroupRequest {
	r.body = &body
	return r
}

func (r ApiNetworkLabelVirtualRouterPeeringGroupRequest) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.LabelVirtualRouterPeeringGroupExecute(r)
}

/*
 * LabelVirtualRouterPeeringGroup Label VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkLabelVirtualRouterPeeringGroupRequest
 */
func (a *NetworkV1ApiService) LabelVirtualRouterPeeringGroup(ctx _context.Context, oTenant string, oName string) ApiNetworkLabelVirtualRouterPeeringGroupRequest {
	return ApiNetworkLabelVirtualRouterPeeringGroupRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) LabelVirtualRouterPeeringGroupExecute(r ApiNetworkLabelVirtualRouterPeeringGroupRequest) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelVirtualRouterPeeringGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtual-router-peering-groups/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelVirtualRouterPeeringGroupExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLabelVirtualRouterPeeringGroup1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *ApiLabel
}

func (r ApiNetworkLabelVirtualRouterPeeringGroup1Request) Body(body ApiLabel) ApiNetworkLabelVirtualRouterPeeringGroup1Request {
	r.body = &body
	return r
}

func (r ApiNetworkLabelVirtualRouterPeeringGroup1Request) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.LabelVirtualRouterPeeringGroup1Execute(r)
}

/*
 * LabelVirtualRouterPeeringGroup1 Label VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkLabelVirtualRouterPeeringGroup1Request
 */
func (a *NetworkV1ApiService) LabelVirtualRouterPeeringGroup1(ctx _context.Context, oName string) ApiNetworkLabelVirtualRouterPeeringGroup1Request {
	return ApiNetworkLabelVirtualRouterPeeringGroup1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) LabelVirtualRouterPeeringGroup1Execute(r ApiNetworkLabelVirtualRouterPeeringGroup1Request) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.LabelVirtualRouterPeeringGroup1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtual-router-peering-groups/{O.Name}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.LabelVirtualRouterPeeringGroup1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListIPAMPolicyRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListIPAMPolicyRequest) OName(oName string) ApiNetworkListIPAMPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) ONamespace(oNamespace string) ApiNetworkListIPAMPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) OGenerationId(oGenerationId string) ApiNetworkListIPAMPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) OResourceVersion(oResourceVersion string) ApiNetworkListIPAMPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) OUuid(oUuid string) ApiNetworkListIPAMPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) OCreationTime(oCreationTime time.Time) ApiNetworkListIPAMPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) OModTime(oModTime time.Time) ApiNetworkListIPAMPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) OSelfLink(oSelfLink string) ApiNetworkListIPAMPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) LabelSelector(labelSelector string) ApiNetworkListIPAMPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) FieldSelector(fieldSelector string) ApiNetworkListIPAMPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListIPAMPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) From(from int32) ApiNetworkListIPAMPolicyRequest {
	r.from = &from
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) MaxResults(maxResults int32) ApiNetworkListIPAMPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) SortOrder(sortOrder string) ApiNetworkListIPAMPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListIPAMPolicyRequest) MetaOnly(metaOnly bool) ApiNetworkListIPAMPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListIPAMPolicyRequest) Execute() (NetworkIPAMPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListIPAMPolicyExecute(r)
}

/*
 * ListIPAMPolicy List IPAMPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkListIPAMPolicyRequest
 */
func (a *NetworkV1ApiService) ListIPAMPolicy(ctx _context.Context, oTenant string) ApiNetworkListIPAMPolicyRequest {
	return ApiNetworkListIPAMPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicyList
 */
func (a *NetworkV1ApiService) ListIPAMPolicyExecute(r ApiNetworkListIPAMPolicyRequest) (NetworkIPAMPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListIPAMPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/ipam-policies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListIPAMPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListIPAMPolicy1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListIPAMPolicy1Request) OName(oName string) ApiNetworkListIPAMPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) OTenant(oTenant string) ApiNetworkListIPAMPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) ONamespace(oNamespace string) ApiNetworkListIPAMPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) OGenerationId(oGenerationId string) ApiNetworkListIPAMPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) OResourceVersion(oResourceVersion string) ApiNetworkListIPAMPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) OUuid(oUuid string) ApiNetworkListIPAMPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) OCreationTime(oCreationTime time.Time) ApiNetworkListIPAMPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) OModTime(oModTime time.Time) ApiNetworkListIPAMPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) OSelfLink(oSelfLink string) ApiNetworkListIPAMPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) LabelSelector(labelSelector string) ApiNetworkListIPAMPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) FieldSelector(fieldSelector string) ApiNetworkListIPAMPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListIPAMPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) From(from int32) ApiNetworkListIPAMPolicy1Request {
	r.from = &from
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) MaxResults(maxResults int32) ApiNetworkListIPAMPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) SortOrder(sortOrder string) ApiNetworkListIPAMPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListIPAMPolicy1Request) MetaOnly(metaOnly bool) ApiNetworkListIPAMPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListIPAMPolicy1Request) Execute() (NetworkIPAMPolicyList, *_nethttp.Response, error) {
	return r.ApiService.ListIPAMPolicy1Execute(r)
}

/*
 * ListIPAMPolicy1 List IPAMPolicy objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkListIPAMPolicy1Request
 */
func (a *NetworkV1ApiService) ListIPAMPolicy1(ctx _context.Context) ApiNetworkListIPAMPolicy1Request {
	return ApiNetworkListIPAMPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicyList
 */
func (a *NetworkV1ApiService) ListIPAMPolicy1Execute(r ApiNetworkListIPAMPolicy1Request) (NetworkIPAMPolicyList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListIPAMPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/ipam-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListIPAMPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListNetworkRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListNetworkRequest) OName(oName string) ApiNetworkListNetworkRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkListNetworkRequest) ONamespace(oNamespace string) ApiNetworkListNetworkRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListNetworkRequest) OGenerationId(oGenerationId string) ApiNetworkListNetworkRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListNetworkRequest) OResourceVersion(oResourceVersion string) ApiNetworkListNetworkRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListNetworkRequest) OUuid(oUuid string) ApiNetworkListNetworkRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListNetworkRequest) OCreationTime(oCreationTime time.Time) ApiNetworkListNetworkRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListNetworkRequest) OModTime(oModTime time.Time) ApiNetworkListNetworkRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListNetworkRequest) OSelfLink(oSelfLink string) ApiNetworkListNetworkRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListNetworkRequest) LabelSelector(labelSelector string) ApiNetworkListNetworkRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListNetworkRequest) FieldSelector(fieldSelector string) ApiNetworkListNetworkRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListNetworkRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListNetworkRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListNetworkRequest) From(from int32) ApiNetworkListNetworkRequest {
	r.from = &from
	return r
}
func (r ApiNetworkListNetworkRequest) MaxResults(maxResults int32) ApiNetworkListNetworkRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListNetworkRequest) SortOrder(sortOrder string) ApiNetworkListNetworkRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListNetworkRequest) MetaOnly(metaOnly bool) ApiNetworkListNetworkRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListNetworkRequest) Execute() (NetworkNetworkList, *_nethttp.Response, error) {
	return r.ApiService.ListNetworkExecute(r)
}

/*
 * ListNetwork List Network objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkListNetworkRequest
 */
func (a *NetworkV1ApiService) ListNetwork(ctx _context.Context, oTenant string) ApiNetworkListNetworkRequest {
	return ApiNetworkListNetworkRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetworkList
 */
func (a *NetworkV1ApiService) ListNetworkExecute(r ApiNetworkListNetworkRequest) (NetworkNetworkList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetworkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListNetwork")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/networks"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListNetworkExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListNetwork1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListNetwork1Request) OName(oName string) ApiNetworkListNetwork1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkListNetwork1Request) OTenant(oTenant string) ApiNetworkListNetwork1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkListNetwork1Request) ONamespace(oNamespace string) ApiNetworkListNetwork1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListNetwork1Request) OGenerationId(oGenerationId string) ApiNetworkListNetwork1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListNetwork1Request) OResourceVersion(oResourceVersion string) ApiNetworkListNetwork1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListNetwork1Request) OUuid(oUuid string) ApiNetworkListNetwork1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListNetwork1Request) OCreationTime(oCreationTime time.Time) ApiNetworkListNetwork1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListNetwork1Request) OModTime(oModTime time.Time) ApiNetworkListNetwork1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListNetwork1Request) OSelfLink(oSelfLink string) ApiNetworkListNetwork1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListNetwork1Request) LabelSelector(labelSelector string) ApiNetworkListNetwork1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListNetwork1Request) FieldSelector(fieldSelector string) ApiNetworkListNetwork1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListNetwork1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListNetwork1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListNetwork1Request) From(from int32) ApiNetworkListNetwork1Request {
	r.from = &from
	return r
}
func (r ApiNetworkListNetwork1Request) MaxResults(maxResults int32) ApiNetworkListNetwork1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListNetwork1Request) SortOrder(sortOrder string) ApiNetworkListNetwork1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListNetwork1Request) MetaOnly(metaOnly bool) ApiNetworkListNetwork1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListNetwork1Request) Execute() (NetworkNetworkList, *_nethttp.Response, error) {
	return r.ApiService.ListNetwork1Execute(r)
}

/*
 * ListNetwork1 List Network objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkListNetwork1Request
 */
func (a *NetworkV1ApiService) ListNetwork1(ctx _context.Context) ApiNetworkListNetwork1Request {
	return ApiNetworkListNetwork1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetworkList
 */
func (a *NetworkV1ApiService) ListNetwork1Execute(r ApiNetworkListNetwork1Request) (NetworkNetworkList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetworkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListNetwork1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListNetwork1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListNetworkInterfaceRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListNetworkInterfaceRequest) OName(oName string) ApiNetworkListNetworkInterfaceRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) OTenant(oTenant string) ApiNetworkListNetworkInterfaceRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) ONamespace(oNamespace string) ApiNetworkListNetworkInterfaceRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) OGenerationId(oGenerationId string) ApiNetworkListNetworkInterfaceRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) OResourceVersion(oResourceVersion string) ApiNetworkListNetworkInterfaceRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) OUuid(oUuid string) ApiNetworkListNetworkInterfaceRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) OCreationTime(oCreationTime time.Time) ApiNetworkListNetworkInterfaceRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) OModTime(oModTime time.Time) ApiNetworkListNetworkInterfaceRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) OSelfLink(oSelfLink string) ApiNetworkListNetworkInterfaceRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) LabelSelector(labelSelector string) ApiNetworkListNetworkInterfaceRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) FieldSelector(fieldSelector string) ApiNetworkListNetworkInterfaceRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListNetworkInterfaceRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) From(from int32) ApiNetworkListNetworkInterfaceRequest {
	r.from = &from
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) MaxResults(maxResults int32) ApiNetworkListNetworkInterfaceRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) SortOrder(sortOrder string) ApiNetworkListNetworkInterfaceRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListNetworkInterfaceRequest) MetaOnly(metaOnly bool) ApiNetworkListNetworkInterfaceRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListNetworkInterfaceRequest) Execute() (NetworkNetworkInterfaceList, *_nethttp.Response, error) {
	return r.ApiService.ListNetworkInterfaceExecute(r)
}

/*
 * ListNetworkInterface List NetworkInterface objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkListNetworkInterfaceRequest
 */
func (a *NetworkV1ApiService) ListNetworkInterface(ctx _context.Context) ApiNetworkListNetworkInterfaceRequest {
	return ApiNetworkListNetworkInterfaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetworkInterfaceList
 */
func (a *NetworkV1ApiService) ListNetworkInterfaceExecute(r ApiNetworkListNetworkInterfaceRequest) (NetworkNetworkInterfaceList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetworkInterfaceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networkinterfaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListNetworkInterfaceExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListPolicerProfileRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListPolicerProfileRequest) OName(oName string) ApiNetworkListPolicerProfileRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkListPolicerProfileRequest) ONamespace(oNamespace string) ApiNetworkListPolicerProfileRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListPolicerProfileRequest) OGenerationId(oGenerationId string) ApiNetworkListPolicerProfileRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListPolicerProfileRequest) OResourceVersion(oResourceVersion string) ApiNetworkListPolicerProfileRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListPolicerProfileRequest) OUuid(oUuid string) ApiNetworkListPolicerProfileRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListPolicerProfileRequest) OCreationTime(oCreationTime time.Time) ApiNetworkListPolicerProfileRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListPolicerProfileRequest) OModTime(oModTime time.Time) ApiNetworkListPolicerProfileRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListPolicerProfileRequest) OSelfLink(oSelfLink string) ApiNetworkListPolicerProfileRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListPolicerProfileRequest) LabelSelector(labelSelector string) ApiNetworkListPolicerProfileRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListPolicerProfileRequest) FieldSelector(fieldSelector string) ApiNetworkListPolicerProfileRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListPolicerProfileRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListPolicerProfileRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListPolicerProfileRequest) From(from int32) ApiNetworkListPolicerProfileRequest {
	r.from = &from
	return r
}
func (r ApiNetworkListPolicerProfileRequest) MaxResults(maxResults int32) ApiNetworkListPolicerProfileRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListPolicerProfileRequest) SortOrder(sortOrder string) ApiNetworkListPolicerProfileRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListPolicerProfileRequest) MetaOnly(metaOnly bool) ApiNetworkListPolicerProfileRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListPolicerProfileRequest) Execute() (NetworkPolicerProfileList, *_nethttp.Response, error) {
	return r.ApiService.ListPolicerProfileExecute(r)
}

/*
 * ListPolicerProfile List PolicerProfile objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkListPolicerProfileRequest
 */
func (a *NetworkV1ApiService) ListPolicerProfile(ctx _context.Context, oTenant string) ApiNetworkListPolicerProfileRequest {
	return ApiNetworkListPolicerProfileRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfileList
 */
func (a *NetworkV1ApiService) ListPolicerProfileExecute(r ApiNetworkListPolicerProfileRequest) (NetworkPolicerProfileList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfileList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListPolicerProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/policer-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListPolicerProfileExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListPolicerProfile1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListPolicerProfile1Request) OName(oName string) ApiNetworkListPolicerProfile1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkListPolicerProfile1Request) OTenant(oTenant string) ApiNetworkListPolicerProfile1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkListPolicerProfile1Request) ONamespace(oNamespace string) ApiNetworkListPolicerProfile1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListPolicerProfile1Request) OGenerationId(oGenerationId string) ApiNetworkListPolicerProfile1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListPolicerProfile1Request) OResourceVersion(oResourceVersion string) ApiNetworkListPolicerProfile1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListPolicerProfile1Request) OUuid(oUuid string) ApiNetworkListPolicerProfile1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListPolicerProfile1Request) OCreationTime(oCreationTime time.Time) ApiNetworkListPolicerProfile1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListPolicerProfile1Request) OModTime(oModTime time.Time) ApiNetworkListPolicerProfile1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListPolicerProfile1Request) OSelfLink(oSelfLink string) ApiNetworkListPolicerProfile1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListPolicerProfile1Request) LabelSelector(labelSelector string) ApiNetworkListPolicerProfile1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListPolicerProfile1Request) FieldSelector(fieldSelector string) ApiNetworkListPolicerProfile1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListPolicerProfile1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListPolicerProfile1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListPolicerProfile1Request) From(from int32) ApiNetworkListPolicerProfile1Request {
	r.from = &from
	return r
}
func (r ApiNetworkListPolicerProfile1Request) MaxResults(maxResults int32) ApiNetworkListPolicerProfile1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListPolicerProfile1Request) SortOrder(sortOrder string) ApiNetworkListPolicerProfile1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListPolicerProfile1Request) MetaOnly(metaOnly bool) ApiNetworkListPolicerProfile1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListPolicerProfile1Request) Execute() (NetworkPolicerProfileList, *_nethttp.Response, error) {
	return r.ApiService.ListPolicerProfile1Execute(r)
}

/*
 * ListPolicerProfile1 List PolicerProfile objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkListPolicerProfile1Request
 */
func (a *NetworkV1ApiService) ListPolicerProfile1(ctx _context.Context) ApiNetworkListPolicerProfile1Request {
	return ApiNetworkListPolicerProfile1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfileList
 */
func (a *NetworkV1ApiService) ListPolicerProfile1Execute(r ApiNetworkListPolicerProfile1Request) (NetworkPolicerProfileList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfileList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListPolicerProfile1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/policer-profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListPolicerProfile1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListRouteTableRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListRouteTableRequest) OName(oName string) ApiNetworkListRouteTableRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkListRouteTableRequest) ONamespace(oNamespace string) ApiNetworkListRouteTableRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListRouteTableRequest) OGenerationId(oGenerationId string) ApiNetworkListRouteTableRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListRouteTableRequest) OResourceVersion(oResourceVersion string) ApiNetworkListRouteTableRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListRouteTableRequest) OUuid(oUuid string) ApiNetworkListRouteTableRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListRouteTableRequest) OCreationTime(oCreationTime time.Time) ApiNetworkListRouteTableRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListRouteTableRequest) OModTime(oModTime time.Time) ApiNetworkListRouteTableRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListRouteTableRequest) OSelfLink(oSelfLink string) ApiNetworkListRouteTableRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListRouteTableRequest) LabelSelector(labelSelector string) ApiNetworkListRouteTableRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListRouteTableRequest) FieldSelector(fieldSelector string) ApiNetworkListRouteTableRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListRouteTableRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListRouteTableRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListRouteTableRequest) From(from int32) ApiNetworkListRouteTableRequest {
	r.from = &from
	return r
}
func (r ApiNetworkListRouteTableRequest) MaxResults(maxResults int32) ApiNetworkListRouteTableRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListRouteTableRequest) SortOrder(sortOrder string) ApiNetworkListRouteTableRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListRouteTableRequest) MetaOnly(metaOnly bool) ApiNetworkListRouteTableRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListRouteTableRequest) Execute() (NetworkRouteTableList, *_nethttp.Response, error) {
	return r.ApiService.ListRouteTableExecute(r)
}

/*
 * ListRouteTable List RouteTable objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkListRouteTableRequest
 */
func (a *NetworkV1ApiService) ListRouteTable(ctx _context.Context, oTenant string) ApiNetworkListRouteTableRequest {
	return ApiNetworkListRouteTableRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkRouteTableList
 */
func (a *NetworkV1ApiService) ListRouteTableExecute(r ApiNetworkListRouteTableRequest) (NetworkRouteTableList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRouteTableList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListRouteTable")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/route-tables"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListRouteTableExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListRouteTable1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListRouteTable1Request) OName(oName string) ApiNetworkListRouteTable1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkListRouteTable1Request) OTenant(oTenant string) ApiNetworkListRouteTable1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkListRouteTable1Request) ONamespace(oNamespace string) ApiNetworkListRouteTable1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListRouteTable1Request) OGenerationId(oGenerationId string) ApiNetworkListRouteTable1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListRouteTable1Request) OResourceVersion(oResourceVersion string) ApiNetworkListRouteTable1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListRouteTable1Request) OUuid(oUuid string) ApiNetworkListRouteTable1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListRouteTable1Request) OCreationTime(oCreationTime time.Time) ApiNetworkListRouteTable1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListRouteTable1Request) OModTime(oModTime time.Time) ApiNetworkListRouteTable1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListRouteTable1Request) OSelfLink(oSelfLink string) ApiNetworkListRouteTable1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListRouteTable1Request) LabelSelector(labelSelector string) ApiNetworkListRouteTable1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListRouteTable1Request) FieldSelector(fieldSelector string) ApiNetworkListRouteTable1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListRouteTable1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListRouteTable1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListRouteTable1Request) From(from int32) ApiNetworkListRouteTable1Request {
	r.from = &from
	return r
}
func (r ApiNetworkListRouteTable1Request) MaxResults(maxResults int32) ApiNetworkListRouteTable1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListRouteTable1Request) SortOrder(sortOrder string) ApiNetworkListRouteTable1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListRouteTable1Request) MetaOnly(metaOnly bool) ApiNetworkListRouteTable1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListRouteTable1Request) Execute() (NetworkRouteTableList, *_nethttp.Response, error) {
	return r.ApiService.ListRouteTable1Execute(r)
}

/*
 * ListRouteTable1 List RouteTable objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkListRouteTable1Request
 */
func (a *NetworkV1ApiService) ListRouteTable1(ctx _context.Context) ApiNetworkListRouteTable1Request {
	return ApiNetworkListRouteTable1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkRouteTableList
 */
func (a *NetworkV1ApiService) ListRouteTable1Execute(r ApiNetworkListRouteTable1Request) (NetworkRouteTableList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRouteTableList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListRouteTable1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/route-tables"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListRouteTable1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListRoutingConfigRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListRoutingConfigRequest) OName(oName string) ApiNetworkListRoutingConfigRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkListRoutingConfigRequest) OTenant(oTenant string) ApiNetworkListRoutingConfigRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkListRoutingConfigRequest) ONamespace(oNamespace string) ApiNetworkListRoutingConfigRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListRoutingConfigRequest) OGenerationId(oGenerationId string) ApiNetworkListRoutingConfigRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListRoutingConfigRequest) OResourceVersion(oResourceVersion string) ApiNetworkListRoutingConfigRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListRoutingConfigRequest) OUuid(oUuid string) ApiNetworkListRoutingConfigRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListRoutingConfigRequest) OCreationTime(oCreationTime time.Time) ApiNetworkListRoutingConfigRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListRoutingConfigRequest) OModTime(oModTime time.Time) ApiNetworkListRoutingConfigRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListRoutingConfigRequest) OSelfLink(oSelfLink string) ApiNetworkListRoutingConfigRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListRoutingConfigRequest) LabelSelector(labelSelector string) ApiNetworkListRoutingConfigRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListRoutingConfigRequest) FieldSelector(fieldSelector string) ApiNetworkListRoutingConfigRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListRoutingConfigRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListRoutingConfigRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListRoutingConfigRequest) From(from int32) ApiNetworkListRoutingConfigRequest {
	r.from = &from
	return r
}
func (r ApiNetworkListRoutingConfigRequest) MaxResults(maxResults int32) ApiNetworkListRoutingConfigRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListRoutingConfigRequest) SortOrder(sortOrder string) ApiNetworkListRoutingConfigRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListRoutingConfigRequest) MetaOnly(metaOnly bool) ApiNetworkListRoutingConfigRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListRoutingConfigRequest) Execute() (NetworkRoutingConfigList, *_nethttp.Response, error) {
	return r.ApiService.ListRoutingConfigExecute(r)
}

/*
 * ListRoutingConfig List RoutingConfig objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkListRoutingConfigRequest
 */
func (a *NetworkV1ApiService) ListRoutingConfig(ctx _context.Context) ApiNetworkListRoutingConfigRequest {
	return ApiNetworkListRoutingConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkRoutingConfigList
 */
func (a *NetworkV1ApiService) ListRoutingConfigExecute(r ApiNetworkListRoutingConfigRequest) (NetworkRoutingConfigList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRoutingConfigList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListRoutingConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/routing-config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListRoutingConfigExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListVirtualRouterRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListVirtualRouterRequest) OName(oName string) ApiNetworkListVirtualRouterRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkListVirtualRouterRequest) ONamespace(oNamespace string) ApiNetworkListVirtualRouterRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListVirtualRouterRequest) OGenerationId(oGenerationId string) ApiNetworkListVirtualRouterRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListVirtualRouterRequest) OResourceVersion(oResourceVersion string) ApiNetworkListVirtualRouterRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListVirtualRouterRequest) OUuid(oUuid string) ApiNetworkListVirtualRouterRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListVirtualRouterRequest) OCreationTime(oCreationTime time.Time) ApiNetworkListVirtualRouterRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListVirtualRouterRequest) OModTime(oModTime time.Time) ApiNetworkListVirtualRouterRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListVirtualRouterRequest) OSelfLink(oSelfLink string) ApiNetworkListVirtualRouterRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListVirtualRouterRequest) LabelSelector(labelSelector string) ApiNetworkListVirtualRouterRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListVirtualRouterRequest) FieldSelector(fieldSelector string) ApiNetworkListVirtualRouterRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListVirtualRouterRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListVirtualRouterRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListVirtualRouterRequest) From(from int32) ApiNetworkListVirtualRouterRequest {
	r.from = &from
	return r
}
func (r ApiNetworkListVirtualRouterRequest) MaxResults(maxResults int32) ApiNetworkListVirtualRouterRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListVirtualRouterRequest) SortOrder(sortOrder string) ApiNetworkListVirtualRouterRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListVirtualRouterRequest) MetaOnly(metaOnly bool) ApiNetworkListVirtualRouterRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListVirtualRouterRequest) Execute() (NetworkVirtualRouterList, *_nethttp.Response, error) {
	return r.ApiService.ListVirtualRouterExecute(r)
}

/*
 * ListVirtualRouter List VirtualRouter objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkListVirtualRouterRequest
 */
func (a *NetworkV1ApiService) ListVirtualRouter(ctx _context.Context, oTenant string) ApiNetworkListVirtualRouterRequest {
	return ApiNetworkListVirtualRouterRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterList
 */
func (a *NetworkV1ApiService) ListVirtualRouterExecute(r ApiNetworkListVirtualRouterRequest) (NetworkVirtualRouterList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListVirtualRouter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtualrouters"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListVirtualRouterExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListVirtualRouter1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListVirtualRouter1Request) OName(oName string) ApiNetworkListVirtualRouter1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkListVirtualRouter1Request) OTenant(oTenant string) ApiNetworkListVirtualRouter1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkListVirtualRouter1Request) ONamespace(oNamespace string) ApiNetworkListVirtualRouter1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListVirtualRouter1Request) OGenerationId(oGenerationId string) ApiNetworkListVirtualRouter1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListVirtualRouter1Request) OResourceVersion(oResourceVersion string) ApiNetworkListVirtualRouter1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListVirtualRouter1Request) OUuid(oUuid string) ApiNetworkListVirtualRouter1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListVirtualRouter1Request) OCreationTime(oCreationTime time.Time) ApiNetworkListVirtualRouter1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListVirtualRouter1Request) OModTime(oModTime time.Time) ApiNetworkListVirtualRouter1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListVirtualRouter1Request) OSelfLink(oSelfLink string) ApiNetworkListVirtualRouter1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListVirtualRouter1Request) LabelSelector(labelSelector string) ApiNetworkListVirtualRouter1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListVirtualRouter1Request) FieldSelector(fieldSelector string) ApiNetworkListVirtualRouter1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListVirtualRouter1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListVirtualRouter1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListVirtualRouter1Request) From(from int32) ApiNetworkListVirtualRouter1Request {
	r.from = &from
	return r
}
func (r ApiNetworkListVirtualRouter1Request) MaxResults(maxResults int32) ApiNetworkListVirtualRouter1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListVirtualRouter1Request) SortOrder(sortOrder string) ApiNetworkListVirtualRouter1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListVirtualRouter1Request) MetaOnly(metaOnly bool) ApiNetworkListVirtualRouter1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListVirtualRouter1Request) Execute() (NetworkVirtualRouterList, *_nethttp.Response, error) {
	return r.ApiService.ListVirtualRouter1Execute(r)
}

/*
 * ListVirtualRouter1 List VirtualRouter objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkListVirtualRouter1Request
 */
func (a *NetworkV1ApiService) ListVirtualRouter1(ctx _context.Context) ApiNetworkListVirtualRouter1Request {
	return ApiNetworkListVirtualRouter1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterList
 */
func (a *NetworkV1ApiService) ListVirtualRouter1Execute(r ApiNetworkListVirtualRouter1Request) (NetworkVirtualRouterList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListVirtualRouter1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtualrouters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListVirtualRouter1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListVirtualRouterPeeringGroupRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListVirtualRouterPeeringGroupRequest) OName(oName string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) ONamespace(oNamespace string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) OGenerationId(oGenerationId string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) OResourceVersion(oResourceVersion string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) OUuid(oUuid string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) OCreationTime(oCreationTime time.Time) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) OModTime(oModTime time.Time) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) OSelfLink(oSelfLink string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) LabelSelector(labelSelector string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) FieldSelector(fieldSelector string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) From(from int32) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.from = &from
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) MaxResults(maxResults int32) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) SortOrder(sortOrder string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroupRequest) MetaOnly(metaOnly bool) ApiNetworkListVirtualRouterPeeringGroupRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListVirtualRouterPeeringGroupRequest) Execute() (NetworkVirtualRouterPeeringGroupList, *_nethttp.Response, error) {
	return r.ApiService.ListVirtualRouterPeeringGroupExecute(r)
}

/*
 * ListVirtualRouterPeeringGroup List VirtualRouterPeeringGroup objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkListVirtualRouterPeeringGroupRequest
 */
func (a *NetworkV1ApiService) ListVirtualRouterPeeringGroup(ctx _context.Context, oTenant string) ApiNetworkListVirtualRouterPeeringGroupRequest {
	return ApiNetworkListVirtualRouterPeeringGroupRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroupList
 */
func (a *NetworkV1ApiService) ListVirtualRouterPeeringGroupExecute(r ApiNetworkListVirtualRouterPeeringGroupRequest) (NetworkVirtualRouterPeeringGroupList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListVirtualRouterPeeringGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtual-router-peering-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListVirtualRouterPeeringGroupExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkListVirtualRouterPeeringGroup1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkListVirtualRouterPeeringGroup1Request) OName(oName string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) OTenant(oTenant string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) ONamespace(oNamespace string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) OGenerationId(oGenerationId string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) OResourceVersion(oResourceVersion string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) OUuid(oUuid string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) OCreationTime(oCreationTime time.Time) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) OModTime(oModTime time.Time) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) OSelfLink(oSelfLink string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) LabelSelector(labelSelector string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) FieldSelector(fieldSelector string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) From(from int32) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.from = &from
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) MaxResults(maxResults int32) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) SortOrder(sortOrder string) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkListVirtualRouterPeeringGroup1Request) MetaOnly(metaOnly bool) ApiNetworkListVirtualRouterPeeringGroup1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkListVirtualRouterPeeringGroup1Request) Execute() (NetworkVirtualRouterPeeringGroupList, *_nethttp.Response, error) {
	return r.ApiService.ListVirtualRouterPeeringGroup1Execute(r)
}

/*
 * ListVirtualRouterPeeringGroup1 List VirtualRouterPeeringGroup objects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkListVirtualRouterPeeringGroup1Request
 */
func (a *NetworkV1ApiService) ListVirtualRouterPeeringGroup1(ctx _context.Context) ApiNetworkListVirtualRouterPeeringGroup1Request {
	return ApiNetworkListVirtualRouterPeeringGroup1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroupList
 */
func (a *NetworkV1ApiService) ListVirtualRouterPeeringGroup1Execute(r ApiNetworkListVirtualRouterPeeringGroup1Request) (NetworkVirtualRouterPeeringGroupList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.ListVirtualRouterPeeringGroup1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtual-router-peering-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.ListVirtualRouterPeeringGroup1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateIPAMPolicyRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *NetworkIPAMPolicy
}

func (r ApiNetworkUpdateIPAMPolicyRequest) Body(body NetworkIPAMPolicy) ApiNetworkUpdateIPAMPolicyRequest {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateIPAMPolicyRequest) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateIPAMPolicyExecute(r)
}

/*
 * UpdateIPAMPolicy Update IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkUpdateIPAMPolicyRequest
 */
func (a *NetworkV1ApiService) UpdateIPAMPolicy(ctx _context.Context, oTenant string, oName string) ApiNetworkUpdateIPAMPolicyRequest {
	return ApiNetworkUpdateIPAMPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) UpdateIPAMPolicyExecute(r ApiNetworkUpdateIPAMPolicyRequest) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateIPAMPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/ipam-policies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateIPAMPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateIPAMPolicy1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *NetworkIPAMPolicy
}

func (r ApiNetworkUpdateIPAMPolicy1Request) Body(body NetworkIPAMPolicy) ApiNetworkUpdateIPAMPolicy1Request {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateIPAMPolicy1Request) Execute() (NetworkIPAMPolicy, *_nethttp.Response, error) {
	return r.ApiService.UpdateIPAMPolicy1Execute(r)
}

/*
 * UpdateIPAMPolicy1 Update IPAMPolicy object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkUpdateIPAMPolicy1Request
 */
func (a *NetworkV1ApiService) UpdateIPAMPolicy1(ctx _context.Context, oName string) ApiNetworkUpdateIPAMPolicy1Request {
	return ApiNetworkUpdateIPAMPolicy1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkIPAMPolicy
 */
func (a *NetworkV1ApiService) UpdateIPAMPolicy1Execute(r ApiNetworkUpdateIPAMPolicy1Request) (NetworkIPAMPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkIPAMPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateIPAMPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/ipam-policies/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateIPAMPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateNetworkRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *NetworkNetwork
}

func (r ApiNetworkUpdateNetworkRequest) Body(body NetworkNetwork) ApiNetworkUpdateNetworkRequest {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateNetworkRequest) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.UpdateNetworkExecute(r)
}

/*
 * UpdateNetwork Update Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkUpdateNetworkRequest
 */
func (a *NetworkV1ApiService) UpdateNetwork(ctx _context.Context, oTenant string, oName string) ApiNetworkUpdateNetworkRequest {
	return ApiNetworkUpdateNetworkRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) UpdateNetworkExecute(r ApiNetworkUpdateNetworkRequest) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateNetwork")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/networks/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateNetworkExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateNetwork1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *NetworkNetwork
}

func (r ApiNetworkUpdateNetwork1Request) Body(body NetworkNetwork) ApiNetworkUpdateNetwork1Request {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateNetwork1Request) Execute() (NetworkNetwork, *_nethttp.Response, error) {
	return r.ApiService.UpdateNetwork1Execute(r)
}

/*
 * UpdateNetwork1 Update Network object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkUpdateNetwork1Request
 */
func (a *NetworkV1ApiService) UpdateNetwork1(ctx _context.Context, oName string) ApiNetworkUpdateNetwork1Request {
	return ApiNetworkUpdateNetwork1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetwork
 */
func (a *NetworkV1ApiService) UpdateNetwork1Execute(r ApiNetworkUpdateNetwork1Request) (NetworkNetwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateNetwork1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networks/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateNetwork1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateNetworkInterfaceRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *NetworkNetworkInterface
}

func (r ApiNetworkUpdateNetworkInterfaceRequest) Body(body NetworkNetworkInterface) ApiNetworkUpdateNetworkInterfaceRequest {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateNetworkInterfaceRequest) Execute() (NetworkNetworkInterface, *_nethttp.Response, error) {
	return r.ApiService.UpdateNetworkInterfaceExecute(r)
}

/*
 * UpdateNetworkInterface Update NetworkInterface object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkUpdateNetworkInterfaceRequest
 */
func (a *NetworkV1ApiService) UpdateNetworkInterface(ctx _context.Context, oName string) ApiNetworkUpdateNetworkInterfaceRequest {
	return ApiNetworkUpdateNetworkInterfaceRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkNetworkInterface
 */
func (a *NetworkV1ApiService) UpdateNetworkInterfaceExecute(r ApiNetworkUpdateNetworkInterfaceRequest) (NetworkNetworkInterface, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkNetworkInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/networkinterfaces/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateNetworkInterfaceExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdatePolicerProfileRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *NetworkPolicerProfile
}

func (r ApiNetworkUpdatePolicerProfileRequest) Body(body NetworkPolicerProfile) ApiNetworkUpdatePolicerProfileRequest {
	r.body = &body
	return r
}

func (r ApiNetworkUpdatePolicerProfileRequest) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.UpdatePolicerProfileExecute(r)
}

/*
 * UpdatePolicerProfile Update PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkUpdatePolicerProfileRequest
 */
func (a *NetworkV1ApiService) UpdatePolicerProfile(ctx _context.Context, oTenant string, oName string) ApiNetworkUpdatePolicerProfileRequest {
	return ApiNetworkUpdatePolicerProfileRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) UpdatePolicerProfileExecute(r ApiNetworkUpdatePolicerProfileRequest) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdatePolicerProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/policer-profile/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdatePolicerProfileExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdatePolicerProfile1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *NetworkPolicerProfile
}

func (r ApiNetworkUpdatePolicerProfile1Request) Body(body NetworkPolicerProfile) ApiNetworkUpdatePolicerProfile1Request {
	r.body = &body
	return r
}

func (r ApiNetworkUpdatePolicerProfile1Request) Execute() (NetworkPolicerProfile, *_nethttp.Response, error) {
	return r.ApiService.UpdatePolicerProfile1Execute(r)
}

/*
 * UpdatePolicerProfile1 Update PolicerProfile object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkUpdatePolicerProfile1Request
 */
func (a *NetworkV1ApiService) UpdatePolicerProfile1(ctx _context.Context, oName string) ApiNetworkUpdatePolicerProfile1Request {
	return ApiNetworkUpdatePolicerProfile1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkPolicerProfile
 */
func (a *NetworkV1ApiService) UpdatePolicerProfile1Execute(r ApiNetworkUpdatePolicerProfile1Request) (NetworkPolicerProfile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkPolicerProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdatePolicerProfile1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/policer-profile/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdatePolicerProfile1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateRoutingConfigRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *NetworkRoutingConfig
}

func (r ApiNetworkUpdateRoutingConfigRequest) Body(body NetworkRoutingConfig) ApiNetworkUpdateRoutingConfigRequest {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateRoutingConfigRequest) Execute() (NetworkRoutingConfig, *_nethttp.Response, error) {
	return r.ApiService.UpdateRoutingConfigExecute(r)
}

/*
 * UpdateRoutingConfig Update RoutingConfig object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkUpdateRoutingConfigRequest
 */
func (a *NetworkV1ApiService) UpdateRoutingConfig(ctx _context.Context, oName string) ApiNetworkUpdateRoutingConfigRequest {
	return ApiNetworkUpdateRoutingConfigRequest{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkRoutingConfig
 */
func (a *NetworkV1ApiService) UpdateRoutingConfigExecute(r ApiNetworkUpdateRoutingConfigRequest) (NetworkRoutingConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkRoutingConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateRoutingConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/routing-config/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateRoutingConfigExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateVirtualRouterRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *NetworkVirtualRouter
}

func (r ApiNetworkUpdateVirtualRouterRequest) Body(body NetworkVirtualRouter) ApiNetworkUpdateVirtualRouterRequest {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateVirtualRouterRequest) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.UpdateVirtualRouterExecute(r)
}

/*
 * UpdateVirtualRouter Update VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkUpdateVirtualRouterRequest
 */
func (a *NetworkV1ApiService) UpdateVirtualRouter(ctx _context.Context, oTenant string, oName string) ApiNetworkUpdateVirtualRouterRequest {
	return ApiNetworkUpdateVirtualRouterRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) UpdateVirtualRouterExecute(r ApiNetworkUpdateVirtualRouterRequest) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateVirtualRouter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtualrouters/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateVirtualRouterExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateVirtualRouter1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *NetworkVirtualRouter
}

func (r ApiNetworkUpdateVirtualRouter1Request) Body(body NetworkVirtualRouter) ApiNetworkUpdateVirtualRouter1Request {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateVirtualRouter1Request) Execute() (NetworkVirtualRouter, *_nethttp.Response, error) {
	return r.ApiService.UpdateVirtualRouter1Execute(r)
}

/*
 * UpdateVirtualRouter1 Update VirtualRouter object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkUpdateVirtualRouter1Request
 */
func (a *NetworkV1ApiService) UpdateVirtualRouter1(ctx _context.Context, oName string) ApiNetworkUpdateVirtualRouter1Request {
	return ApiNetworkUpdateVirtualRouter1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouter
 */
func (a *NetworkV1ApiService) UpdateVirtualRouter1Execute(r ApiNetworkUpdateVirtualRouter1Request) (NetworkVirtualRouter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateVirtualRouter1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtualrouters/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateVirtualRouter1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateVirtualRouterPeeringGroupRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName string
	body *NetworkVirtualRouterPeeringGroup
}

func (r ApiNetworkUpdateVirtualRouterPeeringGroupRequest) Body(body NetworkVirtualRouterPeeringGroup) ApiNetworkUpdateVirtualRouterPeeringGroupRequest {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateVirtualRouterPeeringGroupRequest) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.UpdateVirtualRouterPeeringGroupExecute(r)
}

/*
 * UpdateVirtualRouterPeeringGroup Update VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @param oName
 * @return ApiNetworkUpdateVirtualRouterPeeringGroupRequest
 */
func (a *NetworkV1ApiService) UpdateVirtualRouterPeeringGroup(ctx _context.Context, oTenant string, oName string) ApiNetworkUpdateVirtualRouterPeeringGroupRequest {
	return ApiNetworkUpdateVirtualRouterPeeringGroupRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) UpdateVirtualRouterPeeringGroupExecute(r ApiNetworkUpdateVirtualRouterPeeringGroupRequest) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateVirtualRouterPeeringGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/tenant/{O.Tenant}/virtual-router-peering-groups/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateVirtualRouterPeeringGroupExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkUpdateVirtualRouterPeeringGroup1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName string
	body *NetworkVirtualRouterPeeringGroup
}

func (r ApiNetworkUpdateVirtualRouterPeeringGroup1Request) Body(body NetworkVirtualRouterPeeringGroup) ApiNetworkUpdateVirtualRouterPeeringGroup1Request {
	r.body = &body
	return r
}

func (r ApiNetworkUpdateVirtualRouterPeeringGroup1Request) Execute() (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	return r.ApiService.UpdateVirtualRouterPeeringGroup1Execute(r)
}

/*
 * UpdateVirtualRouterPeeringGroup1 Update VirtualRouterPeeringGroup object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oName
 * @return ApiNetworkUpdateVirtualRouterPeeringGroup1Request
 */
func (a *NetworkV1ApiService) UpdateVirtualRouterPeeringGroup1(ctx _context.Context, oName string) ApiNetworkUpdateVirtualRouterPeeringGroup1Request {
	return ApiNetworkUpdateVirtualRouterPeeringGroup1Request{
		ApiService: a,
		ctx: ctx,
		oName: oName,
	}
}

/*
 * Execute executes the request
 * @return NetworkVirtualRouterPeeringGroup
 */
func (a *NetworkV1ApiService) UpdateVirtualRouterPeeringGroup1Execute(r ApiNetworkUpdateVirtualRouterPeeringGroup1Request) (NetworkVirtualRouterPeeringGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkVirtualRouterPeeringGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.UpdateVirtualRouterPeeringGroup1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/virtual-router-peering-groups/{O.Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Name"+"}", _neturl.PathEscape(parameterToString(r.oName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.UpdateVirtualRouterPeeringGroup1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchIPAMPolicyRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchIPAMPolicyRequest) OName(oName string) ApiNetworkWatchIPAMPolicyRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) ONamespace(oNamespace string) ApiNetworkWatchIPAMPolicyRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) OGenerationId(oGenerationId string) ApiNetworkWatchIPAMPolicyRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) OResourceVersion(oResourceVersion string) ApiNetworkWatchIPAMPolicyRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) OUuid(oUuid string) ApiNetworkWatchIPAMPolicyRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) OCreationTime(oCreationTime time.Time) ApiNetworkWatchIPAMPolicyRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) OModTime(oModTime time.Time) ApiNetworkWatchIPAMPolicyRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) OSelfLink(oSelfLink string) ApiNetworkWatchIPAMPolicyRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) LabelSelector(labelSelector string) ApiNetworkWatchIPAMPolicyRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) FieldSelector(fieldSelector string) ApiNetworkWatchIPAMPolicyRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchIPAMPolicyRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) From(from int32) ApiNetworkWatchIPAMPolicyRequest {
	r.from = &from
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) MaxResults(maxResults int32) ApiNetworkWatchIPAMPolicyRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) SortOrder(sortOrder string) ApiNetworkWatchIPAMPolicyRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchIPAMPolicyRequest) MetaOnly(metaOnly bool) ApiNetworkWatchIPAMPolicyRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchIPAMPolicyRequest) Execute() (NetworkAutoMsgIPAMPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchIPAMPolicyExecute(r)
}

/*
 * WatchIPAMPolicy Watch IPAMPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkWatchIPAMPolicyRequest
 */
func (a *NetworkV1ApiService) WatchIPAMPolicy(ctx _context.Context, oTenant string) ApiNetworkWatchIPAMPolicyRequest {
	return ApiNetworkWatchIPAMPolicyRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgIPAMPolicyWatchHelper
 */
func (a *NetworkV1ApiService) WatchIPAMPolicyExecute(r ApiNetworkWatchIPAMPolicyRequest) (NetworkAutoMsgIPAMPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgIPAMPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchIPAMPolicy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/tenant/{O.Tenant}/ipam-policies"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchIPAMPolicyExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchIPAMPolicy1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchIPAMPolicy1Request) OName(oName string) ApiNetworkWatchIPAMPolicy1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) OTenant(oTenant string) ApiNetworkWatchIPAMPolicy1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) ONamespace(oNamespace string) ApiNetworkWatchIPAMPolicy1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) OGenerationId(oGenerationId string) ApiNetworkWatchIPAMPolicy1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) OResourceVersion(oResourceVersion string) ApiNetworkWatchIPAMPolicy1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) OUuid(oUuid string) ApiNetworkWatchIPAMPolicy1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) OCreationTime(oCreationTime time.Time) ApiNetworkWatchIPAMPolicy1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) OModTime(oModTime time.Time) ApiNetworkWatchIPAMPolicy1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) OSelfLink(oSelfLink string) ApiNetworkWatchIPAMPolicy1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) LabelSelector(labelSelector string) ApiNetworkWatchIPAMPolicy1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) FieldSelector(fieldSelector string) ApiNetworkWatchIPAMPolicy1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchIPAMPolicy1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) From(from int32) ApiNetworkWatchIPAMPolicy1Request {
	r.from = &from
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) MaxResults(maxResults int32) ApiNetworkWatchIPAMPolicy1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) SortOrder(sortOrder string) ApiNetworkWatchIPAMPolicy1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchIPAMPolicy1Request) MetaOnly(metaOnly bool) ApiNetworkWatchIPAMPolicy1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchIPAMPolicy1Request) Execute() (NetworkAutoMsgIPAMPolicyWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchIPAMPolicy1Execute(r)
}

/*
 * WatchIPAMPolicy1 Watch IPAMPolicy objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkWatchIPAMPolicy1Request
 */
func (a *NetworkV1ApiService) WatchIPAMPolicy1(ctx _context.Context) ApiNetworkWatchIPAMPolicy1Request {
	return ApiNetworkWatchIPAMPolicy1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgIPAMPolicyWatchHelper
 */
func (a *NetworkV1ApiService) WatchIPAMPolicy1Execute(r ApiNetworkWatchIPAMPolicy1Request) (NetworkAutoMsgIPAMPolicyWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgIPAMPolicyWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchIPAMPolicy1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/ipam-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchIPAMPolicy1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchNetworkRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchNetworkRequest) OName(oName string) ApiNetworkWatchNetworkRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchNetworkRequest) ONamespace(oNamespace string) ApiNetworkWatchNetworkRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchNetworkRequest) OGenerationId(oGenerationId string) ApiNetworkWatchNetworkRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchNetworkRequest) OResourceVersion(oResourceVersion string) ApiNetworkWatchNetworkRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchNetworkRequest) OUuid(oUuid string) ApiNetworkWatchNetworkRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchNetworkRequest) OCreationTime(oCreationTime time.Time) ApiNetworkWatchNetworkRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchNetworkRequest) OModTime(oModTime time.Time) ApiNetworkWatchNetworkRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchNetworkRequest) OSelfLink(oSelfLink string) ApiNetworkWatchNetworkRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchNetworkRequest) LabelSelector(labelSelector string) ApiNetworkWatchNetworkRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchNetworkRequest) FieldSelector(fieldSelector string) ApiNetworkWatchNetworkRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchNetworkRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchNetworkRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchNetworkRequest) From(from int32) ApiNetworkWatchNetworkRequest {
	r.from = &from
	return r
}
func (r ApiNetworkWatchNetworkRequest) MaxResults(maxResults int32) ApiNetworkWatchNetworkRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchNetworkRequest) SortOrder(sortOrder string) ApiNetworkWatchNetworkRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchNetworkRequest) MetaOnly(metaOnly bool) ApiNetworkWatchNetworkRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchNetworkRequest) Execute() (NetworkAutoMsgNetworkWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchNetworkExecute(r)
}

/*
 * WatchNetwork Watch Network objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkWatchNetworkRequest
 */
func (a *NetworkV1ApiService) WatchNetwork(ctx _context.Context, oTenant string) ApiNetworkWatchNetworkRequest {
	return ApiNetworkWatchNetworkRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgNetworkWatchHelper
 */
func (a *NetworkV1ApiService) WatchNetworkExecute(r ApiNetworkWatchNetworkRequest) (NetworkAutoMsgNetworkWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgNetworkWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchNetwork")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/tenant/{O.Tenant}/networks"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchNetworkExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchNetwork1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchNetwork1Request) OName(oName string) ApiNetworkWatchNetwork1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchNetwork1Request) OTenant(oTenant string) ApiNetworkWatchNetwork1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkWatchNetwork1Request) ONamespace(oNamespace string) ApiNetworkWatchNetwork1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchNetwork1Request) OGenerationId(oGenerationId string) ApiNetworkWatchNetwork1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchNetwork1Request) OResourceVersion(oResourceVersion string) ApiNetworkWatchNetwork1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchNetwork1Request) OUuid(oUuid string) ApiNetworkWatchNetwork1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchNetwork1Request) OCreationTime(oCreationTime time.Time) ApiNetworkWatchNetwork1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchNetwork1Request) OModTime(oModTime time.Time) ApiNetworkWatchNetwork1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchNetwork1Request) OSelfLink(oSelfLink string) ApiNetworkWatchNetwork1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchNetwork1Request) LabelSelector(labelSelector string) ApiNetworkWatchNetwork1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchNetwork1Request) FieldSelector(fieldSelector string) ApiNetworkWatchNetwork1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchNetwork1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchNetwork1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchNetwork1Request) From(from int32) ApiNetworkWatchNetwork1Request {
	r.from = &from
	return r
}
func (r ApiNetworkWatchNetwork1Request) MaxResults(maxResults int32) ApiNetworkWatchNetwork1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchNetwork1Request) SortOrder(sortOrder string) ApiNetworkWatchNetwork1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchNetwork1Request) MetaOnly(metaOnly bool) ApiNetworkWatchNetwork1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchNetwork1Request) Execute() (NetworkAutoMsgNetworkWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchNetwork1Execute(r)
}

/*
 * WatchNetwork1 Watch Network objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkWatchNetwork1Request
 */
func (a *NetworkV1ApiService) WatchNetwork1(ctx _context.Context) ApiNetworkWatchNetwork1Request {
	return ApiNetworkWatchNetwork1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgNetworkWatchHelper
 */
func (a *NetworkV1ApiService) WatchNetwork1Execute(r ApiNetworkWatchNetwork1Request) (NetworkAutoMsgNetworkWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgNetworkWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchNetwork1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/networks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchNetwork1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchNetworkInterfaceRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchNetworkInterfaceRequest) OName(oName string) ApiNetworkWatchNetworkInterfaceRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) OTenant(oTenant string) ApiNetworkWatchNetworkInterfaceRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) ONamespace(oNamespace string) ApiNetworkWatchNetworkInterfaceRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) OGenerationId(oGenerationId string) ApiNetworkWatchNetworkInterfaceRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) OResourceVersion(oResourceVersion string) ApiNetworkWatchNetworkInterfaceRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) OUuid(oUuid string) ApiNetworkWatchNetworkInterfaceRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) OCreationTime(oCreationTime time.Time) ApiNetworkWatchNetworkInterfaceRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) OModTime(oModTime time.Time) ApiNetworkWatchNetworkInterfaceRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) OSelfLink(oSelfLink string) ApiNetworkWatchNetworkInterfaceRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) LabelSelector(labelSelector string) ApiNetworkWatchNetworkInterfaceRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) FieldSelector(fieldSelector string) ApiNetworkWatchNetworkInterfaceRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchNetworkInterfaceRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) From(from int32) ApiNetworkWatchNetworkInterfaceRequest {
	r.from = &from
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) MaxResults(maxResults int32) ApiNetworkWatchNetworkInterfaceRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) SortOrder(sortOrder string) ApiNetworkWatchNetworkInterfaceRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchNetworkInterfaceRequest) MetaOnly(metaOnly bool) ApiNetworkWatchNetworkInterfaceRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchNetworkInterfaceRequest) Execute() (NetworkAutoMsgNetworkInterfaceWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchNetworkInterfaceExecute(r)
}

/*
 * WatchNetworkInterface Watch NetworkInterface objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkWatchNetworkInterfaceRequest
 */
func (a *NetworkV1ApiService) WatchNetworkInterface(ctx _context.Context) ApiNetworkWatchNetworkInterfaceRequest {
	return ApiNetworkWatchNetworkInterfaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgNetworkInterfaceWatchHelper
 */
func (a *NetworkV1ApiService) WatchNetworkInterfaceExecute(r ApiNetworkWatchNetworkInterfaceRequest) (NetworkAutoMsgNetworkInterfaceWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgNetworkInterfaceWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/networkinterfaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchNetworkInterfaceExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchPolicerProfileRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchPolicerProfileRequest) OName(oName string) ApiNetworkWatchPolicerProfileRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) ONamespace(oNamespace string) ApiNetworkWatchPolicerProfileRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) OGenerationId(oGenerationId string) ApiNetworkWatchPolicerProfileRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) OResourceVersion(oResourceVersion string) ApiNetworkWatchPolicerProfileRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) OUuid(oUuid string) ApiNetworkWatchPolicerProfileRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) OCreationTime(oCreationTime time.Time) ApiNetworkWatchPolicerProfileRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) OModTime(oModTime time.Time) ApiNetworkWatchPolicerProfileRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) OSelfLink(oSelfLink string) ApiNetworkWatchPolicerProfileRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) LabelSelector(labelSelector string) ApiNetworkWatchPolicerProfileRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) FieldSelector(fieldSelector string) ApiNetworkWatchPolicerProfileRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchPolicerProfileRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) From(from int32) ApiNetworkWatchPolicerProfileRequest {
	r.from = &from
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) MaxResults(maxResults int32) ApiNetworkWatchPolicerProfileRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) SortOrder(sortOrder string) ApiNetworkWatchPolicerProfileRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchPolicerProfileRequest) MetaOnly(metaOnly bool) ApiNetworkWatchPolicerProfileRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchPolicerProfileRequest) Execute() (NetworkAutoMsgPolicerProfileWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchPolicerProfileExecute(r)
}

/*
 * WatchPolicerProfile Watch PolicerProfile objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkWatchPolicerProfileRequest
 */
func (a *NetworkV1ApiService) WatchPolicerProfile(ctx _context.Context, oTenant string) ApiNetworkWatchPolicerProfileRequest {
	return ApiNetworkWatchPolicerProfileRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgPolicerProfileWatchHelper
 */
func (a *NetworkV1ApiService) WatchPolicerProfileExecute(r ApiNetworkWatchPolicerProfileRequest) (NetworkAutoMsgPolicerProfileWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgPolicerProfileWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchPolicerProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/tenant/{O.Tenant}/policer-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchPolicerProfileExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchPolicerProfile1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchPolicerProfile1Request) OName(oName string) ApiNetworkWatchPolicerProfile1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) OTenant(oTenant string) ApiNetworkWatchPolicerProfile1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) ONamespace(oNamespace string) ApiNetworkWatchPolicerProfile1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) OGenerationId(oGenerationId string) ApiNetworkWatchPolicerProfile1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) OResourceVersion(oResourceVersion string) ApiNetworkWatchPolicerProfile1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) OUuid(oUuid string) ApiNetworkWatchPolicerProfile1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) OCreationTime(oCreationTime time.Time) ApiNetworkWatchPolicerProfile1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) OModTime(oModTime time.Time) ApiNetworkWatchPolicerProfile1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) OSelfLink(oSelfLink string) ApiNetworkWatchPolicerProfile1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) LabelSelector(labelSelector string) ApiNetworkWatchPolicerProfile1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) FieldSelector(fieldSelector string) ApiNetworkWatchPolicerProfile1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchPolicerProfile1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) From(from int32) ApiNetworkWatchPolicerProfile1Request {
	r.from = &from
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) MaxResults(maxResults int32) ApiNetworkWatchPolicerProfile1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) SortOrder(sortOrder string) ApiNetworkWatchPolicerProfile1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchPolicerProfile1Request) MetaOnly(metaOnly bool) ApiNetworkWatchPolicerProfile1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchPolicerProfile1Request) Execute() (NetworkAutoMsgPolicerProfileWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchPolicerProfile1Execute(r)
}

/*
 * WatchPolicerProfile1 Watch PolicerProfile objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkWatchPolicerProfile1Request
 */
func (a *NetworkV1ApiService) WatchPolicerProfile1(ctx _context.Context) ApiNetworkWatchPolicerProfile1Request {
	return ApiNetworkWatchPolicerProfile1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgPolicerProfileWatchHelper
 */
func (a *NetworkV1ApiService) WatchPolicerProfile1Execute(r ApiNetworkWatchPolicerProfile1Request) (NetworkAutoMsgPolicerProfileWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgPolicerProfileWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchPolicerProfile1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/policer-profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchPolicerProfile1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchRouteTableRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchRouteTableRequest) OName(oName string) ApiNetworkWatchRouteTableRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchRouteTableRequest) ONamespace(oNamespace string) ApiNetworkWatchRouteTableRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchRouteTableRequest) OGenerationId(oGenerationId string) ApiNetworkWatchRouteTableRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchRouteTableRequest) OResourceVersion(oResourceVersion string) ApiNetworkWatchRouteTableRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchRouteTableRequest) OUuid(oUuid string) ApiNetworkWatchRouteTableRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchRouteTableRequest) OCreationTime(oCreationTime time.Time) ApiNetworkWatchRouteTableRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchRouteTableRequest) OModTime(oModTime time.Time) ApiNetworkWatchRouteTableRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchRouteTableRequest) OSelfLink(oSelfLink string) ApiNetworkWatchRouteTableRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchRouteTableRequest) LabelSelector(labelSelector string) ApiNetworkWatchRouteTableRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchRouteTableRequest) FieldSelector(fieldSelector string) ApiNetworkWatchRouteTableRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchRouteTableRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchRouteTableRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchRouteTableRequest) From(from int32) ApiNetworkWatchRouteTableRequest {
	r.from = &from
	return r
}
func (r ApiNetworkWatchRouteTableRequest) MaxResults(maxResults int32) ApiNetworkWatchRouteTableRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchRouteTableRequest) SortOrder(sortOrder string) ApiNetworkWatchRouteTableRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchRouteTableRequest) MetaOnly(metaOnly bool) ApiNetworkWatchRouteTableRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchRouteTableRequest) Execute() (NetworkAutoMsgRouteTableWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchRouteTableExecute(r)
}

/*
 * WatchRouteTable Watch RouteTable objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkWatchRouteTableRequest
 */
func (a *NetworkV1ApiService) WatchRouteTable(ctx _context.Context, oTenant string) ApiNetworkWatchRouteTableRequest {
	return ApiNetworkWatchRouteTableRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgRouteTableWatchHelper
 */
func (a *NetworkV1ApiService) WatchRouteTableExecute(r ApiNetworkWatchRouteTableRequest) (NetworkAutoMsgRouteTableWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgRouteTableWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchRouteTable")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/tenant/{O.Tenant}/route-tables"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchRouteTableExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchRouteTable1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchRouteTable1Request) OName(oName string) ApiNetworkWatchRouteTable1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchRouteTable1Request) OTenant(oTenant string) ApiNetworkWatchRouteTable1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkWatchRouteTable1Request) ONamespace(oNamespace string) ApiNetworkWatchRouteTable1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchRouteTable1Request) OGenerationId(oGenerationId string) ApiNetworkWatchRouteTable1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchRouteTable1Request) OResourceVersion(oResourceVersion string) ApiNetworkWatchRouteTable1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchRouteTable1Request) OUuid(oUuid string) ApiNetworkWatchRouteTable1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchRouteTable1Request) OCreationTime(oCreationTime time.Time) ApiNetworkWatchRouteTable1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchRouteTable1Request) OModTime(oModTime time.Time) ApiNetworkWatchRouteTable1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchRouteTable1Request) OSelfLink(oSelfLink string) ApiNetworkWatchRouteTable1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchRouteTable1Request) LabelSelector(labelSelector string) ApiNetworkWatchRouteTable1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchRouteTable1Request) FieldSelector(fieldSelector string) ApiNetworkWatchRouteTable1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchRouteTable1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchRouteTable1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchRouteTable1Request) From(from int32) ApiNetworkWatchRouteTable1Request {
	r.from = &from
	return r
}
func (r ApiNetworkWatchRouteTable1Request) MaxResults(maxResults int32) ApiNetworkWatchRouteTable1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchRouteTable1Request) SortOrder(sortOrder string) ApiNetworkWatchRouteTable1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchRouteTable1Request) MetaOnly(metaOnly bool) ApiNetworkWatchRouteTable1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchRouteTable1Request) Execute() (NetworkAutoMsgRouteTableWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchRouteTable1Execute(r)
}

/*
 * WatchRouteTable1 Watch RouteTable objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkWatchRouteTable1Request
 */
func (a *NetworkV1ApiService) WatchRouteTable1(ctx _context.Context) ApiNetworkWatchRouteTable1Request {
	return ApiNetworkWatchRouteTable1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgRouteTableWatchHelper
 */
func (a *NetworkV1ApiService) WatchRouteTable1Execute(r ApiNetworkWatchRouteTable1Request) (NetworkAutoMsgRouteTableWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgRouteTableWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchRouteTable1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/route-tables"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchRouteTable1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchRoutingConfigRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchRoutingConfigRequest) OName(oName string) ApiNetworkWatchRoutingConfigRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) OTenant(oTenant string) ApiNetworkWatchRoutingConfigRequest {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) ONamespace(oNamespace string) ApiNetworkWatchRoutingConfigRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) OGenerationId(oGenerationId string) ApiNetworkWatchRoutingConfigRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) OResourceVersion(oResourceVersion string) ApiNetworkWatchRoutingConfigRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) OUuid(oUuid string) ApiNetworkWatchRoutingConfigRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) OCreationTime(oCreationTime time.Time) ApiNetworkWatchRoutingConfigRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) OModTime(oModTime time.Time) ApiNetworkWatchRoutingConfigRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) OSelfLink(oSelfLink string) ApiNetworkWatchRoutingConfigRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) LabelSelector(labelSelector string) ApiNetworkWatchRoutingConfigRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) FieldSelector(fieldSelector string) ApiNetworkWatchRoutingConfigRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchRoutingConfigRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) From(from int32) ApiNetworkWatchRoutingConfigRequest {
	r.from = &from
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) MaxResults(maxResults int32) ApiNetworkWatchRoutingConfigRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) SortOrder(sortOrder string) ApiNetworkWatchRoutingConfigRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchRoutingConfigRequest) MetaOnly(metaOnly bool) ApiNetworkWatchRoutingConfigRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchRoutingConfigRequest) Execute() (NetworkAutoMsgRoutingConfigWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchRoutingConfigExecute(r)
}

/*
 * WatchRoutingConfig Watch RoutingConfig objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkWatchRoutingConfigRequest
 */
func (a *NetworkV1ApiService) WatchRoutingConfig(ctx _context.Context) ApiNetworkWatchRoutingConfigRequest {
	return ApiNetworkWatchRoutingConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgRoutingConfigWatchHelper
 */
func (a *NetworkV1ApiService) WatchRoutingConfigExecute(r ApiNetworkWatchRoutingConfigRequest) (NetworkAutoMsgRoutingConfigWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgRoutingConfigWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchRoutingConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/routing-config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchRoutingConfigExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchVirtualRouterRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchVirtualRouterRequest) OName(oName string) ApiNetworkWatchVirtualRouterRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) ONamespace(oNamespace string) ApiNetworkWatchVirtualRouterRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) OGenerationId(oGenerationId string) ApiNetworkWatchVirtualRouterRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) OResourceVersion(oResourceVersion string) ApiNetworkWatchVirtualRouterRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) OUuid(oUuid string) ApiNetworkWatchVirtualRouterRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) OCreationTime(oCreationTime time.Time) ApiNetworkWatchVirtualRouterRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) OModTime(oModTime time.Time) ApiNetworkWatchVirtualRouterRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) OSelfLink(oSelfLink string) ApiNetworkWatchVirtualRouterRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) LabelSelector(labelSelector string) ApiNetworkWatchVirtualRouterRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) FieldSelector(fieldSelector string) ApiNetworkWatchVirtualRouterRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchVirtualRouterRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) From(from int32) ApiNetworkWatchVirtualRouterRequest {
	r.from = &from
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) MaxResults(maxResults int32) ApiNetworkWatchVirtualRouterRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) SortOrder(sortOrder string) ApiNetworkWatchVirtualRouterRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchVirtualRouterRequest) MetaOnly(metaOnly bool) ApiNetworkWatchVirtualRouterRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchVirtualRouterRequest) Execute() (NetworkAutoMsgVirtualRouterWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchVirtualRouterExecute(r)
}

/*
 * WatchVirtualRouter Watch VirtualRouter objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkWatchVirtualRouterRequest
 */
func (a *NetworkV1ApiService) WatchVirtualRouter(ctx _context.Context, oTenant string) ApiNetworkWatchVirtualRouterRequest {
	return ApiNetworkWatchVirtualRouterRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgVirtualRouterWatchHelper
 */
func (a *NetworkV1ApiService) WatchVirtualRouterExecute(r ApiNetworkWatchVirtualRouterRequest) (NetworkAutoMsgVirtualRouterWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgVirtualRouterWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchVirtualRouter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/tenant/{O.Tenant}/virtualrouters"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchVirtualRouterExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchVirtualRouter1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchVirtualRouter1Request) OName(oName string) ApiNetworkWatchVirtualRouter1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) OTenant(oTenant string) ApiNetworkWatchVirtualRouter1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) ONamespace(oNamespace string) ApiNetworkWatchVirtualRouter1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) OGenerationId(oGenerationId string) ApiNetworkWatchVirtualRouter1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) OResourceVersion(oResourceVersion string) ApiNetworkWatchVirtualRouter1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) OUuid(oUuid string) ApiNetworkWatchVirtualRouter1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) OCreationTime(oCreationTime time.Time) ApiNetworkWatchVirtualRouter1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) OModTime(oModTime time.Time) ApiNetworkWatchVirtualRouter1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) OSelfLink(oSelfLink string) ApiNetworkWatchVirtualRouter1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) LabelSelector(labelSelector string) ApiNetworkWatchVirtualRouter1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) FieldSelector(fieldSelector string) ApiNetworkWatchVirtualRouter1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchVirtualRouter1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) From(from int32) ApiNetworkWatchVirtualRouter1Request {
	r.from = &from
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) MaxResults(maxResults int32) ApiNetworkWatchVirtualRouter1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) SortOrder(sortOrder string) ApiNetworkWatchVirtualRouter1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchVirtualRouter1Request) MetaOnly(metaOnly bool) ApiNetworkWatchVirtualRouter1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchVirtualRouter1Request) Execute() (NetworkAutoMsgVirtualRouterWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchVirtualRouter1Execute(r)
}

/*
 * WatchVirtualRouter1 Watch VirtualRouter objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkWatchVirtualRouter1Request
 */
func (a *NetworkV1ApiService) WatchVirtualRouter1(ctx _context.Context) ApiNetworkWatchVirtualRouter1Request {
	return ApiNetworkWatchVirtualRouter1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgVirtualRouterWatchHelper
 */
func (a *NetworkV1ApiService) WatchVirtualRouter1Execute(r ApiNetworkWatchVirtualRouter1Request) (NetworkAutoMsgVirtualRouterWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgVirtualRouterWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchVirtualRouter1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/virtualrouters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchVirtualRouter1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchVirtualRouterPeeringGroupRequest struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oTenant string
	oName *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) OName(oName string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) ONamespace(oNamespace string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) OGenerationId(oGenerationId string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) OResourceVersion(oResourceVersion string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) OUuid(oUuid string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) OCreationTime(oCreationTime time.Time) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) OModTime(oModTime time.Time) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) OSelfLink(oSelfLink string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) LabelSelector(labelSelector string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) FieldSelector(fieldSelector string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) From(from int32) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.from = &from
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) MaxResults(maxResults int32) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) SortOrder(sortOrder string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) MetaOnly(metaOnly bool) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchVirtualRouterPeeringGroupRequest) Execute() (NetworkAutoMsgVirtualRouterPeeringGroupWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchVirtualRouterPeeringGroupExecute(r)
}

/*
 * WatchVirtualRouterPeeringGroup Watch VirtualRouterPeeringGroup objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oTenant
 * @return ApiNetworkWatchVirtualRouterPeeringGroupRequest
 */
func (a *NetworkV1ApiService) WatchVirtualRouterPeeringGroup(ctx _context.Context, oTenant string) ApiNetworkWatchVirtualRouterPeeringGroupRequest {
	return ApiNetworkWatchVirtualRouterPeeringGroupRequest{
		ApiService: a,
		ctx: ctx,
		oTenant: oTenant,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgVirtualRouterPeeringGroupWatchHelper
 */
func (a *NetworkV1ApiService) WatchVirtualRouterPeeringGroupExecute(r ApiNetworkWatchVirtualRouterPeeringGroupRequest) (NetworkAutoMsgVirtualRouterPeeringGroupWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgVirtualRouterPeeringGroupWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchVirtualRouterPeeringGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/tenant/{O.Tenant}/virtual-router-peering-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"O.Tenant"+"}", _neturl.PathEscape(parameterToString(r.oTenant, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchVirtualRouterPeeringGroupExecute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkWatchVirtualRouterPeeringGroup1Request struct {
	ctx _context.Context
	ApiService *NetworkV1ApiService
	oName *string
	oTenant *string
	oNamespace *string
	oGenerationId *string
	oResourceVersion *string
	oUuid *string
	oCreationTime *time.Time
	oModTime *time.Time
	oSelfLink *string
	labelSelector *string
	fieldSelector *string
	fieldChangeSelector *[]string
	from *int32
	maxResults *int32
	sortOrder *string
	metaOnly *bool
}

func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) OName(oName string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oName = &oName
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) OTenant(oTenant string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oTenant = &oTenant
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) ONamespace(oNamespace string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oNamespace = &oNamespace
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) OGenerationId(oGenerationId string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oGenerationId = &oGenerationId
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) OResourceVersion(oResourceVersion string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oResourceVersion = &oResourceVersion
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) OUuid(oUuid string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oUuid = &oUuid
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) OCreationTime(oCreationTime time.Time) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oCreationTime = &oCreationTime
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) OModTime(oModTime time.Time) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oModTime = &oModTime
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) OSelfLink(oSelfLink string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.oSelfLink = &oSelfLink
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) LabelSelector(labelSelector string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.labelSelector = &labelSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) FieldSelector(fieldSelector string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.fieldSelector = &fieldSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) FieldChangeSelector(fieldChangeSelector []string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.fieldChangeSelector = &fieldChangeSelector
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) From(from int32) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.from = &from
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) MaxResults(maxResults int32) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.maxResults = &maxResults
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) SortOrder(sortOrder string) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) MetaOnly(metaOnly bool) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	r.metaOnly = &metaOnly
	return r
}

func (r ApiNetworkWatchVirtualRouterPeeringGroup1Request) Execute() (NetworkAutoMsgVirtualRouterPeeringGroupWatchHelper, *_nethttp.Response, error) {
	return r.ApiService.WatchVirtualRouterPeeringGroup1Execute(r)
}

/*
 * WatchVirtualRouterPeeringGroup1 Watch VirtualRouterPeeringGroup objects. Supports WebSockets or HTTP long poll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNetworkWatchVirtualRouterPeeringGroup1Request
 */
func (a *NetworkV1ApiService) WatchVirtualRouterPeeringGroup1(ctx _context.Context) ApiNetworkWatchVirtualRouterPeeringGroup1Request {
	return ApiNetworkWatchVirtualRouterPeeringGroup1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NetworkAutoMsgVirtualRouterPeeringGroupWatchHelper
 */
func (a *NetworkV1ApiService) WatchVirtualRouterPeeringGroup1Execute(r ApiNetworkWatchVirtualRouterPeeringGroup1Request) (NetworkAutoMsgVirtualRouterPeeringGroupWatchHelper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkAutoMsgVirtualRouterPeeringGroupWatchHelper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkV1ApiService.WatchVirtualRouterPeeringGroup1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configs/network/v1/watch/virtual-router-peering-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.oName != nil {
		localVarQueryParams.Add("O.name", parameterToString(*r.oName, ""))
	}
	if r.oTenant != nil {
		localVarQueryParams.Add("O.tenant", parameterToString(*r.oTenant, ""))
	}
	if r.oNamespace != nil {
		localVarQueryParams.Add("O.namespace", parameterToString(*r.oNamespace, ""))
	}
	if r.oGenerationId != nil {
		localVarQueryParams.Add("O.generation-id", parameterToString(*r.oGenerationId, ""))
	}
	if r.oResourceVersion != nil {
		localVarQueryParams.Add("O.resource-version", parameterToString(*r.oResourceVersion, ""))
	}
	if r.oUuid != nil {
		localVarQueryParams.Add("O.uuid", parameterToString(*r.oUuid, ""))
	}
	if r.oCreationTime != nil {
		localVarQueryParams.Add("O.creation-time", parameterToString(*r.oCreationTime, ""))
	}
	if r.oModTime != nil {
		localVarQueryParams.Add("O.mod-time", parameterToString(*r.oModTime, ""))
	}
	if r.oSelfLink != nil {
		localVarQueryParams.Add("O.self-link", parameterToString(*r.oSelfLink, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("label-selector", parameterToString(*r.labelSelector, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("field-selector", parameterToString(*r.fieldSelector, ""))
	}
	if r.fieldChangeSelector != nil {
		localVarQueryParams.Add("field-change-selector", parameterToString(*r.fieldChangeSelector, "csv"))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.maxResults != nil {
		localVarQueryParams.Add("max-results", parameterToString(*r.maxResults, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort-order", parameterToString(*r.sortOrder, ""))
	}
	if r.metaOnly != nil {
		localVarQueryParams.Add("meta-only", parameterToString(*r.metaOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode == 401 {
		a.client.cfg.PSMCfg.Login()
		a.client.cfg.PSMCfg.SaveConfig()
		return a.WatchVirtualRouterPeeringGroup1Execute(r)
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
